!function($) {
    "use strict";
    function Axis(name) {
        $.jqplot.ElemContainer.call(this), this.name = name, this._series = [], this.show = !1, 
        this.tickRenderer = $.jqplot.AxisTickRenderer, this.tickOptions = {}, this.labelRenderer = $.jqplot.AxisLabelRenderer, 
        this.labelOptions = {}, this.label = null, this.showLabel = !0, this.min = null, 
        this.max = null, this.autoscale = !1, this.pad = 1.2, this.padMax = null, this.padMin = null, 
        this.ticks = [], this.numberTicks = null, this.tickInterval = null, this.renderer = $.jqplot.LinearAxisRenderer, 
        this.rendererOptions = {}, this.showTicks = !0, this.showTickMarks = !0, this.showMinorTicks = !0, 
        this.drawMajorGridlines = !0, this.drawMinorGridlines = !1, this.drawMajorTickMarks = !0, 
        this.drawMinorTickMarks = !0, this.useSeriesColor = !1, this.borderWidth = null, 
        this.borderColor = null, this.scaleToHiddenSeries = !1, this._dataBounds = {
            min: null,
            max: null
        }, this._intervalStats = [], this._offsets = {
            min: null,
            max: null
        }, this._ticks = [], this._label = null, this.syncTicks = null, this.tickSpacing = 75, 
        this._min = null, this._max = null, this._tickInterval = null, this._numberTicks = null, 
        this.__ticks = null, this._options = {};
    }
    function Legend(options) {
        $.jqplot.ElemContainer.call(this), this.show = !1, this.location = "ne", this.labels = [], 
        this.showLabels = !0, this.showSwatches = !0, this.placement = "insideGrid", this.xoffset = 0, 
        this.yoffset = 0, this.border = null, this.background = null, this.textColor = null, 
        this.fontFamily = null, this.fontSize = null, this.rowSpacing = "0.5em", this.renderer = $.jqplot.TableLegendRenderer, 
        this.rendererOptions = {}, this.preDraw = !1, this.marginTop = null, this.marginRight = null, 
        this.marginBottom = null, this.marginLeft = null, this.escapeHtml = !1, this._series = [], 
        $.extend(!0, this, options);
    }
    function Title(text) {
        $.jqplot.ElemContainer.call(this), this.text = text, this.show = !0, this.fontFamily = null, 
        this.fontSize = null, this.textAlign = null, this.textColor = null, this.renderer = $.jqplot.DivTitleRenderer, 
        this.rendererOptions = {}, this.escapeHtml = !1;
    }
    function Series(options) {
        options = options || {}, $.jqplot.ElemContainer.call(this), this.show = !0, this.xaxis = "xaxis", 
        this._xaxis = null, this.yaxis = "yaxis", this._yaxis = null, this.gridBorderWidth = 2, 
        this.renderer = $.jqplot.LineRenderer, this.rendererOptions = {}, this.data = [], 
        this.gridData = [], this.label = "", this.showLabel = !0, this.color = null, this.negativeColor = null, 
        this.lineWidth = 2.5, this.lineJoin = "round", this.lineCap = "round", this.linePattern = "solid", 
        this.shadow = !0, this.shadowAngle = 45, this.shadowOffset = 1.25, this.shadowDepth = 3, 
        this.shadowAlpha = "0.1", this.breakOnNull = !1, this.markerRenderer = $.jqplot.MarkerRenderer, 
        this.markerOptions = {}, this.showLine = !0, this.showMarker = !0, this.index = null, 
        this.fill = !1, this.fillColor = null, this.fillGradient = !1, this.fillGradientColor = null, 
        this.fillGradientDelay = null, this.fillAlpha = null, this.fillAndStroke = !1, this.disableStack = !1, 
        this._stack = !1, this.neighborThreshold = 4, this.fillToZero = !1, this.fillToValue = 0, 
        this.fillAxis = "y", this.useNegativeColors = !0, this._stackData = [], this._plotData = [], 
        this._plotValues = {
            x: [],
            y: []
        }, this._intervals = {
            x: {},
            y: {}
        }, this._prevPlotData = [], this._prevGridData = [], this._stackAxis = "y", this._primaryAxis = "_xaxis", 
        this.canvas = new $.jqplot.GenericCanvas(), this.shadowCanvas = new $.jqplot.GenericCanvas(), 
        this.plugins = {}, this._sumy = 0, this._sumx = 0, this._type = "";
    }
    function Grid() {
        $.jqplot.ElemContainer.call(this), this.drawGridlines = !0, this.gridLineColor = "#cccccc", 
        this.gridLineWidth = 1, this.background = "#fffdf6", this.borderColor = "#999999", 
        this.borderWidth = 2, this.drawBorder = !0, this.shadow = !0, this.shadowAngle = 45, 
        this.shadowOffset = 1.5, this.shadowWidth = 3, this.shadowDepth = 3, this.shadowColor = null, 
        this.shadowAlpha = "0.07", this._left = null, this._top = null, this._right = null, 
        this._bottom = null, this._width = null, this._height = null, this._axes = [], this.renderer = $.jqplot.CanvasGridRenderer, 
        this.rendererOptions = {}, this._offsets = {
            top: null,
            bottom: null,
            left: null,
            right: null
        };
    }
    function JqPlot() {
        this.animate = !1, this.animateReplot = !1, this.axes = {
            xaxis: new Axis("xaxis"),
            yaxis: new Axis("yaxis"),
            x2axis: new Axis("x2axis"),
            y2axis: new Axis("y2axis"),
            y3axis: new Axis("y3axis"),
            y4axis: new Axis("y4axis"),
            y5axis: new Axis("y5axis"),
            y6axis: new Axis("y6axis"),
            y7axis: new Axis("y7axis"),
            y8axis: new Axis("y8axis"),
            y9axis: new Axis("y9axis"),
            yMidAxis: new Axis("yMidAxis")
        }, this.baseCanvas = new $.jqplot.GenericCanvas(), this.captureRightClick = !1, 
        this.data = [], this.dataRenderer = null, this.dataRendererOptions = null, this.defaults = {
            axesDefaults: {},
            axes: {
                xaxis: {},
                yaxis: {},
                x2axis: {},
                y2axis: {},
                y3axis: {},
                y4axis: {},
                y5axis: {},
                y6axis: {},
                y7axis: {},
                y8axis: {},
                y9axis: {},
                yMidAxis: {}
            },
            seriesDefaults: {},
            series: []
        }, this.defaultAxisStart = 1, this.drawIfHidden = !1, this.eventCanvas = new $.jqplot.GenericCanvas(), 
        this.bellowSeriesCanvas = new $.jqplot.GenericCanvas(), this.fillBetween = {
            series1: null,
            series2: null,
            color: null,
            baseSeries: 0,
            fill: !0
        }, this.fontFamily = null, this.fontSize = null, this.grid = new Grid(), this.legend = new Legend(), 
        this.noDataIndicator = {
            show: !1,
            indicator: "Loading Data...",
            axes: {
                xaxis: {
                    min: 0,
                    max: 10,
                    tickInterval: 2,
                    show: !0
                },
                yaxis: {
                    min: 0,
                    max: 12,
                    tickInterval: 3,
                    show: !0
                }
            }
        }, this.negativeSeriesColors = $.jqplot.config.defaultNegativeColors, this.options = {}, 
        this.previousSeriesStack = [], this.plugins = {}, this.series = [], this.seriesStack = [], 
        this.seriesColors = $.jqplot.config.defaultColors, this.sortData = !0, this.stackSeries = !1, 
        this.syncXTicks = !0, this.syncYTicks = !0, this.target = null, this.targetId = null, 
        this.textColor = null, this.title = new Title(), this._drawCount = 0, this._sumy = 0, 
        this._sumx = 0, this._stackData = [], this._plotData = [], this._width = null, this._height = null, 
        this._plotDimensions = {
            height: null,
            width: null
        }, this._gridPadding = {
            top: null,
            right: null,
            bottom: null,
            left: null
        }, this._defaultGridPadding = {
            top: 10,
            right: 10,
            bottom: 23,
            left: 10
        }, this._addDomReference = $.jqplot.config.addDomReference, this.preInitHooks = new $.jqplot.HooksManager(), 
        this.postInitHooks = new $.jqplot.HooksManager(), this.preParseOptionsHooks = new $.jqplot.HooksManager(), 
        this.postParseOptionsHooks = new $.jqplot.HooksManager(), this.preDrawHooks = new $.jqplot.HooksManager(), 
        this.postDrawHooks = new $.jqplot.HooksManager(), this.preDrawSeriesHooks = new $.jqplot.HooksManager(), 
        this.postDrawSeriesHooks = new $.jqplot.HooksManager(), this.preDrawLegendHooks = new $.jqplot.HooksManager(), 
        this.addLegendRowHooks = new $.jqplot.HooksManager(), this.preSeriesInitHooks = new $.jqplot.HooksManager(), 
        this.postSeriesInitHooks = new $.jqplot.HooksManager(), this.preParseSeriesOptionsHooks = new $.jqplot.HooksManager(), 
        this.postParseSeriesOptionsHooks = new $.jqplot.HooksManager(), this.eventListenerHooks = new $.jqplot.EventListenerManager(), 
        this.preDrawAllSeriesHooks = new $.jqplot.HooksManager(), this.preDrawSeriesShadowHooks = new $.jqplot.HooksManager(), 
        this.postDrawSeriesShadowHooks = new $.jqplot.HooksManager(), this.colorGenerator = new $.jqplot.ColorGenerator(), 
        this.negativeColorGenerator = new $.jqplot.ColorGenerator(), this.canvasManager = new $.jqplot.CanvasManager(), 
        this.themeEngine = new $.jqplot.ThemeEngine(), this.getNextSeriesColor = function(t) {
            var idx = 0, sc = t.seriesColors;
            return function() {
                return idx < sc.length ? sc[idx++] : (idx = 0, sc[idx++]);
            };
        }(this);
    }
    var _axisNames = [ "yMidAxis", "xaxis", "yaxis", "x2axis", "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis" ], sortData = function(series) {
        var d, i, j, check, bat, n, dlen, l = series.length, simplesort1 = function(a, b) {
            return a[1] - b[1];
        }, simplesort0 = function(a, b) {
            return a[0] - b[0];
        };
        for (i = 0; l > i; i++) for (bat = [ series[i].data, series[i]._stackData, series[i]._plotData, series[i]._prevPlotData ], 
        n = 0; 4 > n; n++) if (check = !0, d = bat[n], "x" === series[i]._stackAxis) {
            for (j = 0, dlen = d.length; dlen > j; j++) if ("number" != typeof d[j][1]) {
                check = !1;
                break;
            }
            check && d.sort(simplesort1);
        } else {
            for (j = 0, dlen = d.length; dlen > j; j++) if ("number" != typeof d[j][0]) {
                check = !1;
                break;
            }
            check && d.sort(simplesort0);
        }
    }, getEventPosition = function(ev) {
        var n, axis, plot = ev.data.plot, go = plot.eventCanvas._elem.offset(), gridPos = {
            x: ev.pageX - go.left,
            y: ev.pageY - go.top
        }, dataPos = {
            xaxis: null,
            yaxis: null,
            x2axis: null,
            y2axis: null,
            y3axis: null,
            y4axis: null,
            y5axis: null,
            y6axis: null,
            y7axis: null,
            y8axis: null,
            y9axis: null,
            yMidAxis: null
        }, an = [ "xaxis", "yaxis", "x2axis", "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis", "yMidAxis" ], ax = plot.axes;
        for (n = 11; n > 0; n--) axis = an[n - 1], ax[axis].show && (dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]));
        return {
            offsets: go,
            gridPos: gridPos,
            dataPos: dataPos
        };
    }, checkIntersection = function(gridpos, plot) {
        var i, j, k, s, r, x, y, theta, sm, sa, minang, maxang, d0, d, p, points, hp, threshold, t, yp, series = plot.series, ret = null;
        for (k = plot.seriesStack.length - 1; k >= 0; k--) switch (i = plot.seriesStack[k], 
        s = series[i], hp = s._highlightThreshold, s.renderer.constructor) {
          case $.jqplot.BarRenderer:
            for (x = gridpos.x, y = gridpos.y, j = 0; j < s._barPoints.length; j++) if (points = s._barPoints[j], 
            p = s.gridData[j], x > points[0][0] && x < points[2][0] && y > points[2][1] && y < points[0][1]) return {
                seriesIndex: s.index,
                pointIndex: j,
                gridData: p,
                data: s.data[j],
                points: s._barPoints[j]
            };
            break;

          case $.jqplot.PyramidRenderer:
            for (x = gridpos.x, y = gridpos.y, j = 0; j < s._barPoints.length; j++) if (points = s._barPoints[j], 
            p = s.gridData[j], x > points[0][0] + hp[0][0] && x < points[2][0] + hp[2][0] && y > points[2][1] && y < points[0][1]) return {
                seriesIndex: s.index,
                pointIndex: j,
                gridData: p,
                data: s.data[j],
                points: s._barPoints[j]
            };
            break;

          case $.jqplot.DonutRenderer:
            if (sa = s.startAngle / 180 * Math.PI, x = gridpos.x - s._center[0], y = gridpos.y - s._center[1], 
            r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), x > 0 && -y >= 0 ? theta = 2 * Math.PI - Math.atan(-y / x) : x > 0 && 0 > -y ? theta = -Math.atan(-y / x) : 0 > x ? theta = Math.PI - Math.atan(-y / x) : 0 === x && -y > 0 ? theta = 3 * Math.PI / 2 : 0 === x && 0 > -y ? theta = Math.PI / 2 : 0 === x && 0 === y && (theta = 0), 
            sa && (theta -= sa, 0 > theta ? theta += 2 * Math.PI : theta > 2 * Math.PI && (theta -= 2 * Math.PI)), 
            sm = s.sliceMargin / 180 * Math.PI, r < s._radius && r > s._innerRadius) for (j = 0; j < s.gridData.length; j++) if (minang = j > 0 ? s.gridData[j - 1][1] + sm : sm, 
            maxang = s.gridData[j][1], theta > minang && maxang > theta) return {
                seriesIndex: s.index,
                pointIndex: j,
                gridData: [ gridpos.x, gridpos.y ],
                data: s.data[j]
            };
            break;

          case $.jqplot.PieRenderer:
            if (sa = s.startAngle / 180 * Math.PI, x = gridpos.x - s._center[0], y = gridpos.y - s._center[1], 
            r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), x > 0 && -y >= 0 ? theta = 2 * Math.PI - Math.atan(-y / x) : x > 0 && 0 > -y ? theta = -Math.atan(-y / x) : 0 > x ? theta = Math.PI - Math.atan(-y / x) : 0 === x && -y > 0 ? theta = 3 * Math.PI / 2 : 0 === x && 0 > -y ? theta = Math.PI / 2 : 0 === x && 0 === y && (theta = 0), 
            sa && (theta -= sa, 0 > theta ? theta += 2 * Math.PI : theta > 2 * Math.PI && (theta -= 2 * Math.PI)), 
            sm = s.sliceMargin / 180 * Math.PI, r < s._radius) for (j = 0; j < s.gridData.length; j++) if (minang = j > 0 ? s.gridData[j - 1][1] + sm : sm, 
            maxang = s.gridData[j][1], theta > minang && maxang > theta) return {
                seriesIndex: s.index,
                pointIndex: j,
                gridData: [ gridpos.x, gridpos.y ],
                data: s.data[j]
            };
            break;

          case $.jqplot.BubbleRenderer:
            if (x = gridpos.x, y = gridpos.y, ret = null, s.show) {
                for (j = 0; j < s.gridData.length; j++) p = s.gridData[j], d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1])), 
                d <= p[2] && (d0 >= d || null == d0) && (d0 = d, ret = {
                    seriesIndex: i,
                    pointIndex: j,
                    gridData: p,
                    data: s.data[j]
                });
                if (null != ret) return ret;
            }
            break;

          case $.jqplot.FunnelRenderer:
            var v, vfirst, vlast, lex, rex, cv, findedge;
            for (x = gridpos.x, y = gridpos.y, v = s._vertices, vfirst = v[0], vlast = v[v.length - 1], 
            findedge = function(l, p1, p2) {
                var m, b, y;
                return m = (p1[1] - p2[1]) / (p1[0] - p2[0]), b = p1[1] - m * p1[0], y = l + p1[1], 
                [ (y - b) / m, y ];
            }, lex = findedge(y, vfirst[0], vlast[3]), rex = findedge(y, vfirst[1], vlast[2]), 
            j = 0; j < v.length; j++) if (cv = v[j], y >= cv[0][1] && y <= cv[3][1] && x >= lex[0] && x <= rex[0]) return {
                seriesIndex: s.index,
                pointIndex: j,
                gridData: null,
                data: s.data[j]
            };
            break;

          case $.jqplot.LineRenderer:
            var inside, numPoints, ii, vertex1, vertex2;
            if (x = gridpos.x, y = gridpos.y, r = s.renderer, s.show) {
                if (!(!(s.fill || s.renderer.bands.show && s.renderer.bands.fill) || plot.plugins.highlighter && plot.plugins.highlighter.show)) {
                    if (inside = !1, x > s._boundingBox[0][0] && x < s._boundingBox[1][0] && y > s._boundingBox[1][1] && y < s._boundingBox[0][1]) for (numPoints = s._areaPoints.length, 
                    j = numPoints - 1, ii = 0; numPoints > ii; ii++) vertex1 = [ s._areaPoints[ii][0], s._areaPoints[ii][1] ], 
                    vertex2 = [ s._areaPoints[j][0], s._areaPoints[j][1] ], (vertex1[1] < y && vertex2[1] >= y || vertex2[1] < y && vertex1[1] >= y) && vertex1[0] + (y - vertex1[1]) / (vertex2[1] - vertex1[1]) * (vertex2[0] - vertex1[0]) < x && (inside = !inside), 
                    j = ii;
                    if (inside) return {
                        seriesIndex: i,
                        pointIndex: null,
                        gridData: s.gridData,
                        data: s.data,
                        points: s._areaPoints
                    };
                    break;
                }
                for (t = s.markerRenderer.size / 2 + s.neighborThreshold, threshold = t > 0 ? t : 0, 
                j = 0; j < s.gridData.length; j++) if (p = s.gridData[j], r.constructor === $.jqplot.OHLCRenderer) {
                    if (r.candleStick) {
                        if (yp = s._yaxis.series_u2p, x >= p[0] - r._bodyWidth / 2 && x <= p[0] + r._bodyWidth / 2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) return {
                            seriesIndex: i,
                            pointIndex: j,
                            gridData: p,
                            data: s.data[j]
                        };
                    } else if (r.hlc) {
                        if (yp = s._yaxis.series_u2p, x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) return {
                            seriesIndex: i,
                            pointIndex: j,
                            gridData: p,
                            data: s.data[j]
                        };
                    } else if (yp = s._yaxis.series_u2p, x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) return {
                        seriesIndex: i,
                        pointIndex: j,
                        gridData: p,
                        data: s.data[j]
                    };
                } else if (null != p[0] && null != p[1] && (d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1])), 
                threshold >= d && (d0 >= d || null == d0))) return d0 = d, {
                    seriesIndex: i,
                    pointIndex: j,
                    gridData: p,
                    data: s.data[j]
                };
            }
            break;

          default:
            if (x = gridpos.x, y = gridpos.y, r = s.renderer, s.show) for (t = s.markerRenderer.size / 2 + s.neighborThreshold, 
            threshold = t > 0 ? t : 0, j = 0; j < s.gridData.length; j++) if (p = s.gridData[j], 
            r.constructor === $.jqplot.OHLCRenderer) {
                if (r.candleStick) {
                    if (yp = s._yaxis.series_u2p, x >= p[0] - r._bodyWidth / 2 && x <= p[0] + r._bodyWidth / 2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) return {
                        seriesIndex: i,
                        pointIndex: j,
                        gridData: p,
                        data: s.data[j]
                    };
                } else if (r.hlc) {
                    if (yp = s._yaxis.series_u2p, x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) return {
                        seriesIndex: i,
                        pointIndex: j,
                        gridData: p,
                        data: s.data[j]
                    };
                } else if (yp = s._yaxis.series_u2p, x >= p[0] - r._tickLength && x <= p[0] + r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) return {
                    seriesIndex: i,
                    pointIndex: j,
                    gridData: p,
                    data: s.data[j]
                };
            } else if (d = Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1])), threshold >= d && (d0 >= d || null == d0)) return d0 = d, 
            {
                seriesIndex: i,
                pointIndex: j,
                gridData: p,
                data: s.data[j]
            };
        }
        return null;
    };
    $.fn.emptyForce = function() {
        var i, elem;
        for (i = 0, elem; "undefined" != typeof (elem = $(this)[i]); i++) {
            if (1 === elem.nodeType && $.cleanData(elem.getElementsByTagName("*")), $.jqplot.use_excanvas) elem.outerHTML = ""; else for (;elem.firstChild; ) elem.removeChild(elem.firstChild);
            elem = null;
        }
        return $(this);
    }, $.fn.removeChildForce = function(parent) {
        for (;parent.firstChild; ) this.removeChildForce(parent.firstChild), parent.removeChild(parent.firstChild);
    }, $.fn.jqplot = function() {
        var i, l, datas = [], options = [];
        for (i = 0, l = arguments.length; l > i; i++) $.isArray(arguments[i]) ? datas.push(arguments[i]) : $.isPlainObject(arguments[i]) && options.push(arguments[i]);
        return this.each(function(index) {
            var tid, plot, data, opts, $this = $(this), dl = datas.length, ol = options.length;
            data = dl > index ? datas[index] : dl ? datas[dl - 1] : null, opts = ol > index ? options[index] : ol ? options[ol - 1] : null, 
            tid = $this.attr("id"), "undefined" == typeof tid && (tid = "jqplot_target_" + $.jqplot.targetCounter++, 
            $this.attr("id", tid)), plot = $.jqplot(tid, data, opts), $this.data("jqplot", plot);
        });
    }, $.jqplot = function(target, data, options) {
        var plot, msg, _data = null, _options = null;
        if (3 === arguments.length ? (_data = data, _options = options) : 2 === arguments.length && ($.isArray(data) ? _data = data : $.isPlainObject(data) && (_options = data)), 
        null === _data && null !== _options && _options.data && (_data = _options.data), 
        plot = new JqPlot(), $("#" + target).removeClass("jqplot-error"), !$.jqplot.config.catchErrors) return plot.init(target, _data, _options), 
        plot.draw(), plot.themeEngine.init.call(plot), plot;
        try {
            return plot.init(target, _data, _options), plot.draw(), plot.themeEngine.init.call(plot), 
            plot;
        } catch (e) {
            msg = $.jqplot.config.errorMessage || e.message, $("#" + target).append('<div class="jqplot-error-message">' + msg + "</div>").addClass("jqplot-error").css({
                background: $.jqplot.config.errorBackground,
                border: $.jqplot.config.errorBorder,
                fontFamily: $.jqplot.config.errorFontFamily,
                fontSize: $.jqplot.config.errorFontSize,
                fontStyle: $.jqplot.config.errorFontStyle,
                fontWeight: $.jqplot.config.errorFontWeight
            });
        }
    }, $.jqplot.version = "@VERSION", $.jqplot.revision = "@REVISION", $.jqplot.targetCounter = 1, 
    $.jqplot.CanvasManager = function() {
        "undefined" == typeof $.jqplot.CanvasManager.canvases && ($.jqplot.CanvasManager.canvases = [], 
        $.jqplot.CanvasManager.free = []);
        var myCanvases = [];
        this.getCanvas = function() {
            var canvas, i, l, makeNew = !0;
            if (!$.jqplot.use_excanvas) for (i = 0, l = $.jqplot.CanvasManager.canvases.length; l > i; i++) if ($.jqplot.CanvasManager.free[i] === !0) {
                makeNew = !1, canvas = $.jqplot.CanvasManager.canvases[i], $.jqplot.CanvasManager.free[i] = !1, 
                myCanvases.push(i);
                break;
            }
            return makeNew && (canvas = document.createElement("canvas"), myCanvases.push($.jqplot.CanvasManager.canvases.length), 
            $.jqplot.CanvasManager.canvases.push(canvas), $.jqplot.CanvasManager.free.push(!1)), 
            canvas;
        }, this.initCanvas = function(canvas) {
            return $.jqplot.use_excanvas ? window.G_vmlCanvasManager.initElement(canvas) : canvas;
        }, this.freeAllCanvases = function() {
            var i, l;
            for (i = 0, l = myCanvases.length; l > i; i++) this.freeCanvas(myCanvases[i]);
            myCanvases = [];
        }, this.freeCanvas = function(idx) {
            if ($.jqplot.use_excanvas && "undefined" != typeof window.G_vmlCanvasManager.uninitElement) window.G_vmlCanvasManager.uninitElement($.jqplot.CanvasManager.canvases[idx]), 
            $.jqplot.CanvasManager.canvases[idx] = null; else {
                var canvas = $.jqplot.CanvasManager.canvases[idx];
                canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height), $(canvas).unbind().removeAttr("class").removeAttr("style"), 
                $(canvas).css({
                    left: "",
                    top: "",
                    position: ""
                }), canvas.width = 0, canvas.height = 0, $.jqplot.CanvasManager.free[idx] = !0;
            }
        };
    }, $.jqplot.log = function() {
        window.console && window.console.log.apply(window.console, arguments);
    }, $.jqplot.config = {
        addDomReference: !1,
        enablePlugins: !1,
        defaultHeight: 300,
        defaultWidth: 400,
        UTCAdjust: !1,
        timezoneOffset: new Date(6e4 * new Date().getTimezoneOffset()),
        errorMessage: "",
        errorBackground: "",
        errorBorder: "",
        errorFontFamily: "",
        errorFontSize: "",
        errorFontStyle: "",
        errorFontWeight: "",
        catchErrors: !0,
        defaultTickFormatString: "%.1f",
        defaultColors: [ "#4bb2c5", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7" ],
        defaultNegativeColors: [ "#498991", "#C08840", "#9F9274", "#546D61", "#646C4A", "#6F6621", "#6E3F5F", "#4F64B0", "#A89050", "#C45923", "#187399", "#945381", "#959E5C", "#C7AF7B", "#478396", "#907294" ],
        dashLength: 4,
        gapLength: 4,
        dotGapLength: 2.5,
        srcLocation: "jqplot/src/",
        pluginLocation: "jqplot/src/plugins/"
    }, $.jqplot.arrayMax = function(array) {
        return Math.max.apply(Math, array);
    }, $.jqplot.arrayMin = function(array) {
        return Math.min.apply(Math, array);
    }, $.jqplot.enablePlugins = $.jqplot.config.enablePlugins, $.jqplot.support_canvas = function() {
        return "undefined" == typeof $.jqplot.support_canvas.result && ($.jqplot.support_canvas.result = !!document.createElement("canvas").getContext), 
        $.jqplot.support_canvas.result;
    }, $.jqplot.support_canvas_text = function() {
        return "undefined" == typeof $.jqplot.support_canvas_text.result && (window.G_vmlCanvasManager && window.G_vmlCanvasManager._version > 887 ? $.jqplot.support_canvas_text.result = !0 : $.jqplot.support_canvas_text.result = !(!document.createElement("canvas").getContext || "function" != typeof document.createElement("canvas").getContext("2d").fillText)), 
        $.jqplot.support_canvas_text.result;
    }, $.jqplot.use_excanvas = $.support.boxModel && $.support.objectAll && $.support.leadingWhitespace || $.jqplot.support_canvas() ? !1 : !0, 
    $.jqplot.preInitHooks = [], $.jqplot.postInitHooks = [], $.jqplot.preParseOptionsHooks = [], 
    $.jqplot.postParseOptionsHooks = [], $.jqplot.preDrawHooks = [], $.jqplot.postDrawHooks = [], 
    $.jqplot.preDrawSeriesHooks = [], $.jqplot.postDrawSeriesHooks = [], $.jqplot.preDrawLegendHooks = [], 
    $.jqplot.addLegendRowHooks = [], $.jqplot.preSeriesInitHooks = [], $.jqplot.postSeriesInitHooks = [], 
    $.jqplot.preParseSeriesOptionsHooks = [], $.jqplot.postParseSeriesOptionsHooks = [], 
    $.jqplot.eventListenerHooks = [], $.jqplot.preDrawSeriesShadowHooks = [], $.jqplot.preDrawAllSeriesHooks = [], 
    $.jqplot.postDrawSeriesShadowHooks = [], $.jqplot.ElemContainer = function() {
        this._elem = null, this._plotWidth = 0, this._plotHeight = 0, this._plotDimensions = {
            height: null,
            width: null
        };
    }, $.jqplot.ElemContainer.prototype.createElement = function(el, offsets, clss, cssopts, attrib) {
        this._offsets = offsets;
        var klass = clss || "jqplot", elem = document.createElement(el);
        return this._elem = $(elem), this._elem.addClass(klass), this._elem.css(cssopts), 
        this._elem.attr(attrib), elem = null, this._elem;
    }, $.jqplot.ElemContainer.prototype.getWidth = function() {
        return this._elem ? this._elem.outerWidth(!0) : null;
    }, $.jqplot.ElemContainer.prototype.getHeight = function() {
        return this._elem ? this._elem.outerHeight(!0) : null;
    }, $.jqplot.ElemContainer.prototype.getPosition = function() {
        return this._elem ? this._elem.position() : {
            top: null,
            left: null,
            bottom: null,
            right: null
        };
    }, $.jqplot.ElemContainer.prototype.getTop = function() {
        return this.getPosition().top;
    }, $.jqplot.ElemContainer.prototype.getLeft = function() {
        return this.getPosition().left;
    }, $.jqplot.ElemContainer.prototype.getBottom = function() {
        return this._elem.css("bottom");
    }, $.jqplot.ElemContainer.prototype.getRight = function() {
        return this._elem.css("right");
    }, Axis.prototype = new $.jqplot.ElemContainer(), Axis.prototype.constructor = Axis, 
    Axis.prototype.init = function() {
        $.isFunction(this.renderer) && (this.renderer = new this.renderer()), this.tickOptions.axis = this.name, 
        "undefined" == typeof this.tickOptions.showMark && (this.tickOptions.showMark = this.showTicks), 
        "undefined" == typeof this.tickOptions.showTickMarks && (this.tickOptions.showTickMarks = this.showTickMarks), 
        "undefined" == typeof this.tickOptions.showLabel && (this.tickOptions.showLabel = this.showTicks), 
        "undefined" == typeof this.label || null === this.label || "" === this.label ? this.showLabel = !1 : this.labelOptions.label = this.label, 
        this.showLabel === !1 && (this.labelOptions.show = !1), 0 === this.pad && (this.pad = 1), 
        0 === this.padMax && (this.padMax = 1), 0 === this.padMin && (this.padMin = 1), 
        null === this.padMax && (this.padMax = (this.pad - 1) / 2 + 1), null === this.padMin && (this.padMin = (this.pad - 1) / 2 + 1), 
        this.pad = this.padMax + this.padMin - 1, (null !== this.min || null !== this.max) && (this.autoscale = !1), 
        null === this.syncTicks && this.name.indexOf("y") > -1 ? this.syncTicks = !0 : null === this.syncTicks && (this.syncTicks = !1), 
        this.renderer.init.call(this, this.rendererOptions);
    }, Axis.prototype.draw = function(ctx, plot) {
        return this.__ticks && (this.__ticks = null), this.renderer.draw.call(this, ctx, plot);
    }, Axis.prototype.set = function() {
        this.renderer.set.call(this);
    }, Axis.prototype.pack = function(pos, offsets) {
        this.show && this.renderer.pack.call(this, pos, offsets), null === this._min && (this._min = this.min, 
        this._max = this.max, this._tickInterval = this.tickInterval, this._numberTicks = this.numberTicks, 
        this.__ticks = this._ticks);
    }, Axis.prototype.reset = function() {
        this.renderer.reset.call(this);
    }, Axis.prototype.resetScale = function(opts) {
        $.extend(!0, this, {
            min: null,
            max: null,
            numberTicks: null,
            tickInterval: null,
            _ticks: [],
            ticks: []
        }, opts), this.resetDataBounds();
    }, Axis.prototype.resetDataBounds = function() {
        var l, s, d, minyidx, maxyidx, db = this._dataBounds, doforce = this.show ? !0 : !1, i = 0, j = 0;
        for (db.min = null, db.max = null, i = 0; i < this._series.length; i++) if (s = this._series[i], 
        s.show || this.scaleToHiddenSeries) {
            for (d = s._plotData, "line" === s._type && s.renderer.bands.show && "x" !== this.name.charAt(0) && (d = [ [ 0, s.renderer.bands._min ], [ 1, s.renderer.bands._max ] ]), 
            minyidx = 1, maxyidx = 1, null !== s._type && "ohlc" === s._type && (minyidx = 3, 
            maxyidx = 2), j = 0, l = d.length; l > j; j++) "xaxis" === this.name || "x2axis" === this.name ? ((null !== d[j][0] && d[j][0] < db.min || null === db.min) && (db.min = d[j][0]), 
            (null !== d[j][0] && d[j][0] > db.max || null === db.max) && (db.max = d[j][0])) : ((null !== d[j][minyidx] && d[j][minyidx] < db.min || null === db.min) && (db.min = d[j][minyidx]), 
            (null !== d[j][maxyidx] && d[j][maxyidx] > db.max || null === db.max) && (db.max = d[j][maxyidx]));
            doforce && s.renderer.constructor !== $.jqplot.BarRenderer ? doforce = !1 : doforce && this._options.hasOwnProperty("forceTickAt0") && this._options.forceTickAt0 === !1 ? doforce = !1 : doforce && s.renderer.constructor === $.jqplot.BarRenderer && ("vertical" === s.barDirection && "xaxis" !== this.name && "x2axis" !== this.name ? (null !== this._options.pad || null !== this._options.padMin) && (doforce = !1) : "horizontal" !== s.barDirection || "xaxis" !== this.name && "x2axis" !== this.name || (null !== this._options.pad || null !== this._options.padMin) && (doforce = !1));
        }
        doforce && this.renderer.constructor === $.jqplot.LinearAxisRenderer && db.min >= 0 && (this.padMin = 1, 
        this.forceTickAt0 = !0);
    }, Legend.prototype = new $.jqplot.ElemContainer(), Legend.prototype.constructor = Legend, 
    Legend.prototype.setOptions = function(options) {
        if ($.extend(!0, this, options), "inside" === this.placement && (this.placement = "insideGrid"), 
        this.xoffset > 0) {
            if ("insideGrid" === this.placement) switch (this.location) {
              case "nw":
              case "w":
              case "sw":
                null === this.marginLeft && (this.marginLeft = this.xoffset + "px"), this.marginRight = "0px";
                break;

              default:
                null === this.marginRight && (this.marginRight = this.xoffset + "px"), this.marginLeft = "0px";
            } else if ("outside" === this.placement) switch (this.location) {
              case "nw":
              case "w":
              case "sw":
                null === this.marginRight && (this.marginRight = this.xoffset + "px"), this.marginLeft = "0px";
                break;

              default:
                null === this.marginLeft && (this.marginLeft = this.xoffset + "px"), this.marginRight = "0px";
            }
            this.xoffset = 0;
        }
        if (this.yoffset > 0) {
            if ("outside" === this.placement) switch (this.location) {
              case "sw":
              case "s":
              case "se":
                null === this.marginTop && (this.marginTop = this.yoffset + "px"), this.marginBottom = "0px";
                break;

              default:
                null === this.marginBottom && (this.marginBottom = this.yoffset + "px"), this.marginTop = "0px";
            } else if ("insideGrid" === this.placement) switch (this.location) {
              case "sw":
              case "s":
              case "se":
                null === this.marginBottom && (this.marginBottom = this.yoffset + "px"), this.marginTop = "0px";
                break;

              default:
                null === this.marginTop && (this.marginTop = this.yoffset + "px"), this.marginBottom = "0px";
            }
            this.yoffset = 0;
        }
    }, Legend.prototype.init = function() {
        $.isFunction(this.renderer) && (this.renderer = new this.renderer()), this.renderer.init.call(this, this.rendererOptions);
    }, Legend.prototype.draw = function(offsets, plot) {
        var i, l;
        for (i = 0, l = $.jqplot.preDrawLegendHooks.length; l > i; i++) $.jqplot.preDrawLegendHooks[i].call(this, offsets);
        return this.renderer.draw.call(this, offsets, plot);
    }, Legend.prototype.pack = function(offsets) {
        this.renderer.pack.call(this, offsets);
    }, Title.prototype = new $.jqplot.ElemContainer(), Title.prototype.constructor = Title, 
    Title.prototype.init = function() {
        $.isFunction(this.renderer) && (this.renderer = new this.renderer()), this.renderer.init.call(this, this.rendererOptions);
    }, Title.prototype.draw = function(width) {
        return this.renderer.draw.call(this, width);
    }, Title.prototype.pack = function() {
        this.renderer.pack.call(this);
    }, Series.prototype = new $.jqplot.ElemContainer(), Series.prototype.constructor = Series, 
    Series.prototype.init = function(index, gridbw, plot) {
        var i, l, comp, comp2, d = this.data, temp = [];
        for (this.index = index, this.gridBorderWidth = gridbw, i = 0, l = d.length; l > i; i++) if (this.breakOnNull) temp.push(d[i]); else {
            if (null === d[i] || null === d[i][0] || null === d[i][1]) {
                temp.push(d[i]);
                continue;
            }
            temp.push(d[i]);
        }
        this.data = temp, this.color || (this.color = plot.colorGenerator.get(this.index)), 
        this.negativeColor || (this.negativeColor = plot.negativeColorGenerator.get(this.index)), 
        this.fillColor || (this.fillColor = this.color), this.fillAlpha && (comp = $.jqplot.normalize2rgb(this.fillColor), 
        comp = $.jqplot.getColorComponents(comp), this.fillColor = "rgba(" + comp[0] + "," + comp[1] + "," + comp[2] + "," + this.fillAlpha + ")", 
        this.fillGradient && this.fillGradientColor && (comp2 = $.jqplot.normalize2rgb(this.fillGradientColor), 
        comp2 = $.jqplot.getColorComponents(comp2), this.fillGradientColor = "rgba(" + comp2[0] + "," + comp2[1] + "," + comp2[2] + "," + this.fillAlpha + ")")), 
        $.isFunction(this.renderer) && (this.renderer = new this.renderer()), this.renderer.init.call(this, this.rendererOptions, plot), 
        this.markerRenderer = new this.markerRenderer(), this.markerOptions.color || (this.markerOptions.color = this.color), 
        "undefined" == typeof this.markerOptions.show && (this.markerOptions.show = this.showMarker), 
        this.showMarker = this.markerOptions.show, this.markerRenderer.init(this.markerOptions);
    }, Series.prototype.draw = function(sctx, opts, plot) {
        var j, l, data, gridData, options = "undefined" == typeof opts ? {} : opts;
        for (sctx = "undefined" == typeof sctx ? this.canvas._ctx : sctx, j = 0, l = $.jqplot.preDrawSeriesHooks.length; l > j; j++) $.jqplot.preDrawSeriesHooks[j].call(this, sctx, options);
        for (this.show && (this.renderer.setGridData.call(this, plot), options.preventJqPlotSeriesDrawTrigger || $(sctx.canvas).trigger("jqplotSeriesDraw", [ this.data, this.gridData ]), 
        data = [], data = options.data ? options.data : this._stack ? this._plotData : this.data, 
        gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot), 
        "line" === this._type && this.renderer.smooth && this.renderer._smoothedData.length && (gridData = this.renderer._smoothedData), 
        this.renderer.draw.call(this, sctx, gridData, options, plot)), j = 0, l = $.jqplot.postDrawSeriesHooks.length; l > j; j++) $.jqplot.postDrawSeriesHooks[j].call(this, sctx, options, plot);
        sctx = opts = plot = j = data = gridData = null;
    }, Series.prototype.drawShadow = function(sctx, opts, plot) {
        var j, l, data, gridData, options = "undefined" == typeof opts ? {} : opts;
        for (sctx = "undefined" == typeof sctx ? this.shadowCanvas._ctx : sctx, j = 0, l = $.jqplot.preDrawSeriesShadowHooks.length; l > j; j++) $.jqplot.preDrawSeriesShadowHooks[j].call(this, sctx, options);
        for (this.shadow && (this.renderer.setGridData.call(this, plot), data = [], data = options.data ? options.data : this._stack ? this._plotData : this.data, 
        gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot), 
        this.renderer.drawShadow.call(this, sctx, gridData, options, plot)), j = 0, l = $.jqplot.postDrawSeriesShadowHooks.length; l > j; j++) $.jqplot.postDrawSeriesShadowHooks[j].call(this, sctx, options);
        sctx = opts = plot = j = data = gridData = null;
    }, Series.prototype.toggleDisplay = function(ev, callback) {
        var s, speed;
        s = ev.data.series ? ev.data.series : this, ev.data.speed && (speed = ev.data.speed), 
        speed ? s.canvas._elem.is(":hidden") || !s.show ? (s.show = !0, s.canvas._elem.removeClass("jqplot-series-hidden"), 
        s.shadowCanvas._elem && s.shadowCanvas._elem.fadeIn(speed), s.canvas._elem.fadeIn(speed, callback), 
        s.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + s.index).fadeIn(speed)) : (s.show = !1, 
        s.canvas._elem.addClass("jqplot-series-hidden"), s.shadowCanvas._elem && s.shadowCanvas._elem.fadeOut(speed), 
        s.canvas._elem.fadeOut(speed, callback), s.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + s.index).fadeOut(speed)) : s.canvas._elem.is(":hidden") || !s.show ? (s.show = !0, 
        s.canvas._elem.removeClass("jqplot-series-hidden"), s.shadowCanvas._elem && s.shadowCanvas._elem.show(), 
        s.canvas._elem.show(0, callback), s.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + s.index).show()) : (s.show = !1, 
        s.canvas._elem.addClass("jqplot-series-hidden"), s.shadowCanvas._elem && s.shadowCanvas._elem.hide(), 
        s.canvas._elem.hide(0, callback), s.canvas._elem.nextAll(".jqplot-point-label.jqplot-series-" + s.index).hide());
    }, Grid.prototype = new $.jqplot.ElemContainer(), Grid.prototype.constructor = Grid, 
    Grid.prototype.init = function() {
        $.isFunction(this.renderer) && (this.renderer = new this.renderer()), this.renderer.init.call(this, this.rendererOptions);
    }, Grid.prototype.createElement = function(offsets, plot) {
        return this._offsets = offsets, this.renderer.createElement.call(this, plot);
    }, Grid.prototype.draw = function() {
        this.renderer.draw.call(this);
    }, $.jqplot.GenericCanvas = function() {
        $.jqplot.ElemContainer.call(this), this._ctx = null;
    }, $.jqplot.GenericCanvas.prototype = new $.jqplot.ElemContainer(), $.jqplot.GenericCanvas.prototype.constructor = $.jqplot.GenericCanvas, 
    $.jqplot.GenericCanvas.prototype.createElement = function(offsets, clss, plotDimensions, plot) {
        this._offsets = offsets;
        var elem, klass = "jqplot";
        return "undefined" != typeof clss && (klass = clss), elem = plot.canvasManager.getCanvas(), 
        null !== plotDimensions && (this._plotDimensions = plotDimensions), elem.width = this._plotDimensions.width - this._offsets.left - this._offsets.right, 
        elem.height = this._plotDimensions.height - this._offsets.top - this._offsets.bottom, 
        this._elem = $(elem), this._elem.css({
            position: "absolute",
            left: this._offsets.left,
            top: this._offsets.top
        }), this._elem.addClass(klass), elem = plot.canvasManager.initCanvas(elem), elem = null, 
        this._elem;
    }, $.jqplot.GenericCanvas.prototype.setContext = function() {
        return this._ctx = this._elem.get(0).getContext("2d"), this._ctx;
    }, $.jqplot.GenericCanvas.prototype.resetCanvas = function() {
        this._elem && ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement && window.G_vmlCanvasManager.uninitElement(this._elem.get(0)), 
        this._elem.emptyForce()), this._ctx = null;
    }, $.jqplot.HooksManager = function() {
        this.hooks = [], this.args = [];
    }, $.jqplot.HooksManager.prototype.addOnce = function(fn, args) {
        args = args || [];
        var i, l, havehook = !1;
        for (i = 0, l = this.hooks.length; l > i; i++) this.hooks[i] === fn && (havehook = !0);
        havehook || (this.hooks.push(fn), this.args.push(args));
    }, $.jqplot.HooksManager.prototype.add = function(fn, args) {
        args = args || [], this.hooks.push(fn), this.args.push(args);
    }, $.jqplot.EventListenerManager = function() {
        this.hooks = [];
    }, $.jqplot.EventListenerManager.prototype.addOnce = function(ev, fn) {
        var h, i, l, havehook = !1;
        for (i = 0, l = this.hooks.length; l > i; i++) h = this.hooks[i], h[0] === ev && h[1] === fn && (havehook = !0);
        havehook || this.hooks.push([ ev, fn ]);
    }, $.jqplot.EventListenerManager.prototype.add = function(ev, fn) {
        this.hooks.push([ ev, fn ]);
    }, JqPlot.prototype.init = function(target, data, options) {
        var i, j, l, seriesLen, h, w, ax, prop, name, axis;
        for (options = options || {}, i = 0, l = $.jqplot.preInitHooks.length; l > i; i++) $.jqplot.preInitHooks[i].call(this, target, data, options);
        for (i = 0, l = this.preInitHooks.hooks.length; l > i; i++) this.preInitHooks.hooks[i].call(this, target, data, options);
        if (this.targetId = "#" + target, this.target = $("#" + target), this._addDomReference && this.target.data("jqplot", this), 
        this.target.removeClass("jqplot-error"), !this.target.get(0)) throw new Error("No plot target specified");
        for ("static" === this.target.css("position") && this.target.css("position", "relative"), 
        this.target.hasClass("jqplot-target") || this.target.addClass("jqplot-target"), 
        this.target.height() ? this._height = h = this.target.height() : (h = options && options.height ? parseInt(options.height, 10) : this.target.attr("data-height") ? parseInt(this.target.attr("data-height"), 10) : parseInt($.jqplot.config.defaultHeight, 10), 
        this._height = h, this.target.css("height", h + "px")), this.target.width() ? this._width = w = this.target.width() : (w = options && options.width ? parseInt(options.width, 10) : this.target.attr("data-width") ? parseInt(this.target.attr("data-width"), 10) : parseInt($.jqplot.config.defaultWidth, 10), 
        this._width = w, this.target.css("width", w + "px")), i = 0, l = _axisNames.length; l > i; i++) this.axes[_axisNames[i]] = new Axis(_axisNames[i]);
        if (this._plotDimensions.height = this._height, this._plotDimensions.width = this._width, 
        this.grid._plotDimensions = this._plotDimensions, this.title._plotDimensions = this._plotDimensions, 
        this.baseCanvas._plotDimensions = this._plotDimensions, this.eventCanvas._plotDimensions = this._plotDimensions, 
        this.legend._plotDimensions = this._plotDimensions, this._height <= 0 || this._width <= 0 || !this._height || !this._width) throw new Error("Canvas dimension not set");
        if (options.dataRenderer && $.isFunction(options.dataRenderer) && (options.dataRendererOptions && (this.dataRendererOptions = options.dataRendererOptions), 
        this.dataRenderer = options.dataRenderer, data = this.dataRenderer(data, this, this.dataRendererOptions)), 
        options.noDataIndicator && $.isPlainObject(options.noDataIndicator) && $.extend(!0, this.noDataIndicator, options.noDataIndicator), 
        null === data || $.isArray(data) === !1 || 0 === data.length || $.isArray(data[0]) === !1 || 0 === data[0].length) {
            if (this.noDataIndicator.show === !1) throw new Error("No data specified. (Tips: Use noDataIndicator to show a noDataIndicator on chart)");
            for (ax in this.noDataIndicator.axes) if (this.noDataIndicator.axes.hasOwnProperty(ax)) for (prop in this.noDataIndicator.axes[ax]) this.noDataIndicator.axes[ax].hasOwnProperty(prop) && (this.axes[ax][prop] = this.noDataIndicator.axes[ax][prop]);
            this.postDrawHooks.add(function() {
                var th, tw, eh = this.eventCanvas.getHeight(), ew = this.eventCanvas.getWidth(), $temp = $('<div class="jqplot-noData-container" style="position:absolute;"></div>'), $temp2 = $('<div class="jqplot-noData-contents" style="text-align:center; position:relative;"><div class="outer-center"><div class="inner-center"></div></div><div class="clear"></div></div>');
                this.target.append($temp), $temp.height(eh).width(ew).css({
                    top: this.eventCanvas._offsets.top,
                    left: this.eventCanvas._offsets.left
                }).append($temp2), $temp2.find(".inner-center").html(this.noDataIndicator.indicator), 
                th = $temp2.height(), tw = $temp2.width(), $temp2.height(th).width(tw).css("top", (eh - th) / 2 + "px");
            });
        }
        for (this.data = $.extend(!0, [], data), this.parseOptions(options), this.textColor && this.target.css("color", this.textColor), 
        this.fontFamily && this.target.css("font-family", this.fontFamily), this.fontSize && this.target.css("font-size", this.fontSize), 
        this.title.init(), this.legend.init(), this._sumy = 0, this._sumx = 0, this.computePlotData(), 
        i = 0, seriesLen = this.series.length; seriesLen > i; i++) {
            for (this.seriesStack.push(i), this.previousSeriesStack.push(i), this.series[i].shadowCanvas._plotDimensions = this._plotDimensions, 
            this.series[i].canvas._plotDimensions = this._plotDimensions, j = 0, l = $.jqplot.preSeriesInitHooks.length; l > j; j++) $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (j = 0, l = this.preSeriesInitHooks.hooks.length; l > j; j++) this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (this.series[i]._plotDimensions = this._plotDimensions, this.series[i].init(i, this.grid.borderWidth, this), 
            j = 0, l = $.jqplot.postSeriesInitHooks.length; l > j; j++) $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (j = 0, l = this.postSeriesInitHooks.hooks.length; l > j; j++) this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            this._sumy += this.series[i]._sumy, this._sumx += this.series[i]._sumx;
        }
        for (i = 0, l = _axisNames.length; l > i; i++) name = _axisNames[i], axis = this.axes[name], 
        axis._plotDimensions = this._plotDimensions, axis.init(), null === this.axes[name].borderColor && ("x" !== name.charAt(0) && axis.useSeriesColor === !0 && axis.show ? axis.borderColor = axis._series[0].color : axis.borderColor = this.grid.borderColor);
        for (this.sortData && sortData(this.series), this.grid.init(), this.grid._axes = this.axes, 
        this.legend._series = this.series, i = 0, l = $.jqplot.postInitHooks.length; l > i; i++) $.jqplot.postInitHooks[i].call(this, target, this.data, options);
        for (i = 0, l = this.postInitHooks.hooks.length; l > i; i++) this.postInitHooks.hooks[i].call(this, target, this.data, options);
    }, JqPlot.prototype.resetAxesScale = function(axes, options) {
        var i, l, name, opts = options || {}, ax = axes || this.axes;
        if (ax === !0 && (ax = this.axes), $.isArray(ax)) for (i = 0, l = ax.length; l > i; i++) this.axes[ax[i]].resetScale(opts[ax[i]]); else if ("object" == typeof ax) for (name in ax) ax.hasOwnProperty(name) && this.axes[name].resetScale(opts[name]);
    }, JqPlot.prototype.reInitialize = function(data, opts) {
        var i, l, seriesLen, name, t, j, axis, el, tlen, options = $.extend(!0, {}, this.options, opts), target = this.targetId.substr(1), tdata = null === data ? this.data : data;
        for (i = 0, l = $.jqplot.preInitHooks.length; l > i; i++) $.jqplot.preInitHooks[i].call(this, target, tdata, options);
        for (i = 0, l = this.preInitHooks.hooks.length; l > i; i++) this.preInitHooks.hooks[i].call(this, target, tdata, options);
        if (this._height = this.target.height(), this._width = this.target.width(), this._height <= 0 || this._width <= 0 || !this._height || !this._width) throw new Error("Target dimension not set");
        for (this._plotDimensions.height = this._height, this._plotDimensions.width = this._width, 
        this.grid._plotDimensions = this._plotDimensions, this.title._plotDimensions = this._plotDimensions, 
        this.baseCanvas._plotDimensions = this._plotDimensions, this.eventCanvas._plotDimensions = this._plotDimensions, 
        this.legend._plotDimensions = this._plotDimensions, i = 0, l = _axisNames.length; l > i; i++) {
            for (name = _axisNames[i], axis = this.axes[name], t = axis._ticks, j = 0, tlen = t.length; tlen > j; j++) el = t[j]._elem, 
            el && ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement && window.G_vmlCanvasManager.uninitElement(el.get(0)), 
            el.emptyForce(), el = null, t._elem = null);
            t = null, delete axis.ticks, delete axis._ticks, this.axes[name] = new Axis(name), 
            this.axes[name]._plotWidth = this._width, this.axes[name]._plotHeight = this._height;
        }
        for (data && (options.dataRenderer && $.isFunction(options.dataRenderer) && (options.dataRendererOptions && (this.dataRendererOptions = options.dataRendererOptions), 
        this.dataRenderer = options.dataRenderer, data = this.dataRenderer(data, this, this.dataRendererOptions)), 
        this.data = $.extend(!0, [], data)), opts && this.parseOptions(options), this.title._plotWidth = this._width, 
        this.textColor && this.target.css("color", this.textColor), this.fontFamily && this.target.css("font-family", this.fontFamily), 
        this.fontSize && this.target.css("font-size", this.fontSize), this.title.init(), 
        this.legend.init(), this._sumy = 0, this._sumx = 0, this.seriesStack = [], this.previousSeriesStack = [], 
        this.computePlotData(), i = 0, seriesLen = this.series.length; seriesLen > i; i++) {
            for (this.seriesStack.push(i), this.previousSeriesStack.push(i), this.series[i].shadowCanvas._plotDimensions = this._plotDimensions, 
            this.series[i].canvas._plotDimensions = this._plotDimensions, j = 0, l = $.jqplot.preSeriesInitHooks.length; l > j; j++) $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (j = 0, l = this.preSeriesInitHooks.hooks.length; l > j; j++) this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (this.series[i]._plotDimensions = this._plotDimensions, this.series[i].init(i, this.grid.borderWidth, this), 
            j = 0, l = $.jqplot.postSeriesInitHooks.length; l > j; j++) $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            for (j = 0, l = this.postSeriesInitHooks.hooks.length; l > j; j++) this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);
            this._sumy += this.series[i]._sumy, this._sumx += this.series[i]._sumx;
        }
        for (i = 0, l = _axisNames.length; l > i; i++) name = _axisNames[i], axis = this.axes[name], 
        axis._plotDimensions = this._plotDimensions, axis.init(), null === axis.borderColor && ("x" !== name.charAt(0) && axis.useSeriesColor === !0 && axis.show ? axis.borderColor = axis._series[0].color : axis.borderColor = this.grid.borderColor);
        for (this.sortData && sortData(this.series), this.grid.init(), this.grid._axes = this.axes, 
        this.legend._series = this.series, i = 0, l = $.jqplot.postInitHooks.length; l > i; i++) $.jqplot.postInitHooks[i].call(this, target, this.data, options);
        for (i = 0, l = this.postInitHooks.hooks.length; l > i; i++) this.postInitHooks.hooks[i].call(this, target, this.data, options);
    }, JqPlot.prototype.quickInit = function() {
        var ax, name, i, j, l, t, el;
        if (this._height = this.target.height(), this._width = this.target.width(), this._height <= 0 || this._width <= 0 || !this._height || !this._width) throw new Error("Target dimension not set");
        this._plotDimensions.height = this._height, this._plotDimensions.width = this._width, 
        this.grid._plotDimensions = this._plotDimensions, this.title._plotDimensions = this._plotDimensions, 
        this.baseCanvas._plotDimensions = this._plotDimensions, this.eventCanvas._plotDimensions = this._plotDimensions, 
        this.legend._plotDimensions = this._plotDimensions;
        for (ax in this.axes) this.axes.hasOwnProperty(ax) && (this.axes[ax]._plotWidth = this._width, 
        this.axes[ax]._plotHeight = this._height);
        for (this.title._plotWidth = this._width, this.textColor && this.target.css("color", this.textColor), 
        this.fontFamily && this.target.css("font-family", this.fontFamily), this.fontSize && this.target.css("font-size", this.fontSize), 
        this._sumy = 0, this._sumx = 0, this.computePlotData(), i = 0, l = this.series.length; l > i; i++) "line" === this.series[i]._type && this.series[i].renderer.bands.show && this.series[i].renderer.initBands.call(this.series[i], this.series[i].renderer.options, this), 
        this.series[i]._plotDimensions = this._plotDimensions, this.series[i].canvas._plotDimensions = this._plotDimensions, 
        this._sumy += this.series[i]._sumy, this._sumx += this.series[i]._sumx;
        for (j = 0; 12 > j; j++) {
            for (name = _axisNames[j], t = this.axes[name]._ticks, i = 0, l = t.length; l > i; i++) el = t[i]._elem, 
            el && ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement && window.G_vmlCanvasManager.uninitElement(el.get(0)), 
            el.emptyForce(), el = null, t._elem = null);
            t = null, this.axes[name]._plotDimensions = this._plotDimensions, this.axes[name]._ticks = [];
        }
        this.sortData && sortData(this.series), this.grid._axes = this.axes, this.legend._series = this.series;
    }, JqPlot.prototype.computePlotData = function() {
        var series, index, i, l, j, sidx, k, cdl, temp, dtlen, cd = [], plotValues = {}, prevval = null;
        for (this._plotData = [], this._stackData = [], index = 0, l = this.series.length; l > index; index++) {
            if (series = this.series[index], this._plotData.push([]), this._stackData.push([]), 
            cd = series.data, this._plotData[index] = $.extend(!0, [], cd), this._stackData[index] = $.extend(!0, [], cd), 
            series._plotData = this._plotData[index], series._stackData = this._stackData[index], 
            plotValues = {
                x: [],
                y: []
            }, this.stackSeries && !series.disableStack) {
                for (series._stack = !0, sidx = "x" === series._stackAxis ? 0 : 1, k = 0, cdl = cd.length; cdl > k; k++) if (temp = cd[k][sidx], 
                null === temp && (temp = 0), this._plotData[index][k][sidx] = temp, this._stackData[index][k][sidx] = temp, 
                index > 0) for (j = index; j--; ) if (this._plotData[j][k] && (prevval = this._plotData[j][k][sidx]), 
                prevval && temp * prevval >= 0) {
                    this._plotData[index][k][sidx] += prevval, this._stackData[index][k][sidx] += prevval;
                    break;
                }
            } else {
                for (i = 0, dtlen = series.data.length; dtlen > i; i++) plotValues.x.push(series.data[i][0]), 
                plotValues.y.push(series.data[i][1]);
                this._stackData.push(series.data), this.series[index]._stackData = series.data, 
                this._plotData.push(series.data), series._plotData = series.data, series._plotValues = plotValues;
            }
            for (index > 0 && (series._prevPlotData = this.series[index - 1]._plotData), series._sumy = 0, 
            series._sumx = 0, i = series.data.length - 1; i > -1; i--) series._sumy += series.data[i][1], 
            series._sumx += series.data[i][0];
        }
    }, JqPlot.prototype.populatePlotData = function(series, index) {
        var sidx, temp, plotdata, tempx, tempy, dval, stackval, i, j, cd, l, k, plotValues = {
            x: [],
            y: []
        };
        if (this._plotData = [], this._stackData = [], series._stackData = [], series._plotData = [], 
        this.stackSeries && !series.disableStack) {
            for (series._stack = !0, sidx = "x" === series._stackAxis ? 0 : 1, temp = $.extend(!0, [], series.data), 
            plotdata = $.extend(!0, [], series.data), j = 0; index > j; j++) for (cd = this.series[j].data, 
            k = 0, l = cd.length; l > k; k++) dval = cd[k], tempx = null !== dval[0] ? dval[0] : 0, 
            tempy = null !== dval[1] ? dval[1] : 0, temp[k][0] += tempx, temp[k][1] += tempy, 
            stackval = sidx ? tempy : tempx, series.data[k][sidx] * stackval >= 0 && (plotdata[k][sidx] += stackval);
            for (i = 0, l = plotdata.length; l > i; i++) plotValues.x.push(plotdata[i][0]), 
            plotValues.y.push(plotdata[i][1]);
            this._plotData.push(plotdata), this._stackData.push(temp), series._stackData = temp, 
            series._plotData = plotdata, series._plotValues = plotValues;
        } else {
            for (i = 0, l = series.data.length; l > i; i++) plotValues.x.push(series.data[i][0]), 
            plotValues.y.push(series.data[i][1]);
            this._stackData.push(series.data), this.series[index]._stackData = series.data, 
            this._plotData.push(series.data), series._plotData = series.data, series._plotValues = plotValues;
        }
        for (index > 0 && (series._prevPlotData = this.series[index - 1]._plotData), series._sumy = 0, 
        series._sumx = 0, i = series.data.length - 1; i > -1; i--) series._sumy += series.data[i][1], 
        series._sumx += series.data[i][0];
    }, JqPlot.prototype.parseOptions = function(options) {
        var opts, tempi, n, axis, sopts, i = 0, j = 0, l = 0, dataLen = 0, temp = [ "series1", "series2", "color", "baseSeries", "fill" ], normalizeData = function(data, dir, start) {
            var i, l, temp = [];
            if (dir = dir || "vertical", $.isArray(data[0])) $.extend(!0, temp, data); else for (i = 0, 
            l = data.length; l > i; i++) "vertical" === dir ? temp.push([ start + i, data[i] ]) : temp.push([ data[i], start + i ]);
            return temp;
        }, dir = "vertical";
        for (i = 0, l = this.preParseOptionsHooks.hooks.length; l > i; i++) this.preParseOptionsHooks.hooks[i].call(this, options);
        for (i = 0, l = $.jqplot.preParseOptionsHooks.length; l > i; i++) $.jqplot.preParseOptionsHooks[i].call(this, options);
        if (this.options = $.extend(!0, {}, this.defaults, options), opts = this.options, 
        this.animate = opts.animate, this.animateReplot = opts.animateReplot, this.stackSeries = opts.stackSeries, 
        $.isPlainObject(opts.fillBetween)) for (i = 0, l = temp.length; l > i; i++) tempi = temp[i], 
        null !== opts.fillBetween[tempi] && (this.fillBetween[tempi] = opts.fillBetween[tempi]);
        for (opts.seriesColors && (this.seriesColors = opts.seriesColors), opts.negativeSeriesColors && (this.negativeSeriesColors = opts.negativeSeriesColors), 
        opts.captureRightClick && (this.captureRightClick = opts.captureRightClick), this.defaultAxisStart = options && "undefined" != typeof options.defaultAxisStart ? options.defaultAxisStart : this.defaultAxisStart, 
        this.colorGenerator.setColors(this.seriesColors), this.negativeColorGenerator.setColors(this.negativeSeriesColors), 
        $.extend(!0, this._gridPadding, opts.gridPadding), this.sortData = "undefined" != typeof opts.sortData ? opts.sortData : this.sortData, 
        i = 0; 12 > i; i++) n = _axisNames[i], axis = this.axes[n], axis._options = $.extend(!0, {}, opts.axesDefaults, opts.axes[n]), 
        $.extend(!0, axis, opts.axesDefaults, opts.axes[n]), axis._plotWidth = this._width, 
        axis._plotHeight = this._height;
        for (this.series = [], i = 0, dataLen = this.data.length; dataLen > i; i++) {
            for (sopts = $.extend(!0, {
                index: i
            }, {
                seriesColors: this.seriesColors,
                negativeSeriesColors: this.negativeSeriesColors
            }, this.options.seriesDefaults, this.options.series[i], {
                rendererOptions: {
                    animation: {
                        show: this.animate
                    }
                }
            }), temp = new Series(sopts), j = 0, l = $.jqplot.preParseSeriesOptionsHooks.length; l > j; j++) $.jqplot.preParseSeriesOptionsHooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);
            for (j = 0, l = this.preParseSeriesOptionsHooks.hooks.length; l > j; j++) this.preParseSeriesOptionsHooks.hooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);
            switch ($.extend(!0, temp, sopts), temp.renderer === $.jqplot.BarRenderer && temp.rendererOptions && "horizontal" === temp.rendererOptions.barDirection && (dir = "horizontal", 
            temp._stackAxis = "x", temp._primaryAxis = "_yaxis"), temp.data = normalizeData(this.data[i], dir, this.defaultAxisStart), 
            temp.xaxis) {
              case "xaxis":
                temp._xaxis = this.axes.xaxis;
                break;

              case "x2axis":
                temp._xaxis = this.axes.x2axis;
            }
            for (temp._yaxis = this.axes[temp.yaxis], temp._xaxis._series.push(temp), temp._yaxis._series.push(temp), 
            temp.show ? (temp._xaxis.show = !0, temp._yaxis.show = !0) : (temp._xaxis.scaleToHiddenSeries && (temp._xaxis.show = !0), 
            temp._yaxis.scaleToHiddenSeries && (temp._yaxis.show = !0)), temp.label || (temp.label = "Series " + (i + 1).toString()), 
            this.series.push(temp), j = 0, l = $.jqplot.postParseSeriesOptionsHooks.length; l > j; j++) $.jqplot.postParseSeriesOptionsHooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);
            for (j = 0, l = this.postParseSeriesOptionsHooks.hooks.length; l > j; j++) this.postParseSeriesOptionsHooks.hooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);
        }
        for ($.extend(!0, this.grid, this.options.grid), i = 0, l = _axisNames.length; l > i; i++) n = _axisNames[i], 
        axis = this.axes[n], null === axis.borderWidth && (axis.borderWidth = this.grid.borderWidth);
        for ("string" == typeof this.options.title ? this.title.text = this.options.title : "object" == typeof this.options.title && $.extend(!0, this.title, this.options.title), 
        this.title._plotWidth = this._width, this.legend.setOptions(this.options.legend), 
        i = 0, l = $.jqplot.postParseOptionsHooks.length; l > i; i++) $.jqplot.postParseOptionsHooks[i].call(this, options);
        for (i = 0, l = this.postParseOptionsHooks.hooks.length; l > i; i++) this.postParseOptionsHooks.hooks[i].call(this, options);
    }, JqPlot.prototype.destroy = function() {
        var e, events;
        this.canvasManager.freeAllCanvases(), this.eventCanvas && this.eventCanvas._elem && this.eventCanvas._elem.unbind(), 
        events = $._data(this.target[0], "events");
        for (e in events) events.hasOwnProperty(e) && this.target.unbind(e);
        this.target.empty(), this.target[0].innerHTML = "";
    }, JqPlot.prototype.replot = function(options) {
        var opts = options || {}, data = opts.data || null, clear = opts.clear === !1 ? !1 : !0, resetAxes = opts.resetAxes || !1;
        delete opts.data, delete opts.clear, delete opts.resetAxes, this.target.trigger("jqplotPreReplot"), 
        clear && this.destroy(), data || !$.isEmptyObject(opts) ? this.reInitialize(data, opts) : this.quickInit(), 
        resetAxes && this.resetAxesScale(resetAxes, opts.axes), this.draw(), this.target.trigger("jqplotPostReplot");
    }, JqPlot.prototype.redraw = function(clear) {
        var i, ax, tsl;
        clear = null !== clear ? clear : !0, this.target.trigger("jqplotPreRedraw"), clear && (this.canvasManager.freeAllCanvases(), 
        this.eventCanvas._elem.unbind(), this.target.empty());
        for (ax in this.axes) this.axes.hasOwnProperty(ax) && (this.axes[ax]._ticks = []);
        for (this.computePlotData(), this._sumy = 0, this._sumx = 0, i = 0, tsl = this.series.length; tsl > i; i++) this._sumy += this.series[i]._sumy, 
        this._sumx += this.series[i]._sumx;
        this.draw(), this.target.trigger("jqplotPostRedraw");
    }, JqPlot.prototype.draw = function() {
        var i, j, l, legendElem, gridPadding, ax, name, n, gdw, gdh, widthAdj, heightAdj, legendPadding, ltemp, series, seriesLength, fb, temps, tempr, sel, _els, title, ra = [ "y2axis", "y3axis", "y4axis", "y5axis", "y6axis", "y7axis", "y8axis", "y9axis" ], rapad = [ 0, 0, 0, 0, 0, 0, 0, 0 ], gpr = 0, positions = [ "top", "bottom", "left", "right" ];
        if (this.drawIfHidden || this.target.is(":visible")) {
            for (this.target.trigger("jqplotPreDraw"), i = 0, l = $.jqplot.preDrawHooks.length; l > i; i++) $.jqplot.preDrawHooks[i].call(this);
            for (i = 0, l = this.preDrawHooks.hooks.length; l > i; i++) this.preDrawHooks.hooks[i].apply(this, this.preDrawSeriesHooks.args[i]);
            if (this.target.append(this.baseCanvas.createElement({
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }, "jqplot-base-canvas", null, this)), this.baseCanvas.setContext(), this.options.background && (this.baseCanvas._ctx.fillStyle = this.options.background, 
            this.baseCanvas._ctx.fillRect(0, 0, this.baseCanvas._ctx.canvas.width, this.baseCanvas._ctx.canvas.height)), 
            title = this.title.draw(), this.target.append(title), this.title.pack({
                top: 0,
                left: 0
            }), legendElem = this.legend.draw({}, this), gridPadding = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            }, legendElem && "outsideGrid" === this.legend.placement) {
                switch (this.target.append(legendElem), this.legend.location) {
                  case "n":
                    gridPadding.top += this.legend.getHeight();
                    break;

                  case "s":
                    gridPadding.bottom += this.legend.getHeight();
                    break;

                  case "ne":
                  case "e":
                  case "se":
                    gridPadding.right += this.legend.getWidth();
                    break;

                  case "nw":
                  case "w":
                  case "sw":
                    gridPadding.left += this.legend.getWidth();
                    break;

                  default:
                    gridPadding.right += this.legend.getWidth();
                }
                legendElem = legendElem.detach();
            }
            for (ax = this.axes, i = 0; 12 > i; i++) name = _axisNames[i], this.target.append(ax[name].draw(this.baseCanvas._ctx, this)), 
            ax[name].set();
            for (ax.yaxis.show && (gridPadding.left += ax.yaxis.getWidth()), n = 0; 8 > n; n++) ax[ra[n]].show && (gpr += ax[ra[n]].getWidth(), 
            rapad[n] = gpr);
            for (gridPadding.right += gpr, ax.x2axis.show && (gridPadding.top += ax.x2axis.getHeight()), 
            this.title.show && (gridPadding.top += this.title.getHeight()), ax.xaxis.show && (gridPadding.bottom += ax.xaxis.getHeight()), 
            this.options.gridDimensions && $.isPlainObject(this.options.gridDimensions) && (gdw = parseInt(this.options.gridDimensions.width, 10) || 0, 
            gdh = parseInt(this.options.gridDimensions.height, 10) || 0, widthAdj = (this._width - gridPadding.left - gridPadding.right - gdw) / 2, 
            heightAdj = (this._height - gridPadding.top - gridPadding.bottom - gdh) / 2, heightAdj >= 0 && widthAdj >= 0 && (gridPadding.top += heightAdj, 
            gridPadding.bottom += heightAdj, gridPadding.left += widthAdj, gridPadding.right += widthAdj)), 
            i = 0, l = positions.length; l > i; i++) null === this._gridPadding[positions[i]] && gridPadding[positions[i]] > 0 ? this._gridPadding[positions[i]] = gridPadding[positions[i]] : null === this._gridPadding[positions[i]] && (this._gridPadding[positions[i]] = this._defaultGridPadding[positions[i]]);
            for (legendPadding = this._gridPadding, "outsideGrid" === this.legend.placement && (legendPadding = {
                top: this.title.getHeight(),
                left: 0,
                right: 0,
                bottom: 0
            }, "s" === this.legend.location && (legendPadding.left = this._gridPadding.left, 
            legendPadding.right = this._gridPadding.right)), ax.xaxis.pack({
                position: "absolute",
                bottom: this._gridPadding.bottom - ax.xaxis.getHeight(),
                left: 0,
                width: this._width
            }, {
                min: this._gridPadding.left,
                max: this._width - this._gridPadding.right
            }), ax.yaxis.pack({
                position: "absolute",
                top: 0,
                left: this._gridPadding.left - ax.yaxis.getWidth(),
                height: this._height
            }, {
                min: this._height - this._gridPadding.bottom,
                max: this._gridPadding.top
            }), ax.x2axis.pack({
                position: "absolute",
                top: this._gridPadding.top - ax.x2axis.getHeight(),
                left: 0,
                width: this._width
            }, {
                min: this._gridPadding.left,
                max: this._width - this._gridPadding.right
            }), i = 8; i > 0; i--) ax[ra[i - 1]].pack({
                position: "absolute",
                top: 0,
                right: this._gridPadding.right - rapad[i - 1]
            }, {
                min: this._height - this._gridPadding.bottom,
                max: this._gridPadding.top
            });
            for (ltemp = (this._width - this._gridPadding.left - this._gridPadding.right) / 2 + this._gridPadding.left - ax.yMidAxis.getWidth() / 2, 
            ax.yMidAxis.pack({
                position: "absolute",
                top: 0,
                left: ltemp,
                zIndex: 9,
                textAlign: "center"
            }, {
                min: this._height - this._gridPadding.bottom,
                max: this._gridPadding.top
            }), this.target.append(this.grid.createElement(this._gridPadding, this)), this.grid.draw(), 
            i = 0, l = $.jqplot.preDrawAllSeriesHooks.length; l > i; i++) $.jqplot.preDrawAllSeriesHooks[i].call(this);
            for (i = 0, l = this.preDrawAllSeriesHooks.hooks.length; l > i; i++) this.preDrawAllSeriesHooks.hooks[i].apply(this, this.preDrawAllSeriesHooks.args[i]);
            for (this.target.append(this.bellowSeriesCanvas.createElement(this._gridPadding, "jqplot-bellow-series-canvas", null, this)), 
            this.bellowSeriesCanvas.setContext(), this.bellowSeriesCanvas._ctx.fillStyle = "rgba(0, 0, 0 ,0)", 
            this.bellowSeriesCanvas._ctx.fillRect(0, 0, this.bellowSeriesCanvas._ctx.canvas.width, this.bellowSeriesCanvas._ctx.canvas.height), 
            series = this.series, seriesLength = series.length, i = 0; seriesLength > i; i++) j = this.seriesStack[i], 
            this.target.append(series[j].shadowCanvas.createElement(this._gridPadding, "jqplot-series-shadowCanvas", null, this)), 
            series[j].shadowCanvas.setContext(), series[j].shadowCanvas._elem.data("seriesIndex", j);
            for (i = 0; seriesLength > i; i++) j = this.seriesStack[i], this.target.append(series[j].canvas.createElement(this._gridPadding, "jqplot-series-canvas", null, this)), 
            series[j].canvas.setContext(), series[j].canvas._elem.data("seriesIndex", j);
            for (this.target.append(this.eventCanvas.createElement(this._gridPadding, "jqplot-event-canvas", null, this)), 
            this.eventCanvas.setContext(), this.eventCanvas._ctx.fillStyle = "rgba(0, 0, 0, 0)", 
            this.eventCanvas._ctx.fillRect(0, 0, this.eventCanvas._ctx.canvas.width, this.eventCanvas._ctx.canvas.height), 
            this.bindCustomEvents(), this.legend.preDraw ? (this.eventCanvas._elem.before(legendElem), 
            this.legend.pack(legendPadding), this.legend._elem ? this.drawSeries({
                legendInfo: {
                    location: this.legend.location,
                    placement: this.legend.placement,
                    width: this.legend.getWidth(),
                    height: this.legend.getHeight(),
                    xoffset: this.legend.xoffset,
                    yoffset: this.legend.yoffset
                }
            }) : this.drawSeries()) : (this.drawSeries(), seriesLength && $(series[seriesLength - 1].canvas._elem).after(legendElem), 
            this.legend.pack(legendPadding)), i = 0, l = $.jqplot.eventListenerHooks.length; l > i; i++) this.eventCanvas._elem.bind($.jqplot.eventListenerHooks[i][0], {
                plot: this
            }, $.jqplot.eventListenerHooks[i][1]);
            for (i = 0, l = this.eventListenerHooks.hooks.length; l > i; i++) this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[i][0], {
                plot: this
            }, this.eventListenerHooks.hooks[i][1]);
            for (fb = this.fillBetween, fb.fill && fb.series1 !== fb.series2 && fb.series1 < seriesLength && fb.series2 < seriesLength && "line" === series[fb.series1]._type && "line" === series[fb.series2]._type && this.doFillBetweenLines(), 
            i = 0, l = $.jqplot.postDrawHooks.length; l > i; i++) $.jqplot.postDrawHooks[i].call(this);
            for (i = 0, l = this.postDrawHooks.hooks.length; l > i; i++) this.postDrawHooks.hooks[i].apply(this, this.postDrawHooks.args[i]);
            for (this.target.is(":visible") && (this._drawCount += 1), i = 0; seriesLength > i; i++) temps = series[i], 
            tempr = temps.renderer, sel = ".jqplot-point-label.jqplot-series-" + i, tempr.animation && tempr.animation._supported && tempr.animation.show && (this._drawCount < 2 || this.animateReplot) && (_els = this.target.find(sel), 
            _els.stop(!0, !0).hide(), temps.canvas._elem.stop(!0, !0).hide(), temps.shadowCanvas._elem.stop(!0, !0).hide(), 
            temps.canvas._elem.jqplotEffect("blind", {
                mode: "show",
                direction: tempr.animation.direction
            }, tempr.animation.speed), temps.shadowCanvas._elem.jqplotEffect("blind", {
                mode: "show",
                direction: tempr.animation.direction
            }, tempr.animation.speed), _els.fadeIn(.8 * tempr.animation.speed));
            _els = null, this.target.trigger("jqplotPostDraw", [ this ]);
        }
    }, JqPlot.prototype.doFillBetweenLines = function() {
        var tempgd, gd, color, baseSeries, sr, opts, fb = this.fillBetween, sid1 = fb.series1, sid2 = fb.series2, id1 = sid2 > sid1 ? sid1 : sid2, id2 = sid2 > sid1 ? sid2 : sid1, series1 = this.series[id1], series2 = this.series[id2];
        tempgd = series2.renderer.smooth ? series2.renderer._smoothedData.slice(0).reverse() : series2.gridData.slice(0).reverse(), 
        gd = series1.renderer.smooth ? series1.renderer._smoothedData.concat(tempgd) : series1.gridData.concat(tempgd), 
        color = null !== fb.color ? fb.color : this.series[sid1].fillColor, baseSeries = null !== fb.baseSeries ? fb.baseSeries : id1, 
        sr = this.series[baseSeries].renderer.shapeRenderer, opts = {
            fillStyle: color,
            fill: !0,
            closePath: !0
        }, sr.draw(series1.shadowCanvas._ctx, gd, opts);
    }, JqPlot.prototype.activateTheme = function(name) {
        this.themeEngine.activate(this, name);
    }, JqPlot.prototype.restoreOriginalSeriesOrder = function() {
        var i, l, serelem, shadelem, arr = [];
        for (i = 0, l = this.series.length; l > i; i++) arr.push(i);
        if (this.seriesStack !== arr) for (this.previousSeriesStack = this.seriesStack.slice(0), 
        this.seriesStack = arr, i = 1; i < this.seriesStack.length; i++) serelem = this.series[i].canvas._elem.detach(), 
        shadelem = this.series[i].shadowCanvas._elem.detach(), this.series[i - 1].shadowCanvas._elem.after(shadelem), 
        this.series[i - 1].canvas._elem.after(serelem);
    }, JqPlot.prototype.restorePreviousSeriesOrder = function() {
        var i, l, serelem, shadelem, temp, move, keep;
        if (this.seriesStack !== this.previousSeriesStack) {
            for (i = 1, l = this.previousSeriesStack.length; l > i; i++) move = this.previousSeriesStack[i], 
            keep = this.previousSeriesStack[i - 1], serelem = this.series[move].canvas._elem.detach(), 
            shadelem = this.series[move].shadowCanvas._elem.detach(), this.series[keep].shadowCanvas._elem.after(shadelem), 
            this.series[keep].canvas._elem.after(serelem);
            temp = this.seriesStack.slice(0), this.seriesStack = this.previousSeriesStack.slice(0), 
            this.previousSeriesStack = temp;
        }
    }, JqPlot.prototype.moveSeriesToBack = function(idx) {
        idx = parseInt(idx, 10);
        var opidx, serelem, shadelem, stackIndex = $.inArray(idx, this.seriesStack);
        0 !== stackIndex && -1 !== stackIndex && (opidx = this.seriesStack[0], serelem = this.series[idx].canvas._elem.detach(), 
        shadelem = this.series[idx].shadowCanvas._elem.detach(), this.series[opidx].shadowCanvas._elem.before(shadelem), 
        this.series[opidx].canvas._elem.before(serelem), this.previousSeriesStack = this.seriesStack.slice(0), 
        this.seriesStack.splice(stackIndex, 1), this.seriesStack.unshift(idx));
    }, JqPlot.prototype.moveSeriesToFront = function(idx) {
        var stackIndex, opidx, serelem, shadelem;
        if (idx = parseInt(idx, 10), stackIndex = $.inArray(idx, this.seriesStack), -1 !== stackIndex) {
            if (stackIndex === this.seriesStack.length - 1) return void (this.previousSeriesStack = this.seriesStack.slice(0));
            opidx = this.seriesStack[this.seriesStack.length - 1], serelem = this.series[idx].canvas._elem.detach(), 
            shadelem = this.series[idx].shadowCanvas._elem.detach(), this.series[opidx].shadowCanvas._elem.after(shadelem), 
            this.series[opidx].canvas._elem.after(serelem), this.previousSeriesStack = this.seriesStack.slice(0), 
            this.seriesStack.splice(stackIndex, 1), this.seriesStack.push(idx);
        }
    }, JqPlot.prototype.drawSeries = function(options, idx) {
        var i, l, series, ctx;
        if (idx = "number" == typeof options && null === idx ? options : idx, options = "object" == typeof options ? options : {}, 
        "undefined" != typeof idx) series = this.series[idx], ctx = series.shadowCanvas._ctx, 
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), series.drawShadow(ctx, options, this), 
        ctx = series.canvas._ctx, ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), 
        series.draw(ctx, options, this), series.renderer.constructor === $.jqplot.BezierCurveRenderer && idx < this.series.length - 1 && this.drawSeries(idx + 1); else for (i = 0; i < this.series.length; i++) series = this.series[i], 
        ctx = series.shadowCanvas._ctx, ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), 
        series.drawShadow(ctx, options, this), ctx = series.canvas._ctx, ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), 
        series.draw(ctx, options, this);
        options = idx = i = series = ctx = l = null;
    }, JqPlot.prototype.onMouseLeave = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, evt = $.Event("jqplotMouseLeave");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, evt.relatedTarget = ev.relatedTarget, 
        $(this).trigger(evt, [ positions.gridPos, positions.dataPos, null, p ]);
    }, JqPlot.prototype.onClick = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, neighbor = checkIntersection(positions.gridPos, p), evt = $.Event("jqplotClick");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ]);
    }, JqPlot.prototype.onDblClick = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, neighbor = checkIntersection(positions.gridPos, p), evt = $.Event("jqplotDblClick");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ]);
    }, JqPlot.prototype.onMouseDown = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, neighbor = checkIntersection(positions.gridPos, p), evt = $.Event("jqplotMouseDown");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ]);
    }, JqPlot.prototype.onMouseUp = function(ev) {
        var positions = getEventPosition(ev), evt = $.Event("jqplotMouseUp");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, null, ev.data.plot ]);
    }, JqPlot.prototype.onRightClick = function(ev) {
        var evt, positions = getEventPosition(ev), p = ev.data.plot, neighbor = checkIntersection(positions.gridPos, p);
        p.captureRightClick && (3 === ev.which ? (evt = $.Event("jqplotRightClick"), evt.pageX = ev.pageX, 
        evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ])) : (evt = $.Event("jqplotMouseUp"), 
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ])));
    }, JqPlot.prototype.onMouseMove = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, neighbor = checkIntersection(positions.gridPos, p), evt = $.Event("jqplotMouseMove");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, $(this).trigger(evt, [ positions.gridPos, positions.dataPos, neighbor, p ]);
    }, JqPlot.prototype.onMouseEnter = function(ev) {
        var positions = getEventPosition(ev), p = ev.data.plot, evt = $.Event("jqplotMouseEnter");
        evt.pageX = ev.pageX, evt.pageY = ev.pageY, evt.relatedTarget = ev.relatedTarget, 
        $(this).trigger(evt, [ positions.gridPos, positions.dataPos, null, p ]);
    }, JqPlot.prototype.bindCustomEvents = function() {
        this.eventCanvas._elem.bind("click", {
            plot: this
        }, this.onClick), this.eventCanvas._elem.bind("dblclick", {
            plot: this
        }, this.onDblClick), this.eventCanvas._elem.bind("mousedown", {
            plot: this
        }, this.onMouseDown), this.eventCanvas._elem.bind("mousemove", {
            plot: this
        }, this.onMouseMove), this.eventCanvas._elem.bind("mouseenter", {
            plot: this
        }, this.onMouseEnter), this.eventCanvas._elem.bind("mouseleave", {
            plot: this
        }, this.onMouseLeave), this.captureRightClick ? (this.eventCanvas._elem.bind("mouseup", {
            plot: this
        }, this.onRightClick), this.eventCanvas._elem.get(0).oncontextmenu = function() {
            return !1;
        }) : this.eventCanvas._elem.bind("mouseup", {
            plot: this
        }, this.onMouseUp);
    }, $.jqplot.computeHighlightColors = function(colors) {
        var ret, i, rgba, newrgb, sum, j, l;
        if ($.isArray(colors)) for (ret = [], i = 0, l = colors.length; l > i; i++) {
            for (rgba = $.jqplot.getColorComponents(colors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], 
            sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 660 ? .85 * newrgb[j] : .73 * newrgb[j] + 90, 
            newrgb[j] = parseInt(newrgb[j], 10), newrgb[j] = newrgb[j] > 255 ? 255 : newrgb[j];
            newrgb[3] = .3 + .35 * rgba[3], ret.push("rgba(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + "," + newrgb[3] + ")");
        } else {
            for (rgba = $.jqplot.getColorComponents(colors), newrgb = [ rgba[0], rgba[1], rgba[2] ], 
            sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 660 ? .85 * newrgb[j] : .73 * newrgb[j] + 90, 
            newrgb[j] = parseInt(newrgb[j], 10), newrgb[j] = newrgb[j] > 255 ? 255 : newrgb[j];
            newrgb[3] = .3 + .35 * rgba[3], ret = "rgba(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + "," + newrgb[3] + ")";
        }
        return ret;
    }, $.jqplot.ColorGenerator = function(colors) {
        colors = colors || $.jqplot.config.defaultColors;
        var idx = 0;
        this.next = function() {
            return idx < colors.length ? colors[idx++] : (idx = 0, colors[idx++]);
        }, this.previous = function() {
            return idx > 0 ? colors[idx--] : (idx = colors.length - 1, colors[idx]);
        }, this.get = function(i) {
            var idx = i - colors.length * Math.floor(i / colors.length);
            return colors[idx];
        }, this.setColors = function(c) {
            colors = c;
        }, this.reset = function() {
            idx = 0;
        }, this.getIndex = function() {
            return idx;
        }, this.setIndex = function(index) {
            idx = index;
        };
    }, $.jqplot.hex2rgb = function(h, a) {
        var rgb;
        return h = h.replace("#", ""), 3 === h.length && (h = h.charAt(0) + h.charAt(0) + h.charAt(1) + h.charAt(1) + h.charAt(2) + h.charAt(2)), 
        rgb = "rgba(" + parseInt(h.slice(0, 2), 16) + ", " + parseInt(h.slice(2, 4), 16) + ", " + parseInt(h.slice(4, 6), 16), 
        a && (rgb += ", " + a), rgb += ")";
    }, $.jqplot.rgb2hex = function(s) {
        var i, temp, pat = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *(?:, *[0-9.]*)?\)/, m = s.match(pat), h = "#";
        for (i = 1; 4 > i; i++) -1 !== m[i].search(/%/) ? (temp = parseInt(255 * m[i] / 100, 10).toString(16), 
        1 === temp.length && (temp = "0" + temp)) : (temp = parseInt(m[i], 10).toString(16), 
        1 === temp.length && (temp = "0" + temp)), h += temp;
        return h;
    }, $.jqplot.normalize2rgb = function(s, a) {
        if (-1 !== s.search(/^ *rgba?\(/)) return s;
        if (-1 !== s.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/)) return $.jqplot.hex2rgb(s, a);
        throw new Error("Invalid color spec");
    }, $.jqplot.getColorComponents = function(s) {
        s = $.jqplot.colorKeywordMap[s] || s;
        var i, rgb = $.jqplot.normalize2rgb(s), pat = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *,? *([0-9.]* *)?\)/, m = rgb.match(pat), ret = [];
        for (i = 1; 4 > i; i++) -1 !== m[i].search(/%/) ? ret[i - 1] = parseInt(255 * m[i] / 100, 10) : ret[i - 1] = parseInt(m[i], 10);
        return ret[3] = parseFloat(m[4]) || 1, ret;
    }, $.jqplot.isDarkColor = function(color) {
        var L = 0, rgba = this.getColorRGB(color);
        return color = null !== rgba ? rgba : $.jqplot.getColorComponents(color), null !== color && (L = .3 * (color[0] / 255) + .59 * (color[1] / 255) + .11 * (color[2] / 255)), 
        .45 > L;
    }, $.jqplot.getColorRGB = function(color) {
        var red, green, blue, rgbString, rgb, strLen = color.length;
        return strLen && -1 !== color.lastIndexOf("rgb") ? (color = color.replace("rgba", ""), 
        color = color.replace("rgb", ""), color = color.replace("\\(", ""), color = color.replace("\\)", ""), 
        color = color.replace(" ", ""), rgbString = color.split(","), red = parseInt(rgbString[0], 10), 
        green = parseInt(rgbString[1], 10), blue = parseInt(rgbString[2], 10), rgb = [ red, green, blue ]) : strLen && 0 === color.indexOf("#") ? (4 === strLen ? (red = color.substr(1, 1), 
        green = color.substr(2, 1), blue = color.substr(3, 1)) : (red = color.substr(1, 2), 
        green = color.substr(3, 2), blue = color.substr(5, 2)), red = parseInt(red, 16), 
        green = parseInt(green, 16), blue = parseInt(blue, 16), rgb = [ red, green, blue ]) : null;
    }, $.jqplot.colorKeywordMap = {
        aliceblue: "rgb(240, 248, 255)",
        antiquewhite: "rgb(250, 235, 215)",
        aqua: "rgb( 0, 255, 255)",
        aquamarine: "rgb(127, 255, 212)",
        azure: "rgb(240, 255, 255)",
        beige: "rgb(245, 245, 220)",
        bisque: "rgb(255, 228, 196)",
        black: "rgb( 0, 0, 0)",
        blanchedalmond: "rgb(255, 235, 205)",
        blue: "rgb( 0, 0, 255)",
        blueviolet: "rgb(138, 43, 226)",
        brown: "rgb(165, 42, 42)",
        burlywood: "rgb(222, 184, 135)",
        cadetblue: "rgb( 95, 158, 160)",
        chartreuse: "rgb(127, 255, 0)",
        chocolate: "rgb(210, 105, 30)",
        coral: "rgb(255, 127, 80)",
        cornflowerblue: "rgb(100, 149, 237)",
        cornsilk: "rgb(255, 248, 220)",
        crimson: "rgb(220, 20, 60)",
        cyan: "rgb( 0, 255, 255)",
        darkblue: "rgb( 0, 0, 139)",
        darkcyan: "rgb( 0, 139, 139)",
        darkgoldenrod: "rgb(184, 134, 11)",
        darkgray: "rgb(169, 169, 169)",
        darkgreen: "rgb( 0, 100, 0)",
        darkgrey: "rgb(169, 169, 169)",
        darkkhaki: "rgb(189, 183, 107)",
        darkmagenta: "rgb(139, 0, 139)",
        darkolivegreen: "rgb( 85, 107, 47)",
        darkorange: "rgb(255, 140, 0)",
        darkorchid: "rgb(153, 50, 204)",
        darkred: "rgb(139, 0, 0)",
        darksalmon: "rgb(233, 150, 122)",
        darkseagreen: "rgb(143, 188, 143)",
        darkslateblue: "rgb( 72, 61, 139)",
        darkslategray: "rgb( 47, 79, 79)",
        darkslategrey: "rgb( 47, 79, 79)",
        darkturquoise: "rgb( 0, 206, 209)",
        darkviolet: "rgb(148, 0, 211)",
        deeppink: "rgb(255, 20, 147)",
        deepskyblue: "rgb( 0, 191, 255)",
        dimgray: "rgb(105, 105, 105)",
        dimgrey: "rgb(105, 105, 105)",
        dodgerblue: "rgb( 30, 144, 255)",
        firebrick: "rgb(178, 34, 34)",
        floralwhite: "rgb(255, 250, 240)",
        forestgreen: "rgb( 34, 139, 34)",
        fuchsia: "rgb(255, 0, 255)",
        gainsboro: "rgb(220, 220, 220)",
        ghostwhite: "rgb(248, 248, 255)",
        gold: "rgb(255, 215, 0)",
        goldenrod: "rgb(218, 165, 32)",
        gray: "rgb(128, 128, 128)",
        grey: "rgb(128, 128, 128)",
        green: "rgb( 0, 128, 0)",
        greenyellow: "rgb(173, 255, 47)",
        honeydew: "rgb(240, 255, 240)",
        hotpink: "rgb(255, 105, 180)",
        indianred: "rgb(205, 92, 92)",
        indigo: "rgb( 75, 0, 130)",
        ivory: "rgb(255, 255, 240)",
        khaki: "rgb(240, 230, 140)",
        lavender: "rgb(230, 230, 250)",
        lavenderblush: "rgb(255, 240, 245)",
        lawngreen: "rgb(124, 252, 0)",
        lemonchiffon: "rgb(255, 250, 205)",
        lightblue: "rgb(173, 216, 230)",
        lightcoral: "rgb(240, 128, 128)",
        lightcyan: "rgb(224, 255, 255)",
        lightgoldenrodyellow: "rgb(250, 250, 210)",
        lightgray: "rgb(211, 211, 211)",
        lightgreen: "rgb(144, 238, 144)",
        lightgrey: "rgb(211, 211, 211)",
        lightpink: "rgb(255, 182, 193)",
        lightsalmon: "rgb(255, 160, 122)",
        lightseagreen: "rgb( 32, 178, 170)",
        lightskyblue: "rgb(135, 206, 250)",
        lightslategray: "rgb(119, 136, 153)",
        lightslategrey: "rgb(119, 136, 153)",
        lightsteelblue: "rgb(176, 196, 222)",
        lightyellow: "rgb(255, 255, 224)",
        lime: "rgb( 0, 255, 0)",
        limegreen: "rgb( 50, 205, 50)",
        linen: "rgb(250, 240, 230)",
        magenta: "rgb(255, 0, 255)",
        maroon: "rgb(128, 0, 0)",
        mediumaquamarine: "rgb(102, 205, 170)",
        mediumblue: "rgb( 0, 0, 205)",
        mediumorchid: "rgb(186, 85, 211)",
        mediumpurple: "rgb(147, 112, 219)",
        mediumseagreen: "rgb( 60, 179, 113)",
        mediumslateblue: "rgb(123, 104, 238)",
        mediumspringgreen: "rgb( 0, 250, 154)",
        mediumturquoise: "rgb( 72, 209, 204)",
        mediumvioletred: "rgb(199, 21, 133)",
        midnightblue: "rgb( 25, 25, 112)",
        mintcream: "rgb(245, 255, 250)",
        mistyrose: "rgb(255, 228, 225)",
        moccasin: "rgb(255, 228, 181)",
        navajowhite: "rgb(255, 222, 173)",
        navy: "rgb( 0, 0, 128)",
        oldlace: "rgb(253, 245, 230)",
        olive: "rgb(128, 128, 0)",
        olivedrab: "rgb(107, 142, 35)",
        orange: "rgb(255, 165, 0)",
        orangered: "rgb(255, 69, 0)",
        orchid: "rgb(218, 112, 214)",
        palegoldenrod: "rgb(238, 232, 170)",
        palegreen: "rgb(152, 251, 152)",
        paleturquoise: "rgb(175, 238, 238)",
        palevioletred: "rgb(219, 112, 147)",
        papayawhip: "rgb(255, 239, 213)",
        peachpuff: "rgb(255, 218, 185)",
        peru: "rgb(205, 133, 63)",
        pink: "rgb(255, 192, 203)",
        plum: "rgb(221, 160, 221)",
        powderblue: "rgb(176, 224, 230)",
        purple: "rgb(128, 0, 128)",
        red: "rgb(255, 0, 0)",
        rosybrown: "rgb(188, 143, 143)",
        royalblue: "rgb( 65, 105, 225)",
        saddlebrown: "rgb(139, 69, 19)",
        salmon: "rgb(250, 128, 114)",
        sandybrown: "rgb(244, 164, 96)",
        seagreen: "rgb( 46, 139, 87)",
        seashell: "rgb(255, 245, 238)",
        sienna: "rgb(160, 82, 45)",
        silver: "rgb(192, 192, 192)",
        skyblue: "rgb(135, 206, 235)",
        slateblue: "rgb(106, 90, 205)",
        slategray: "rgb(112, 128, 144)",
        slategrey: "rgb(112, 128, 144)",
        snow: "rgb(255, 250, 250)",
        springgreen: "rgb( 0, 255, 127)",
        steelblue: "rgb( 70, 130, 180)",
        tan: "rgb(210, 180, 140)",
        teal: "rgb( 0, 128, 128)",
        thistle: "rgb(216, 191, 216)",
        tomato: "rgb(255, 99, 71)",
        turquoise: "rgb( 64, 224, 208)",
        violet: "rgb(238, 130, 238)",
        wheat: "rgb(245, 222, 179)",
        white: "rgb(255, 255, 255)",
        whitesmoke: "rgb(245, 245, 245)",
        yellow: "rgb(255, 255, 0)",
        yellowgreen: "rgb(154, 205, 50)"
    };
}(jQuery);
//# sourceMappingURL=jqplot.core.min.js.map