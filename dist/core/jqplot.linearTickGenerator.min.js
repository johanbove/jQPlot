!function($) {
    function bestFormatString(interval) {
        var fstr;
        if (interval = Math.abs(interval), interval >= 10) fstr = "%d"; else if (interval > 1) fstr = interval === parseInt(interval, 10) ? "%d" : "%.1f"; else {
            var expv = -Math.floor(Math.log(interval) / Math.LN10);
            fstr = "%." + expv + "f";
        }
        return fstr;
    }
    function bestConstrainedInterval(min, max, nttarget) {
        for (var temp, sd, bestNT, fsd, fs, currentNT, bestPrec, low = Math.floor(nttarget / 2), hi = Math.ceil(1.5 * nttarget), badness = Number.MAX_VALUE, r = max - min, gsf = $.jqplot.getSignificantFigures, i = 0, l = hi - low + 1; l > i; i++) currentNT = low + i, 
        temp = r / (currentNT - 1), sd = gsf(temp), temp = Math.abs(nttarget - currentNT) + sd.digitsRight, 
        badness > temp ? (badness = temp, bestNT = currentNT, bestPrec = sd.digitsRight) : temp === badness && sd.digitsRight < bestPrec && (bestNT = currentNT, 
        bestPrec = sd.digitsRight);
        return fsd = Math.max(bestPrec, Math.max(gsf(min).digitsRight, gsf(max).digitsRight)), 
        fs = 0 === fsd ? "%d" : "%." + fsd + "f", temp = r / (bestNT - 1), [ min, max, bestNT, fs, temp ];
    }
    function bestInterval(range, numberTicks) {
        numberTicks = numberTicks || 7;
        var interval, minimum = range / (numberTicks - 1), magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.LN10)), residual = minimum / magnitude;
        return interval = 1 > magnitude ? residual > 5 ? 10 * magnitude : residual > 2 ? 5 * magnitude : residual > 1 ? 2 * magnitude : magnitude : residual > 5 ? 10 * magnitude : residual > 4 ? 5 * magnitude : residual > 3 ? 4 * magnitude : residual > 2 ? 3 * magnitude : residual > 1 ? 2 * magnitude : magnitude;
    }
    function bestLinearInterval(range, scalefact) {
        scalefact = scalefact || 1;
        var fact, expv = Math.floor(Math.log(range) / Math.LN10), magnitude = Math.pow(10, expv), f = range / magnitude;
        return f /= scalefact, fact = .38 >= f ? .1 : 1.6 >= f ? .2 : 4 >= f ? .5 : 8 >= f ? 1 : 16 >= f ? 2 : 5, 
        fact * magnitude;
    }
    function bestLinearComponents(range, scalefact) {
        var interval, fact, expv = Math.floor(Math.log(range) / Math.LN10), magnitude = Math.pow(10, expv), f = range / magnitude;
        return f /= scalefact, fact = .38 >= f ? .1 : 1.6 >= f ? .2 : 4 >= f ? .5 : 8 >= f ? 1 : 16 >= f ? 2 : 5, 
        interval = fact * magnitude, [ interval, fact, magnitude ];
    }
    $.jqplot.LinearTickGenerator = function(axis_min, axis_max, scalefact, numberTicks, keepMin, keepMax) {
        if (keepMin = null === keepMin ? !1 : keepMin, keepMax = null === keepMax || keepMin ? !1 : keepMax, 
        axis_min === axis_max && (axis_max = axis_max ? 0 : 1), scalefact = scalefact || 1, 
        axis_min > axis_max) {
            var a = axis_max;
            axis_max = axis_min, axis_min = a;
        }
        var r = [], ss = bestLinearInterval(axis_max - axis_min, scalefact), gsf = $.jqplot.getSignificantFigures;
        if (null == numberTicks) if (keepMin || keepMax) {
            if (keepMin) {
                r[0] = axis_min, r[2] = Math.ceil((axis_max - axis_min) / ss + 1), r[1] = axis_min + (r[2] - 1) * ss;
                var digitsMin = gsf(axis_min).digitsRight, digitsSS = gsf(ss).digitsRight;
                digitsSS > digitsMin ? r[3] = bestFormatString(ss) : r[3] = "%." + digitsMin + "f", 
                r[4] = ss;
            } else if (keepMax) {
                r[1] = axis_max, r[2] = Math.ceil((axis_max - axis_min) / ss + 1), r[0] = axis_max - (r[2] - 1) * ss;
                var digitsMax = gsf(axis_max).digitsRight, digitsSS = gsf(ss).digitsRight;
                digitsSS > digitsMax ? r[3] = bestFormatString(ss) : r[3] = "%." + digitsMax + "f", 
                r[4] = ss;
            }
        } else r[0] = Math.floor(axis_min / ss) * ss, r[1] = Math.ceil(axis_max / ss) * ss, 
        r[2] = Math.round((r[1] - r[0]) / ss + 1), r[3] = bestFormatString(ss), r[4] = ss; else {
            var tempr = [];
            if (tempr[0] = Math.floor(axis_min / ss) * ss, tempr[1] = Math.ceil(axis_max / ss) * ss, 
            tempr[2] = Math.round((tempr[1] - tempr[0]) / ss + 1), tempr[3] = bestFormatString(ss), 
            tempr[4] = ss, tempr[2] === numberTicks) r = tempr; else {
                var newti = bestInterval(tempr[1] - tempr[0], numberTicks);
                r[0] = tempr[0], r[2] = numberTicks, r[4] = newti, r[3] = bestFormatString(newti), 
                r[1] = r[0] + (r[2] - 1) * r[4];
            }
        }
        return r;
    }, $.jqplot.LinearTickGenerator.bestLinearInterval = bestLinearInterval, $.jqplot.LinearTickGenerator.bestInterval = bestInterval, 
    $.jqplot.LinearTickGenerator.bestLinearComponents = bestLinearComponents, $.jqplot.LinearTickGenerator.bestConstrainedInterval = bestConstrainedInterval;
}(jQuery);
//# sourceMappingURL=jqplot.linearTickGenerator.min.js.map