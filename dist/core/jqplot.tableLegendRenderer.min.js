!function($) {
    $.jqplot.TableLegendRenderer = function() {}, $.jqplot.TableLegendRenderer.prototype.init = function(options) {
        $.extend(!0, this, options);
    }, $.jqplot.TableLegendRenderer.prototype.addrow = function(label, color, pad, reverse) {
        var tr, td, elem, div0, div1, rs = pad ? this.rowSpacing + "px" : "0px";
        elem = document.createElement("tr"), tr = $(elem), tr.addClass("jqplot-table-legend"), 
        elem = null, reverse ? tr.prependTo(this._elem) : tr.appendTo(this._elem), this.showSwatches && (td = $(document.createElement("td")), 
        td.addClass("jqplot-table-legend jqplot-table-legend-swatch"), td.css({
            textAlign: "center",
            paddingTop: rs
        }), div0 = $(document.createElement("div")), div0.addClass("jqplot-table-legend-swatch-outline"), 
        div1 = $(document.createElement("div")), div1.addClass("jqplot-table-legend-swatch"), 
        div1.css({
            backgroundColor: color,
            borderColor: color
        }), tr.append(td.append(div0.append(div1)))), this.showLabels && (td = $(document.createElement("td")), 
        td.addClass("jqplot-table-legend jqplot-table-legend-label"), td.css("paddingTop", rs), 
        tr.append(td), this.escapeHtml ? td.text(label) : td.html(label)), td = null, div0 = null, 
        div1 = null, tr = null, elem = null;
    }, $.jqplot.TableLegendRenderer.prototype.draw = function() {
        if (this._elem && (this._elem.emptyForce(), this._elem = null), this.show) {
            var series = this._series, elem = document.createElement("table");
            this._elem = $(elem), this._elem.addClass("jqplot-table-legend");
            var ss = {
                position: "absolute"
            };
            this.background && (ss.background = this.background), this.border && (ss.border = this.border), 
            this.fontSize && (ss.fontSize = this.fontSize), this.fontFamily && (ss.fontFamily = this.fontFamily), 
            this.textColor && (ss.textColor = this.textColor), null != this.marginTop && (ss.marginTop = this.marginTop), 
            null != this.marginBottom && (ss.marginBottom = this.marginBottom), null != this.marginLeft && (ss.marginLeft = this.marginLeft), 
            null != this.marginRight && (ss.marginRight = this.marginRight);
            for (var s, pad = !1, reverse = !1, i = 0; i < series.length; i++) if (s = series[i], 
            (s._stack || s.renderer.constructor == $.jqplot.BezierCurveRenderer) && (reverse = !0), 
            s.show && s.showLabel) {
                var lt = this.labels[i] || s.label.toString();
                if (lt) {
                    var color = s.color;
                    reverse && i < series.length - 1 ? pad = !0 : reverse && i == series.length - 1 && (pad = !1), 
                    this.renderer.addrow.call(this, lt, color, pad, reverse), pad = !0;
                }
                for (var j = 0; j < $.jqplot.addLegendRowHooks.length; j++) {
                    var item = $.jqplot.addLegendRowHooks[j].call(this, s);
                    item && (this.renderer.addrow.call(this, item.label, item.color, pad), pad = !0);
                }
                lt = null;
            }
        }
        return this._elem;
    }, $.jqplot.TableLegendRenderer.prototype.pack = function(offsets) {
        if (this.show) if ("insideGrid" == this.placement) switch (this.location) {
          case "nw":
            var a = offsets.left, b = offsets.top;
            this._elem.css("left", a), this._elem.css("top", b);
            break;

          case "n":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2, b = offsets.top;
            this._elem.css("left", a), this._elem.css("top", b);
            break;

          case "ne":
            var a = offsets.right, b = offsets.top;
            this._elem.css({
                right: a,
                top: b
            });
            break;

          case "e":
            var a = offsets.right, b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                right: a,
                top: b
            });
            break;

          case "se":
            var a = offsets.right, b = offsets.bottom;
            this._elem.css({
                right: a,
                bottom: b
            });
            break;

          case "s":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2, b = offsets.bottom;
            this._elem.css({
                left: a,
                bottom: b
            });
            break;

          case "sw":
            var a = offsets.left, b = offsets.bottom;
            this._elem.css({
                left: a,
                bottom: b
            });
            break;

          case "w":
            var a = offsets.left, b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                left: a,
                top: b
            });
            break;

          default:
            var a = offsets.right, b = offsets.bottom;
            this._elem.css({
                right: a,
                bottom: b
            });
        } else if ("outside" == this.placement) switch (this.location) {
          case "nw":
            var a = this._plotDimensions.width - offsets.left, b = offsets.top;
            this._elem.css("right", a), this._elem.css("top", b);
            break;

          case "n":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2, b = this._plotDimensions.height - offsets.top;
            this._elem.css("left", a), this._elem.css("bottom", b);
            break;

          case "ne":
            var a = this._plotDimensions.width - offsets.right, b = offsets.top;
            this._elem.css({
                left: a,
                top: b
            });
            break;

          case "e":
            var a = this._plotDimensions.width - offsets.right, b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                left: a,
                top: b
            });
            break;

          case "se":
            var a = this._plotDimensions.width - offsets.right, b = offsets.bottom;
            this._elem.css({
                left: a,
                bottom: b
            });
            break;

          case "s":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2, b = this._plotDimensions.height - offsets.bottom;
            this._elem.css({
                left: a,
                top: b
            });
            break;

          case "sw":
            var a = this._plotDimensions.width - offsets.left, b = offsets.bottom;
            this._elem.css({
                right: a,
                bottom: b
            });
            break;

          case "w":
            var a = this._plotDimensions.width - offsets.left, b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                right: a,
                top: b
            });
            break;

          default:
            var a = offsets.right, b = offsets.bottom;
            this._elem.css({
                right: a,
                bottom: b
            });
        } else switch (this.location) {
          case "nw":
            this._elem.css({
                left: 0,
                top: offsets.top
            });
            break;

          case "n":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;
            this._elem.css({
                left: a,
                top: offsets.top
            });
            break;

          case "ne":
            this._elem.css({
                right: 0,
                top: offsets.top
            });
            break;

          case "e":
            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                right: offsets.right,
                top: b
            });
            break;

          case "se":
            this._elem.css({
                right: offsets.right,
                bottom: offsets.bottom
            });
            break;

          case "s":
            var a = (offsets.left + (this._plotDimensions.width - offsets.right)) / 2 - this.getWidth() / 2;
            this._elem.css({
                left: a,
                bottom: offsets.bottom
            });
            break;

          case "sw":
            this._elem.css({
                left: offsets.left,
                bottom: offsets.bottom
            });
            break;

          case "w":
            var b = (offsets.top + (this._plotDimensions.height - offsets.bottom)) / 2 - this.getHeight() / 2;
            this._elem.css({
                left: offsets.left,
                top: b
            });
            break;

          default:
            this._elem.css({
                right: offsets.right,
                bottom: offsets.bottom
            });
        }
    };
}(jQuery);
//# sourceMappingURL=jqplot.tableLegendRenderer.min.js.map