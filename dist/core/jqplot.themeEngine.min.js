!function($) {
    function numericalOrder(a, b) {
        return a - b;
    }
    function clone(obj) {
        if (null == obj || "object" != typeof obj) return obj;
        var temp = new obj.constructor();
        for (var key in obj) temp[key] = clone(obj[key]);
        return temp;
    }
    function merge(obj1, obj2) {
        if (null != obj2 && "object" == typeof obj2) for (var key in obj2) "highlightColors" == key && (obj1[key] = clone(obj2[key])), 
        null != obj2[key] && "object" == typeof obj2[key] ? (obj1.hasOwnProperty(key) || (obj1[key] = {}), 
        merge(obj1[key], obj2[key])) : obj1[key] = obj2[key];
    }
    $.jqplot.ThemeEngine = function() {
        this.themes = {}, this.activeTheme = null;
    }, $.jqplot.ThemeEngine.prototype.init = function() {
        var n, i, nn, th = new $.jqplot.Theme({
            _name: "Default"
        });
        for (n in th.target) "textColor" == n ? th.target[n] = this.target.css("color") : th.target[n] = this.target.css(n);
        if (this.title.show && this.title._elem) for (n in th.title) "textColor" == n ? th.title[n] = this.title._elem.css("color") : th.title[n] = this.title._elem.css(n);
        for (n in th.grid) th.grid[n] = this.grid[n];
        if (null == th.grid.backgroundColor && null != this.grid.background && (th.grid.backgroundColor = this.grid.background), 
        this.legend.show && this.legend._elem) for (n in th.legend) "textColor" == n ? th.legend[n] = this.legend._elem.css("color") : th.legend[n] = this.legend._elem.css(n);
        var s;
        for (i = 0; i < this.series.length; i++) {
            s = this.series[i], s.renderer.constructor == $.jqplot.LineRenderer ? th.series.push(new LineSeriesProperties()) : s.renderer.constructor == $.jqplot.BarRenderer ? th.series.push(new BarSeriesProperties()) : s.renderer.constructor == $.jqplot.PieRenderer ? th.series.push(new PieSeriesProperties()) : s.renderer.constructor == $.jqplot.DonutRenderer ? th.series.push(new DonutSeriesProperties()) : s.renderer.constructor == $.jqplot.FunnelRenderer ? th.series.push(new FunnelSeriesProperties()) : s.renderer.constructor == $.jqplot.MeterGaugeRenderer ? th.series.push(new MeterSeriesProperties()) : th.series.push({});
            for (n in th.series[i]) th.series[i][n] = s[n];
        }
        var a, ax;
        for (n in this.axes) {
            if (ax = this.axes[n], a = th.axes[n] = new AxisProperties(), a.borderColor = ax.borderColor, 
            a.borderWidth = ax.borderWidth, ax._ticks && ax._ticks[0]) for (nn in a.ticks) ax._ticks[0].hasOwnProperty(nn) ? a.ticks[nn] = ax._ticks[0][nn] : ax._ticks[0]._elem && (a.ticks[nn] = ax._ticks[0]._elem.css(nn));
            if (ax._label && ax._label.show) for (nn in a.label) ax._label[nn] ? a.label[nn] = ax._label[nn] : ax._label._elem && ("textColor" == nn ? a.label[nn] = ax._label._elem.css("color") : a.label[nn] = ax._label._elem.css(nn));
        }
        this.themeEngine._add(th), this.themeEngine.activeTheme = this.themeEngine.themes[th._name];
    }, $.jqplot.ThemeEngine.prototype.get = function(name) {
        return name ? this.themes[name] : this.activeTheme;
    }, $.jqplot.ThemeEngine.prototype.getThemeNames = function() {
        var tn = [];
        for (var n in this.themes) tn.push(n);
        return tn.sort(numericalOrder);
    }, $.jqplot.ThemeEngine.prototype.getThemes = function() {
        var tn = [], themes = [];
        for (var n in this.themes) tn.push(n);
        tn.sort(numericalOrder);
        for (var i = 0; i < tn.length; i++) themes.push(this.themes[tn[i]]);
        return themes;
    }, $.jqplot.ThemeEngine.prototype.activate = function(plot, name) {
        var redrawPlot = !1;
        if (!name && this.activeTheme && this.activeTheme._name && (name = this.activeTheme._name), 
        !this.themes.hasOwnProperty(name)) throw new Error("No theme of that name");
        var th = this.themes[name];
        this.activeTheme = th;
        var val, arr = [ "xaxis", "x2axis", "yaxis", "y2axis" ];
        for (i = 0; i < arr.length; i++) {
            var ax = arr[i];
            null != th.axesStyles.borderColor && (plot.axes[ax].borderColor = th.axesStyles.borderColor), 
            null != th.axesStyles.borderWidth && (plot.axes[ax].borderWidth = th.axesStyles.borderWidth);
        }
        for (var axname in plot.axes) {
            var axis = plot.axes[axname];
            if (axis.show) {
                var thaxis = th.axes[axname] || {}, thaxstyle = th.axesStyles, thax = $.jqplot.extend(!0, {}, thaxis, thaxstyle);
                if (val = null != th.axesStyles.borderColor ? th.axesStyles.borderColor : thax.borderColor, 
                null != thax.borderColor && (axis.borderColor = thax.borderColor, redrawPlot = !0), 
                val = null != th.axesStyles.borderWidth ? th.axesStyles.borderWidth : thax.borderWidth, 
                null != thax.borderWidth && (axis.borderWidth = thax.borderWidth, redrawPlot = !0), 
                axis._ticks && axis._ticks[0]) for (var nn in thax.ticks) val = thax.ticks[nn], 
                null != val && (axis.tickOptions[nn] = val, axis._ticks = [], redrawPlot = !0);
                if (axis._label && axis._label.show) for (var nn in thax.label) val = thax.label[nn], 
                null != val && (axis.labelOptions[nn] = val, redrawPlot = !0);
            }
        }
        for (var n in th.grid) null != th.grid[n] && (plot.grid[n] = th.grid[n]);
        if (redrawPlot || plot.grid.draw(), plot.legend.show) for (n in th.legend) null != th.legend[n] && (plot.legend[n] = th.legend[n]);
        if (plot.title.show) for (n in th.title) null != th.title[n] && (plot.title[n] = th.title[n]);
        var i;
        for (i = 0; i < th.series.length; i++) {
            var opts = {};
            for (n in th.series[i]) val = null != th.seriesStyles[n] ? th.seriesStyles[n] : th.series[i][n], 
            null != val && (opts[n] = val, "color" == n ? (plot.series[i].renderer.shapeRenderer.fillStyle = val, 
            plot.series[i].renderer.shapeRenderer.strokeStyle = val, plot.series[i][n] = val) : "lineWidth" == n || "linePattern" == n ? (plot.series[i].renderer.shapeRenderer[n] = val, 
            plot.series[i][n] = val) : "markerOptions" == n ? (merge(plot.series[i].markerOptions, val), 
            merge(plot.series[i].markerRenderer, val)) : plot.series[i][n] = val, redrawPlot = !0);
        }
        redrawPlot && (plot.target.empty(), plot.draw());
        for (n in th.target) null != th.target[n] && plot.target.css(n, th.target[n]);
    }, $.jqplot.ThemeEngine.prototype._add = function(theme, name) {
        if (name && (theme._name = name), theme._name || (theme._name = Date.parse(new Date())), 
        this.themes.hasOwnProperty(theme._name)) throw new Error("jqplot.ThemeEngine Error: Theme already in use");
        this.themes[theme._name] = theme;
    }, $.jqplot.ThemeEngine.prototype.remove = function(name) {
        return "Default" == name ? !1 : delete this.themes[name];
    }, $.jqplot.ThemeEngine.prototype.newTheme = function(name, obj) {
        "object" == typeof name && (obj = obj || name, name = null), name = obj && obj._name ? obj._name : name || Date.parse(new Date());
        var th = this.copy(this.themes.Default._name, name);
        return $.jqplot.extend(th, obj), th;
    }, $.jqplot.clone = clone, $.jqplot.merge = merge, $.jqplot.extend = function() {
        var options, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
        for ("boolean" == typeof target && (deep = target, target = arguments[1] || {}, 
        i = 2), "object" != typeof target && "[object Function]" === !toString.call(target) && (target = {}); length > i; i++) if (null != (options = arguments[i])) for (var name in options) {
            var src = target[name], copy = options[name];
            target !== copy && (deep && copy && "object" == typeof copy && !copy.nodeType ? target[name] = $.jqplot.extend(deep, src || (null != copy.length ? [] : {}), copy) : void 0 !== copy && (target[name] = copy));
        }
        return target;
    }, $.jqplot.ThemeEngine.prototype.rename = function(oldName, newName) {
        if ("Default" == oldName || "Default" == newName) throw new Error("jqplot.ThemeEngine Error: Cannot rename from/to Default");
        if (this.themes.hasOwnProperty(newName)) throw new Error("jqplot.ThemeEngine Error: New name already in use.");
        if (this.themes.hasOwnProperty(oldName)) {
            var th = this.copy(oldName, newName);
            return this.remove(oldName), th;
        }
        throw new Error("jqplot.ThemeEngine Error: Old name or new name invalid");
    }, $.jqplot.ThemeEngine.prototype.copy = function(sourceName, targetName, obj) {
        if ("Default" == targetName) throw new Error("jqplot.ThemeEngine Error: Cannot copy over Default theme");
        if (!this.themes.hasOwnProperty(sourceName)) {
            var s = "jqplot.ThemeEngine Error: Source name invalid";
            throw new Error(s);
        }
        if (this.themes.hasOwnProperty(targetName)) {
            var s = "jqplot.ThemeEngine Error: Target name invalid";
            throw new Error(s);
        }
        var th = clone(this.themes[sourceName]);
        return th._name = targetName, $.jqplot.extend(!0, th, obj), this._add(th), th;
    }, $.jqplot.Theme = function(name, obj) {
        "object" == typeof name && (obj = obj || name, name = null), name = name || Date.parse(new Date()), 
        this._name = name, this.target = {
            backgroundColor: null
        }, this.legend = {
            textColor: null,
            fontFamily: null,
            fontSize: null,
            border: null,
            background: null
        }, this.title = {
            textColor: null,
            fontFamily: null,
            fontSize: null,
            textAlign: null
        }, this.seriesStyles = {}, this.series = [], this.grid = {
            drawGridlines: null,
            gridLineColor: null,
            gridLineWidth: null,
            backgroundColor: null,
            borderColor: null,
            borderWidth: null,
            shadow: null
        }, this.axesStyles = {
            label: {},
            ticks: {}
        }, this.axes = {}, "string" == typeof obj ? this._name = obj : "object" == typeof obj && $.jqplot.extend(!0, this, obj);
    };
    var AxisProperties = function() {
        this.borderColor = null, this.borderWidth = null, this.ticks = new AxisTicks(), 
        this.label = new AxisLabel();
    }, AxisTicks = function() {
        this.show = null, this.showGridline = null, this.showLabel = null, this.showMark = null, 
        this.size = null, this.textColor = null, this.whiteSpace = null, this.fontSize = null, 
        this.fontFamily = null;
    }, AxisLabel = function() {
        this.textColor = null, this.whiteSpace = null, this.fontSize = null, this.fontFamily = null, 
        this.fontWeight = null;
    }, LineSeriesProperties = function() {
        this.color = null, this.lineWidth = null, this.linePattern = null, this.shadow = null, 
        this.fillColor = null, this.showMarker = null, this.markerOptions = new MarkerOptions();
    }, MarkerOptions = function() {
        this.show = null, this.style = null, this.lineWidth = null, this.size = null, this.color = null, 
        this.shadow = null;
    }, BarSeriesProperties = function() {
        this.color = null, this.seriesColors = null, this.lineWidth = null, this.shadow = null, 
        this.barPadding = null, this.barMargin = null, this.barWidth = null, this.highlightColors = null;
    }, PieSeriesProperties = function() {
        this.seriesColors = null, this.padding = null, this.sliceMargin = null, this.fill = null, 
        this.shadow = null, this.startAngle = null, this.lineWidth = null, this.highlightColors = null;
    }, DonutSeriesProperties = function() {
        this.seriesColors = null, this.padding = null, this.sliceMargin = null, this.fill = null, 
        this.shadow = null, this.startAngle = null, this.lineWidth = null, this.innerDiameter = null, 
        this.thickness = null, this.ringMargin = null, this.highlightColors = null;
    }, FunnelSeriesProperties = function() {
        this.color = null, this.lineWidth = null, this.shadow = null, this.padding = null, 
        this.sectionMargin = null, this.seriesColors = null, this.highlightColors = null;
    }, MeterSeriesProperties = function() {
        this.padding = null, this.backgroundColor = null, this.ringColor = null, this.tickColor = null, 
        this.ringWidth = null, this.intervalColors = null, this.intervalInnerRadius = null, 
        this.intervalOuterRadius = null, this.hubRadius = null, this.needleThickness = null, 
        this.needlePad = null;
    };
}(jQuery);
//# sourceMappingURL=jqplot.themeEngine.min.js.map