!function($) {
    $.fn.jqplotChildText = function() {
        return $(this).contents().filter(function() {
            return 3 == this.nodeType;
        }).text();
    }, $.fn.jqplotGetComputedFontStyle = function() {
        for (var css = window.getComputedStyle ? window.getComputedStyle(this[0], "") : this[0].currentStyle, attrs = css["font-style"] ? [ "font-style", "font-weight", "font-size", "font-family" ] : [ "fontStyle", "fontWeight", "fontSize", "fontFamily" ], style = [], i = 0; i < attrs.length; ++i) {
            var attr = String(css[attrs[i]]);
            attr && "normal" != attr && style.push(attr);
        }
        return style.join(" ");
    }, $.fn.jqplotToImageCanvas = function(options) {
        function getLineheight(el) {
            var lineheight = parseInt($(el).css("line-height"), 10);
            return isNaN(lineheight) && (lineheight = 1.2 * parseInt($(el).css("font-size"), 10)), 
            lineheight;
        }
        function writeWrappedText(el, context, text, left, top, canvasWidth) {
            for (var lineheight = getLineheight(el), tagwidth = $(el).innerWidth(), words = ($(el).innerHeight(), 
            text.split(/\s+/)), wl = words.length, w = "", breaks = [], temptop = top, templeft = left, max_tries = 800, i = 0; wl > i; i++) {
                var oldw = w;
                if (w += words[i], "" != oldw && context.measureText(w).width > tagwidth && (breaks.push(i), 
                w = "", i--, max_tries--), 0 >= max_tries) break;
            }
            if (0 === breaks.length) "center" === $(el).css("textAlign") && (templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx), 
            context.fillText(text, templeft, top); else {
                w = words.slice(0, breaks[0]).join(" "), "center" === $(el).css("textAlign") && (templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx), 
                context.fillText(w, templeft, temptop), temptop += lineheight;
                for (var i = 1, l = breaks.length; l > i; i++) w = words.slice(breaks[i - 1], breaks[i]).join(" "), 
                "center" === $(el).css("textAlign") && (templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx), 
                context.fillText(w, templeft, temptop), temptop += lineheight;
                w = words.slice(breaks[i - 1], words.length).join(" "), "center" === $(el).css("textAlign") && (templeft = left + (canvasWidth - context.measureText(w).width) / 2 - transx), 
                context.fillText(w, templeft, temptop);
            }
        }
        function _jqpToImage(el, x_offset, y_offset) {
            var tagname = el.tagName.toLowerCase(), p = $(el).position(), css = window.getComputedStyle ? window.getComputedStyle(el, "") : el.currentStyle, left = x_offset + p.left + parseInt(css.marginLeft, 10) + parseInt(css.borderLeftWidth, 10) + parseInt(css.paddingLeft, 10), top = y_offset + p.top + parseInt(css.marginTop, 10) + parseInt(css.borderTopWidth, 10) + parseInt(css.paddingTop, 10), w = newCanvas.width;
            if ("div" != tagname && "span" != tagname || $(el).hasClass("jqplot-highlighter-tooltip")) if ("table" === tagname && $(el).hasClass("jqplot-table-legend")) {
                newContext.strokeStyle = $(el).css("border-top-color"), newContext.fillStyle = $(el).css("background-color"), 
                newContext.fillRect(left, top, $(el).innerWidth(), $(el).innerHeight()), parseInt($(el).css("border-top-width"), 10) > 0 && newContext.strokeRect(left, top, $(el).innerWidth(), $(el).innerHeight()), 
                $(el).find("div.jqplot-table-legend-swatch-outline").each(function() {
                    var elem = $(this);
                    newContext.strokeStyle = elem.css("border-top-color");
                    var l = left + elem.position().left, t = top + elem.position().top;
                    newContext.strokeRect(l, t, elem.innerWidth(), elem.innerHeight()), l += parseInt(elem.css("padding-left"), 10), 
                    t += parseInt(elem.css("padding-top"), 10);
                    var h = elem.innerHeight() - 2 * parseInt(elem.css("padding-top"), 10), w = elem.innerWidth() - 2 * parseInt(elem.css("padding-left"), 10), swatch = elem.children("div.jqplot-table-legend-swatch");
                    newContext.fillStyle = swatch.css("background-color"), newContext.fillRect(l, t, w, h);
                }), $(el).find("td.jqplot-table-legend-label").each(function() {
                    var elem = $(this), l = left + elem.position().left, t = top + elem.position().top + parseInt(elem.css("padding-top"), 10);
                    newContext.font = elem.jqplotGetComputedFontStyle(), newContext.fillStyle = elem.css("color"), 
                    writeWrappedText(elem, newContext, elem.text(), l, t, w);
                });
            } else "canvas" == tagname && newContext.drawImage(el, left, top); else {
                $(el).children().each(function() {
                    _jqpToImage(this, left, top);
                });
                var text = $(el).jqplotChildText();
                text && (newContext.font = $(el).jqplotGetComputedFontStyle(), newContext.fillStyle = $(el).css("color"), 
                writeWrappedText(el, newContext, text, left, top, w));
            }
        }
        options = options || {};
        var x_offset = null == options.x_offset ? 0 : options.x_offset, y_offset = null == options.y_offset ? 0 : options.y_offset, backgroundColor = null == options.backgroundColor ? "rgb(255,255,255)" : options.backgroundColor;
        if (0 == $(this).width() || 0 == $(this).height()) return null;
        if ($.jqplot.use_excanvas) return null;
        for (var temptop, templeft, tempbottom, tempright, newCanvas = document.createElement("canvas"), h = $(this).outerHeight(!0), w = $(this).outerWidth(!0), offs = $(this).offset(), plotleft = offs.left, plottop = offs.top, transx = 0, transy = 0, clses = [ "jqplot-table-legend", "jqplot-xaxis-tick", "jqplot-x2axis-tick", "jqplot-yaxis-tick", "jqplot-y2axis-tick", "jqplot-y3axis-tick", "jqplot-y4axis-tick", "jqplot-y5axis-tick", "jqplot-y6axis-tick", "jqplot-y7axis-tick", "jqplot-y8axis-tick", "jqplot-y9axis-tick", "jqplot-xaxis-label", "jqplot-x2axis-label", "jqplot-yaxis-label", "jqplot-y2axis-label", "jqplot-y3axis-label", "jqplot-y4axis-label", "jqplot-y5axis-label", "jqplot-y6axis-label", "jqplot-y7axis-label", "jqplot-y8axis-label", "jqplot-y9axis-label" ], i = 0; i < clses.length; i++) $(this).find("." + clses[i]).each(function() {
            temptop = $(this).offset().top - plottop, templeft = $(this).offset().left - plotleft, 
            tempright = templeft + $(this).outerWidth(!0) + transx, tempbottom = temptop + $(this).outerHeight(!0) + transy, 
            -transx > templeft && (w = w - transx - templeft, transx = -templeft), -transy > temptop && (h = h - transy - temptop, 
            transy = -temptop), tempright > w && (w = tempright), tempbottom > h && (h = tempbottom);
        });
        newCanvas.width = w + Number(x_offset), newCanvas.height = h + Number(y_offset);
        var newContext = newCanvas.getContext("2d");
        return newContext.save(), newContext.fillStyle = backgroundColor, newContext.fillRect(0, 0, newCanvas.width, newCanvas.height), 
        newContext.restore(), newContext.translate(transx, transy), newContext.textAlign = "left", 
        newContext.textBaseline = "top", $(this).children().each(function() {
            _jqpToImage(this, x_offset, y_offset);
        }), newCanvas;
    }, $.fn.jqplotToImageStr = function(options) {
        var imgCanvas = $(this).jqplotToImageCanvas(options);
        return imgCanvas ? imgCanvas.toDataURL("image/png;base64;") : null;
    }, $.fn.jqplotToImageElem = function(options) {
        var elem = document.createElement("img"), str = $(this).jqplotToImageStr(options);
        return elem.src = str, elem;
    }, $.fn.jqplotToImageElemStr = function(options) {
        var str = "<img src=" + $(this).jqplotToImageStr(options) + " />";
        return str;
    }, $.fn.jqplotSaveImage = function() {
        var imgData = $(this).jqplotToImageStr({});
        if (imgData) {
            var d = new Date().toISOString().slice(0, 19).replace(/-/g, "");
            0 == $(this).find("#jqplot-download-link").length ? $(this).append("<a id='jqplot-download-link' style='display:none;' href='" + imgData + "' download='chart-" + d + ".png'></a>") : $(this).find("#jqplot-download-link").attr("href", imgData).attr("download", "chart-" + d + ".png"), 
            $("#jqplot-download-link").get(0).click();
        }
    }, $.fn.jqplotViewImage = function() {
        var imgStr = $(this).jqplotToImageElemStr({});
        $(this).jqplotToImageStr({});
        if (imgStr) {
            var w = window.open("");
            w.document.open("image/png"), w.document.write(imgStr), w.document.close(), w = null;
        }
    };
}(jQuery);
//# sourceMappingURL=jqplot.toImage.min.js.map