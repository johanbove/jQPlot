!function($) {
    function inArray(elem, array) {
        if (array.indexOf) return array.indexOf(elem);
        for (var i = 0, length = array.length; length > i; i++) if (array[i] === elem) return i;
        return -1;
    }
    function get_type(thing) {
        return null === thing ? "[object Null]" : Object.prototype.toString.call(thing);
    }
    var jsDate = function() {
        switch (this.syntax = jsDate.config.syntax, this._type = "jsDate", this.proxy = new Date(), 
        this.options = {}, this.locale = jsDate.regional.getLocale(), this.formatString = "", 
        this.defaultCentury = jsDate.config.defaultCentury, arguments.length) {
          case 0:
            break;

          case 1:
            if ("[object Object]" == get_type(arguments[0]) && "jsDate" != arguments[0]._type) {
                var opts = this.options = arguments[0];
                this.syntax = opts.syntax || this.syntax, this.defaultCentury = opts.defaultCentury || this.defaultCentury, 
                this.proxy = jsDate.createDate(opts.date);
            } else this.proxy = jsDate.createDate(arguments[0]);
            break;

          default:
            for (var a = [], i = 0; i < arguments.length; i++) a.push(arguments[i]);
            this.proxy = new Date(), this.proxy.setFullYear.apply(this.proxy, a.slice(0, 3)), 
            a.slice(3).length && this.proxy.setHours.apply(this.proxy, a.slice(3));
        }
    };
    jsDate.config = {
        defaultLocale: "en",
        syntax: "perl",
        defaultCentury: 1900
    }, jsDate.prototype.add = function(number, unit) {
        var factor = multipliers[unit] || multipliers.day;
        return "number" == typeof factor ? this.proxy.setTime(this.proxy.getTime() + factor * number) : factor.add(this, number), 
        this;
    }, jsDate.prototype.clone = function() {
        return new jsDate(this.proxy.getTime());
    }, jsDate.prototype.getUtcOffset = function() {
        return 6e4 * this.proxy.getTimezoneOffset();
    }, jsDate.prototype.diff = function(dateObj, unit, allowDecimal) {
        if (dateObj = new jsDate(dateObj), null === dateObj) return null;
        var factor = multipliers[unit] || multipliers.day;
        if ("number" == typeof factor) var unitDiff = (this.proxy.getTime() - dateObj.proxy.getTime()) / factor; else var unitDiff = factor.diff(this.proxy, dateObj.proxy);
        return allowDecimal ? unitDiff : Math[unitDiff > 0 ? "floor" : "ceil"](unitDiff);
    }, jsDate.prototype.getAbbrDayName = function() {
        return jsDate.regional[this.locale].dayNamesShort[this.proxy.getDay()];
    }, jsDate.prototype.getAbbrMonthName = function() {
        return jsDate.regional[this.locale].monthNamesShort[this.proxy.getMonth()];
    }, jsDate.prototype.getAMPM = function() {
        return this.proxy.getHours() >= 12 ? "PM" : "AM";
    }, jsDate.prototype.getAmPm = function() {
        return this.proxy.getHours() >= 12 ? "pm" : "am";
    }, jsDate.prototype.getCentury = function() {
        return parseInt(this.proxy.getFullYear() / 100, 10);
    }, jsDate.prototype.getDate = function() {
        return this.proxy.getDate();
    }, jsDate.prototype.getDay = function() {
        return this.proxy.getDay();
    }, jsDate.prototype.getDayOfWeek = function() {
        var dow = this.proxy.getDay();
        return 0 === dow ? 7 : dow;
    }, jsDate.prototype.getDayOfYear = function() {
        var d = this.proxy, ms = d - new Date("" + d.getFullYear() + "/1/1 GMT");
        return ms += 6e4 * d.getTimezoneOffset(), d = null, parseInt(ms / 6e4 / 60 / 24, 10) + 1;
    }, jsDate.prototype.getDayName = function() {
        return jsDate.regional[this.locale].dayNames[this.proxy.getDay()];
    }, jsDate.prototype.getFullWeekOfYear = function() {
        var d = this.proxy, doy = this.getDayOfYear(), rdow = 6 - d.getDay(), woy = parseInt((doy + rdow) / 7, 10);
        return woy;
    }, jsDate.prototype.getFullYear = function() {
        return this.proxy.getFullYear();
    }, jsDate.prototype.getGmtOffset = function() {
        var hours = this.proxy.getTimezoneOffset() / 60, prefix = 0 > hours ? "+" : "-";
        return hours = Math.abs(hours), prefix + addZeros(Math.floor(hours), 2) + ":" + addZeros(hours % 1 * 60, 2);
    }, jsDate.prototype.getHours = function() {
        return this.proxy.getHours();
    }, jsDate.prototype.getHours12 = function() {
        var hours = this.proxy.getHours();
        return hours > 12 ? hours - 12 : 0 == hours ? 12 : hours;
    }, jsDate.prototype.getIsoWeek = function() {
        var d = this.proxy, woy = this.getWeekOfYear(), dow1_1 = new Date("" + d.getFullYear() + "/1/1").getDay(), idow = woy + (dow1_1 > 4 || 1 >= dow1_1 ? 0 : 1);
        return 53 == idow && new Date("" + d.getFullYear() + "/12/31").getDay() < 4 ? idow = 1 : 0 === idow && (d = new jsDate(new Date("" + (d.getFullYear() - 1) + "/12/31")), 
        idow = d.getIsoWeek()), d = null, idow;
    }, jsDate.prototype.getMilliseconds = function() {
        return this.proxy.getMilliseconds();
    }, jsDate.prototype.getMinutes = function() {
        return this.proxy.getMinutes();
    }, jsDate.prototype.getMonth = function() {
        return this.proxy.getMonth();
    }, jsDate.prototype.getMonthName = function() {
        return jsDate.regional[this.locale].monthNames[this.proxy.getMonth()];
    }, jsDate.prototype.getMonthNumber = function() {
        return this.proxy.getMonth() + 1;
    }, jsDate.prototype.getSeconds = function() {
        return this.proxy.getSeconds();
    }, jsDate.prototype.getShortYear = function() {
        return this.proxy.getYear() % 100;
    }, jsDate.prototype.getTime = function() {
        return this.proxy.getTime();
    }, jsDate.prototype.getTimezoneAbbr = function() {
        return this.proxy.toString().replace(/^.*\(([^)]+)\)$/, "$1");
    }, jsDate.prototype.getTimezoneName = function() {
        var match = /(?:\((.+)\)$| ([A-Z]{3}) )/.exec(this.toString());
        return match[1] || match[2] || "GMT" + this.getGmtOffset();
    }, jsDate.prototype.getTimezoneOffset = function() {
        return this.proxy.getTimezoneOffset();
    }, jsDate.prototype.getWeekOfYear = function() {
        var doy = this.getDayOfYear(), rdow = 7 - this.getDayOfWeek(), woy = parseInt((doy + rdow) / 7, 10);
        return woy;
    }, jsDate.prototype.getUnix = function() {
        return Math.round(this.proxy.getTime() / 1e3, 0);
    }, jsDate.prototype.getYear = function() {
        return this.proxy.getYear();
    }, jsDate.prototype.next = function(unit) {
        return unit = unit || "day", this.clone().add(1, unit);
    }, jsDate.prototype.set = function() {
        switch (arguments.length) {
          case 0:
            this.proxy = new Date();
            break;

          case 1:
            if ("[object Object]" == get_type(arguments[0]) && "jsDate" != arguments[0]._type) {
                var opts = this.options = arguments[0];
                this.syntax = opts.syntax || this.syntax, this.defaultCentury = opts.defaultCentury || this.defaultCentury, 
                this.proxy = jsDate.createDate(opts.date);
            } else this.proxy = jsDate.createDate(arguments[0]);
            break;

          default:
            for (var a = [], i = 0; i < arguments.length; i++) a.push(arguments[i]);
            this.proxy = new Date(), this.proxy.setFullYear.apply(this.proxy, a.slice(0, 3)), 
            a.slice(3).length && this.proxy.setHours.apply(this.proxy, a.slice(3));
        }
        return this;
    }, jsDate.prototype.setDate = function(n) {
        return this.proxy.setDate(n), this;
    }, jsDate.prototype.setFullYear = function() {
        return this.proxy.setFullYear.apply(this.proxy, arguments), this;
    }, jsDate.prototype.setHours = function() {
        return this.proxy.setHours.apply(this.proxy, arguments), this;
    }, jsDate.prototype.setMilliseconds = function(n) {
        return this.proxy.setMilliseconds(n), this;
    }, jsDate.prototype.setMinutes = function() {
        return this.proxy.setMinutes.apply(this.proxy, arguments), this;
    }, jsDate.prototype.setMonth = function() {
        return this.proxy.setMonth.apply(this.proxy, arguments), this;
    }, jsDate.prototype.setSeconds = function() {
        return this.proxy.setSeconds.apply(this.proxy, arguments), this;
    }, jsDate.prototype.setTime = function(n) {
        return this.proxy.setTime(n), this;
    }, jsDate.prototype.setYear = function() {
        return this.proxy.setYear.apply(this.proxy, arguments), this;
    }, jsDate.prototype.strftime = function(formatString) {
        return formatString = formatString || this.formatString || jsDate.regional[this.locale].formatString, 
        jsDate.strftime(this, formatString, this.syntax);
    }, jsDate.prototype.toString = function() {
        return this.proxy.toString();
    }, jsDate.prototype.toYmdInt = function() {
        return 1e4 * this.proxy.getFullYear() + 100 * this.getMonthNumber() + this.proxy.getDate();
    }, jsDate.regional = {
        en: {
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        fr: {
            monthNames: [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
            monthNamesShort: [ "Jan", "Fév", "Mar", "Avr", "Mai", "Jun", "Jul", "Aoû", "Sep", "Oct", "Nov", "Déc" ],
            dayNames: [ "Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi" ],
            dayNamesShort: [ "Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam" ],
            formatString: "%d-%m-%Y %H:%M:%S"
        },
        de: {
            monthNames: [ "Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" ],
            monthNamesShort: [ "Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez" ],
            dayNames: [ "Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag" ],
            dayNamesShort: [ "So", "Mo", "Di", "Mi", "Do", "Fr", "Sa" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        es: {
            monthNames: [ "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" ],
            monthNamesShort: [ "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" ],
            dayNames: [ "Domingo", "Lunes", "Martes", "Mi&eacute;rcoles", "Jueves", "Viernes", "S&aacute;bado" ],
            dayNamesShort: [ "Dom", "Lun", "Mar", "Mi&eacute;", "Juv", "Vie", "S&aacute;b" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        ru: {
            monthNames: [ "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" ],
            monthNamesShort: [ "Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек" ],
            dayNames: [ "воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота" ],
            dayNamesShort: [ "вск", "пнд", "втр", "срд", "чтв", "птн", "сбт" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        ar: {
            monthNames: [ "كانون الثاني", "شباط", "آذار", "نيسان", "آذار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول" ],
            monthNamesShort: [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ],
            dayNames: [ "السبت", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة" ],
            dayNamesShort: [ "سبت", "أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        pt: {
            monthNames: [ "Janeiro", "Fevereiro", "Mar&ccedil;o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" ],
            monthNamesShort: [ "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez" ],
            dayNames: [ "Domingo", "Segunda-feira", "Ter&ccedil;a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S&aacute;bado" ],
            dayNamesShort: [ "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S&aacute;b" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        "pt-BR": {
            monthNames: [ "Janeiro", "Fevereiro", "Mar&ccedil;o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" ],
            monthNamesShort: [ "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez" ],
            dayNames: [ "Domingo", "Segunda-feira", "Ter&ccedil;a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S&aacute;bado" ],
            dayNamesShort: [ "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S&aacute;b" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        pl: {
            monthNames: [ "Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień" ],
            monthNamesShort: [ "Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru" ],
            dayNames: [ "Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota" ],
            dayNamesShort: [ "Ni", "Pn", "Wt", "Śr", "Cz", "Pt", "Sb" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        nl: {
            monthNames: [ "Januari", "Februari", "Maart", "April", "Mei", "Juni", "July", "Augustus", "September", "Oktober", "November", "December" ],
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec" ],
            dayNames: ",".Zaterdag,
            dayNamesShort: [ "Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        sv: {
            monthNames: [ "januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december" ],
            monthNamesShort: [ "jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec" ],
            dayNames: [ "söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag" ],
            dayNamesShort: [ "sön", "mån", "tis", "ons", "tor", "fre", "lör" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        },
        fi: {
            monthNames: [ "tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu" ],
            monthNamesShort: [ "tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu" ],
            dayNames: [ "sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai" ],
            dayNamesShort: [ "su", "ma", "ti", "ke", "to", "pe", "la" ],
            formatString: "%Y-%m-%d %H:%M:%S"
        }
    }, jsDate.regional["en-US"] = jsDate.regional["en-GB"] = jsDate.regional.en, jsDate.config.gwtintegration = !0, 
    jsDate.regional.getLocale = function() {
        var l = jsDate.config.defaultLocale;
        if (jsDate.config.gwtintegration && void 0 !== window.__gwt_Locale) {
            var tmpl = window.__gwt_Locale;
            jsDate.regional.hasOwnProperty(tmpl.replace("_", "-")) ? l = tmpl.replace("_", "-") : jsDate.regional.hasOwnProperty(tmpl.split("_")[0]) && (l = tmpl.split("_")[0]);
        } else document && document.getElementsByTagName("html") && document.getElementsByTagName("html")[0].lang && (l = document.getElementsByTagName("html")[0].lang, 
        jsDate.regional.hasOwnProperty(l) || (l = jsDate.config.defaultLocale));
        return l;
    };
    var day = 864e5, addZeros = function(num, digits) {
        num = String(num);
        var i = digits - num.length, s = String(Math.pow(10, i)).slice(1);
        return s.concat(num);
    }, multipliers = {
        millisecond: 1,
        second: 1e3,
        minute: 6e4,
        hour: 36e5,
        day: day,
        week: 7 * day,
        month: {
            add: function(d, number) {
                multipliers.year.add(d, Math[number > 0 ? "floor" : "ceil"](number / 12));
                var prevMonth = d.getMonth() + number % 12;
                12 == prevMonth ? (prevMonth = 0, d.setYear(d.getFullYear() + 1)) : -1 == prevMonth && (prevMonth = 11, 
                d.setYear(d.getFullYear() - 1)), d.setMonth(prevMonth);
            },
            diff: function(d1, d2) {
                var diffYears = d1.getFullYear() - d2.getFullYear(), diffMonths = d1.getMonth() - d2.getMonth() + 12 * diffYears, diffDays = d1.getDate() - d2.getDate();
                return diffMonths + diffDays / 30;
            }
        },
        year: {
            add: function(d, number) {
                d.setYear(d.getFullYear() + Math[number > 0 ? "floor" : "ceil"](number));
            },
            diff: function(d1, d2) {
                return multipliers.month.diff(d1, d2) / 12;
            }
        }
    };
    for (var unit in multipliers) "s" != unit.substring(unit.length - 1) && (multipliers[unit + "s"] = multipliers[unit]);
    var format = function(d, code, syntax) {
        if (jsDate.formats[syntax].shortcuts[code]) return jsDate.strftime(d, jsDate.formats[syntax].shortcuts[code], syntax);
        var getter = (jsDate.formats[syntax].codes[code] || "").split("."), nbr = d["get" + getter[0]] ? d["get" + getter[0]]() : "";
        return getter[1] && (nbr = addZeros(nbr, getter[1])), nbr;
    };
    jsDate.strftime = function(d, formatString, syntax, locale) {
        var syn = "perl", loc = jsDate.regional.getLocale();
        syntax && jsDate.formats.hasOwnProperty(syntax) ? syn = syntax : syntax && jsDate.regional.hasOwnProperty(syntax) && (loc = syntax), 
        locale && jsDate.formats.hasOwnProperty(locale) ? syn = locale : locale && jsDate.regional.hasOwnProperty(locale) && (loc = locale), 
        ("[object Object]" != get_type(d) || "jsDate" != d._type) && (d = new jsDate(d), 
        d.locale = loc), formatString || (formatString = d.formatString || jsDate.regional[loc].formatString);
        for (var match, source = formatString || "%Y-%m-%d", result = ""; source.length > 0; ) (match = source.match(jsDate.formats[syn].codes.matcher)) ? (result += source.slice(0, match.index), 
        result += (match[1] || "") + format(d, match[2], syn), source = source.slice(match.index + match[0].length)) : (result += source, 
        source = "");
        return result;
    }, jsDate.formats = {
        ISO: "%Y-%m-%dT%H:%M:%S.%N%G",
        SQL: "%Y-%m-%d %H:%M:%S"
    }, jsDate.formats.perl = {
        codes: {
            matcher: /()%(#?(%|[a-z]))/i,
            Y: "FullYear",
            y: "ShortYear.2",
            m: "MonthNumber.2",
            "#m": "MonthNumber",
            B: "MonthName",
            b: "AbbrMonthName",
            d: "Date.2",
            "#d": "Date",
            e: "Date",
            A: "DayName",
            a: "AbbrDayName",
            w: "Day",
            H: "Hours.2",
            "#H": "Hours",
            I: "Hours12.2",
            "#I": "Hours12",
            p: "AMPM",
            M: "Minutes.2",
            "#M": "Minutes",
            S: "Seconds.2",
            "#S": "Seconds",
            s: "Unix",
            N: "Milliseconds.3",
            "#N": "Milliseconds",
            O: "TimezoneOffset",
            Z: "TimezoneName",
            G: "GmtOffset"
        },
        shortcuts: {
            F: "%Y-%m-%d",
            T: "%H:%M:%S",
            X: "%H:%M:%S",
            x: "%m/%d/%y",
            D: "%m/%d/%y",
            "#c": "%a %b %e %H:%M:%S %Y",
            v: "%e-%b-%Y",
            R: "%H:%M",
            r: "%I:%M:%S %p",
            t: "	",
            n: "\n",
            "%": "%"
        }
    }, jsDate.formats.php = {
        codes: {
            matcher: /()%((%|[a-z]))/i,
            a: "AbbrDayName",
            A: "DayName",
            d: "Date.2",
            e: "Date",
            j: "DayOfYear.3",
            u: "DayOfWeek",
            w: "Day",
            U: "FullWeekOfYear.2",
            V: "IsoWeek.2",
            W: "WeekOfYear.2",
            b: "AbbrMonthName",
            B: "MonthName",
            m: "MonthNumber.2",
            h: "AbbrMonthName",
            C: "Century.2",
            y: "ShortYear.2",
            Y: "FullYear",
            H: "Hours.2",
            I: "Hours12.2",
            l: "Hours12",
            p: "AMPM",
            P: "AmPm",
            M: "Minutes.2",
            S: "Seconds.2",
            s: "Unix",
            O: "TimezoneOffset",
            z: "GmtOffset",
            Z: "TimezoneAbbr"
        },
        shortcuts: {
            D: "%m/%d/%y",
            F: "%Y-%m-%d",
            T: "%H:%M:%S",
            X: "%H:%M:%S",
            x: "%m/%d/%y",
            R: "%H:%M",
            r: "%I:%M:%S %p",
            t: "	",
            n: "\n",
            "%": "%"
        }
    }, jsDate.createDate = function(date) {
        function h1(parsable, match) {
            var ny, nd, nm, str, m1 = parseFloat(match[1]), m2 = parseFloat(match[2]), m3 = parseFloat(match[3]), cent = jsDate.config.defaultCentury;
            return m1 > 31 ? (nd = m3, nm = m2, ny = cent + m1) : (nd = m2, nm = m1, ny = cent + m3), 
            str = nm + "/" + nd + "/" + ny, parsable.replace(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})/, str);
        }
        if (null == date) return new Date();
        if (date instanceof Date) return date;
        if ("number" == typeof date) return new Date(date);
        var parsable = String(date).replace(/^\s*(.+)\s*$/g, "$1");
        parsable = parsable.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/, "$1/$2/$3"), 
        parsable = parsable.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{4})/i, "$1 $2 $3");
        var match = parsable.match(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i);
        if (match && match.length > 3) {
            var m3 = parseFloat(match[3]), ny = jsDate.config.defaultCentury + m3;
            ny = String(ny), parsable = parsable.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i, match[1] + " " + match[2] + " " + ny);
        }
        match = parsable.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})[^0-9]/), 
        match && match.length > 3 && (parsable = h1(parsable, match));
        var match = parsable.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})$/);
        match && match.length > 3 && (parsable = h1(parsable, match));
        for (var pattern, ms, obj, i = 0, length = jsDate.matchers.length, current = parsable; length > i; ) {
            if (ms = Date.parse(current), !isNaN(ms)) return new Date(ms);
            if (pattern = jsDate.matchers[i], "function" == typeof pattern) {
                if (obj = pattern.call(jsDate, current), obj instanceof Date) return obj;
            } else current = parsable.replace(pattern[0], pattern[1]);
            i++;
        }
        return NaN;
    }, jsDate.daysInMonth = function(year, month) {
        return 2 == month ? 29 == new Date(year, 1, 29).getDate() ? 29 : 28 : [ void 0, 31, void 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ][month];
    }, jsDate.matchers = [ [ /(3[01]|[0-2]\d)\s*\.\s*(1[0-2]|0\d)\s*\.\s*([1-9]\d{3})/, "$2/$1/$3" ], [ /([1-9]\d{3})\s*-\s*(1[0-2]|0\d)\s*-\s*(3[01]|[0-2]\d)/, "$2/$3/$1" ], function(str) {
        var match = str.match(/^(?:(.+)\s+)?([012]?\d)(?:\s*\:\s*(\d\d))?(?:\s*\:\s*(\d\d(\.\d*)?))?\s*(am|pm)?\s*$/i);
        if (match) {
            if (match[1]) {
                var d = this.createDate(match[1]);
                if (isNaN(d)) return;
            } else {
                var d = new Date();
                d.setMilliseconds(0);
            }
            var hour = parseFloat(match[2]);
            return match[6] && (hour = "am" == match[6].toLowerCase() ? 12 == hour ? 0 : hour : 12 == hour ? 12 : hour + 12), 
            d.setHours(hour, parseInt(match[3] || 0, 10), parseInt(match[4] || 0, 10), 1e3 * (parseFloat(match[5] || 0) || 0)), 
            d;
        }
        return str;
    }, function(str) {
        var match = str.match(/^(?:(.+))[T|\s+]([012]\d)(?:\:(\d\d))(?:\:(\d\d))(?:\.\d+)([\+\-]\d\d\:\d\d)$/i);
        if (match) {
            if (match[1]) {
                var d = this.createDate(match[1]);
                if (isNaN(d)) return;
            } else {
                var d = new Date();
                d.setMilliseconds(0);
            }
            var hour = parseFloat(match[2]);
            return d.setHours(hour, parseInt(match[3], 10), parseInt(match[4], 10), 1e3 * parseFloat(match[5])), 
            d;
        }
        return str;
    }, function(str) {
        var match = str.match(/^([0-3]?\d)\s*[-\/.\s]{1}\s*([a-zA-Z]{3,9})\s*[-\/.\s]{1}\s*([0-3]?\d)$/);
        if (match) {
            var ny, nd, nm, d = new Date(), cent = jsDate.config.defaultCentury, m1 = parseFloat(match[1]), m3 = parseFloat(match[3]);
            m1 > 31 ? (nd = m3, ny = cent + m1) : (nd = m1, ny = cent + m3);
            var nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()].monthNamesShort);
            return -1 == nm && (nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()].monthNames)), 
            d.setFullYear(ny, nm, nd), d.setHours(0, 0, 0, 0), d;
        }
        return str;
    } ], $.jsDate = jsDate;
}(jQuery);
//# sourceMappingURL=jsdate.min.js.map