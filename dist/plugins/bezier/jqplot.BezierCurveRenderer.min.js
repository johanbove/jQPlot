!function($) {
    function preInit(target, data, options) {
        var setopts = !1;
        if (options.seriesDefaults.renderer == $.jqplot.BezierCurveRenderer) setopts = !0; else if (options.series) for (var i = 0; i < options.series.length; i++) options.series[i].renderer == $.jqplot.BezierCurveRenderer && (setopts = !0);
        setopts && (options = options || {}, options.axesDefaults = $.extend(!0, {
            pad: 0
        }, options.axesDefaults), options.seriesDefaults = options.seriesDefaults || {}, 
        options.legend = $.extend(!0, {
            placement: "outside"
        }, options.legend), options.axesDefaults.renderer = $.jqplot.BezierAxisRenderer);
    }
    $.jqplot.BezierCurveRenderer = function() {
        $.jqplot.LineRenderer.call(this);
    }, $.jqplot.BezierCurveRenderer.prototype = new $.jqplot.LineRenderer(), $.jqplot.BezierCurveRenderer.prototype.constructor = $.jqplot.BezierCurveRenderer, 
    $.jqplot.BezierCurveRenderer.prototype.setGridData = function(plot) {
        var xp = this._xaxis.series_u2p, yp = this._yaxis.series_u2p, data = this.data;
        this.gridData = [], this._prevGridData = [];
        var idx = this.index;
        if (2 == data.length) if (0 == idx) this.gridData = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[1][2]), yp.call(this._yaxis, data[1][3]), xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, data[1][5]) ], [ xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, this._yaxis.min) ], [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, this._yaxis.min) ] ]; else {
            var psd = plot.series[idx - 1].data;
            this.gridData = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[1][2]), yp.call(this._yaxis, data[1][3]), xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, data[1][5]) ], [ xp.call(this._xaxis, psd[1][4]), yp.call(this._yaxis, psd[1][5]) ], [ xp.call(this._xaxis, psd[1][2]), yp.call(this._yaxis, psd[1][3]), xp.call(this._xaxis, psd[1][0]), yp.call(this._yaxis, psd[1][1]), xp.call(this._xaxis, psd[0][0]), yp.call(this._yaxis, psd[0][1]) ] ];
        } else if (0 == idx) this.gridData = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[2][0]), yp.call(this._yaxis, data[2][1]), xp.call(this._xaxis, data[3][0]), yp.call(this._yaxis, data[3][1]) ], [ xp.call(this._xaxis, data[3][1]), yp.call(this._yaxis, this._yaxis.min) ], [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, this._yaxis.min) ] ]; else {
            var psd = plot.series[idx - 1].data;
            this.gridData = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[2][0]), yp.call(this._yaxis, data[2][1]), xp.call(this._xaxis, data[3][0]), yp.call(this._yaxis, data[3][1]) ], [ xp.call(this._xaxis, psd[3][0]), yp.call(this._yaxis, psd[3][1]) ], [ xp.call(this._xaxis, psd[2][0]), yp.call(this._yaxis, psd[2][1]), xp.call(this._xaxis, psd[1][0]), yp.call(this._yaxis, psd[1][1]), xp.call(this._xaxis, psd[0][0]), yp.call(this._yaxis, psd[0][1]) ] ];
        }
    }, $.jqplot.BezierCurveRenderer.prototype.makeGridData = function(data, plot) {
        var xp = this._xaxis.series_u2p, yp = this._yaxis.series_u2p, gd = [], idx = this.index;
        if (2 == data.length) if (0 == idx) gd = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[1][2]), yp.call(this._yaxis, data[1][3]), xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, data[1][5]) ], [ xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, this._yaxis.min) ], [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, this._yaxis.min) ] ]; else {
            var psd = plot.series[idx - 1].data;
            gd = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[1][2]), yp.call(this._yaxis, data[1][3]), xp.call(this._xaxis, data[1][4]), yp.call(this._yaxis, data[1][5]) ], [ xp.call(this._xaxis, psd[1][4]), yp.call(this._yaxis, psd[1][5]) ], [ xp.call(this._xaxis, psd[1][2]), yp.call(this._yaxis, psd[1][3]), xp.call(this._xaxis, psd[1][0]), yp.call(this._yaxis, psd[1][1]), xp.call(this._xaxis, psd[0][0]), yp.call(this._yaxis, psd[0][1]) ] ];
        } else if (0 == idx) gd = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[2][0]), yp.call(this._yaxis, data[2][1]), xp.call(this._xaxis, data[3][0]), yp.call(this._yaxis, data[3][1]) ], [ xp.call(this._xaxis, data[3][1]), yp.call(this._yaxis, this._yaxis.min) ], [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, this._yaxis.min) ] ]; else {
            var psd = plot.series[idx - 1].data;
            gd = [ [ xp.call(this._xaxis, data[0][0]), yp.call(this._yaxis, data[0][1]) ], [ xp.call(this._xaxis, data[1][0]), yp.call(this._yaxis, data[1][1]), xp.call(this._xaxis, data[2][0]), yp.call(this._yaxis, data[2][1]), xp.call(this._xaxis, data[3][0]), yp.call(this._yaxis, data[3][1]) ], [ xp.call(this._xaxis, psd[3][0]), yp.call(this._yaxis, psd[3][1]) ], [ xp.call(this._xaxis, psd[2][0]), yp.call(this._yaxis, psd[2][1]), xp.call(this._xaxis, psd[1][0]), yp.call(this._yaxis, psd[1][1]), xp.call(this._xaxis, psd[0][0]), yp.call(this._yaxis, psd[0][1]) ] ];
        }
        return gd;
    }, $.jqplot.BezierCurveRenderer.prototype.draw = function(ctx, gd, options) {
        if (ctx.save(), gd.length && this.showLine) {
            ctx.save();
            var opts = null != options ? options : {};
            ctx.fillStyle = opts.fillStyle || this.color, ctx.beginPath(), ctx.moveTo(gd[0][0], gd[0][1]), 
            ctx.bezierCurveTo(gd[1][0], gd[1][1], gd[1][2], gd[1][3], gd[1][4], gd[1][5]), ctx.lineTo(gd[2][0], gd[2][1]), 
            2 == gd[3].length ? ctx.lineTo(gd[3][0], gd[3][1]) : ctx.bezierCurveTo(gd[3][0], gd[3][1], gd[3][2], gd[3][3], gd[3][4], gd[3][5]), 
            ctx.closePath(), ctx.fill(), ctx.restore();
        }
        ctx.restore();
    }, $.jqplot.BezierCurveRenderer.prototype.drawShadow = function(ctx, gd, options) {}, 
    $.jqplot.BezierAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.BezierAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.BezierAxisRenderer.prototype.constructor = $.jqplot.BezierAxisRenderer, 
    $.jqplot.BezierAxisRenderer.prototype.init = function(options) {
        $.extend(!0, this, options);
        for (var db = this._dataBounds, i = 0; i < this._series.length; i++) {
            var s = this._series[i], d = s.data;
            if (4 == d.length) for (var j = 0; j < d.length; j++) "xaxis" == this.name || "x2axis" == this.name ? ((d[j][0] < db.min || null == db.min) && (db.min = d[j][0]), 
            (d[j][0] > db.max || null == db.max) && (db.max = d[j][0])) : ((d[j][1] < db.min || null == db.min) && (db.min = d[j][1]), 
            (d[j][1] > db.max || null == db.max) && (db.max = d[j][1])); else if ("xaxis" == this.name || "x2axis" == this.name) {
                (d[0][0] < db.min || null == db.min) && (db.min = d[0][0]), (d[0][0] > db.max || null == db.max) && (db.max = d[0][0]);
                for (var j = 0; 5 > j; j += 2) (d[1][j] < db.min || null == db.min) && (db.min = d[1][j]), 
                (d[1][j] > db.max || null == db.max) && (db.max = d[1][j]);
            } else {
                (d[0][1] < db.min || null == db.min) && (db.min = d[0][1]), (d[0][1] > db.max || null == db.max) && (db.max = d[0][1]);
                for (var j = 1; 6 > j; j += 2) (d[1][j] < db.min || null == db.min) && (db.min = d[1][j]), 
                (d[1][j] > db.max || null == db.max) && (db.max = d[1][j]);
            }
        }
    }, $.jqplot.preInitHooks.push(preInit);
}(jQuery);
//# sourceMappingURL=jqplot.BezierCurveRenderer.min.js.map