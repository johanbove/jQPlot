!function($) {
    function highlight(plot, sidx, pidx) {
        plot.plugins.bubbleRenderer.highlightLabelCanvas.empty();
        var s = plot.series[sidx], canvas = plot.plugins.bubbleRenderer.highlightCanvas, ctx = canvas._ctx;
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), s._highlightedPoint = pidx, 
        plot.plugins.bubbleRenderer.highlightedSeriesIndex = sidx;
        var color = s.highlightColorGenerator.get(pidx), x = s.gridData[pidx][0], y = s.gridData[pidx][1], r = s.gridData[pidx][2];
        ctx.save(), ctx.fillStyle = color, ctx.strokeStyle = color, ctx.lineWidth = 1, ctx.beginPath(), 
        ctx.arc(x, y, r, 0, 2 * Math.PI, 0), ctx.closePath(), ctx.fill(), ctx.restore(), 
        s.labels[pidx] && (plot.plugins.bubbleRenderer.highlightLabel = s.labels[pidx].clone(), 
        plot.plugins.bubbleRenderer.highlightLabel.appendTo(plot.plugins.bubbleRenderer.highlightLabelCanvas), 
        plot.plugins.bubbleRenderer.highlightLabel.addClass("jqplot-bubble-label-highlight"));
    }
    function unhighlight(plot) {
        var canvas = plot.plugins.bubbleRenderer.highlightCanvas;
        plot.plugins.bubbleRenderer.highlightedSeriesIndex;
        plot.plugins.bubbleRenderer.highlightLabelCanvas.empty(), canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i = 0; i < plot.series.length; i++) plot.series[i]._highlightedPoint = null;
        plot.plugins.bubbleRenderer.highlightedSeriesIndex = null, plot.target.trigger("jqplotDataUnhighlight");
    }
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var si = neighbor.seriesIndex, pi = neighbor.pointIndex, ins = [ si, pi, neighbor.data, plot.series[si].gridData[pi][2] ], evt1 = jQuery.Event("jqplotDataMouseOver");
            if (evt1.pageX = ev.pageX, evt1.pageY = ev.pageY, plot.target.trigger(evt1, ins), 
            plot.series[ins[0]].highlightMouseOver && (ins[0] != plot.plugins.bubbleRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), 
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var si = neighbor.seriesIndex, pi = neighbor.pointIndex, ins = [ si, pi, neighbor.data, plot.series[si].gridData[pi][2] ];
            if (plot.series[ins[0]].highlightMouseDown && (ins[0] != plot.plugins.bubbleRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), 
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.bubbleRenderer.highlightedSeriesIndex;
        null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
    }
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var si = neighbor.seriesIndex, pi = neighbor.pointIndex, ins = [ si, pi, neighbor.data, plot.series[si].gridData[pi][2] ], evt = jQuery.Event("jqplotDataClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var si = neighbor.seriesIndex, pi = neighbor.pointIndex, ins = [ si, pi, neighbor.data, plot.series[si].gridData[pi][2] ], idx = plot.plugins.bubbleRenderer.highlightedSeriesIndex;
            null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
            var evt = jQuery.Event("jqplotDataRightClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function postPlotDraw() {
        this.plugins.bubbleRenderer && this.plugins.bubbleRenderer.highlightCanvas && (this.plugins.bubbleRenderer.highlightCanvas.resetCanvas(), 
        this.plugins.bubbleRenderer.highlightCanvas = null), this.plugins.bubbleRenderer = {
            highlightedSeriesIndex: null
        }, this.plugins.bubbleRenderer.highlightCanvas = new $.jqplot.GenericCanvas(), this.plugins.bubbleRenderer.highlightLabel = null, 
        this.plugins.bubbleRenderer.highlightLabelCanvas = $('<div style="position:absolute;"></div>');
        var top = this._gridPadding.top, left = this._gridPadding.left, width = this._plotDimensions.width - this._gridPadding.left - this._gridPadding.right, height = this._plotDimensions.height - this._gridPadding.top - this._gridPadding.bottom;
        this.plugins.bubbleRenderer.highlightLabelCanvas.css({
            top: top,
            left: left,
            width: width + "px",
            height: height + "px"
        }), this.eventCanvas._elem.before(this.plugins.bubbleRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-bubbleRenderer-highlight-canvas", this._plotDimensions, this)), 
        this.eventCanvas._elem.before(this.plugins.bubbleRenderer.highlightLabelCanvas);
        this.plugins.bubbleRenderer.highlightCanvas.setContext();
    }
    function preInit(target, data, options) {
        options = options || {}, options.axesDefaults = options.axesDefaults || {}, options.seriesDefaults = options.seriesDefaults || {};
        var setopts = !1;
        if (options.seriesDefaults.renderer == $.jqplot.BubbleRenderer) setopts = !0; else if (options.series) for (var i = 0; i < options.series.length; i++) options.series[i].renderer == $.jqplot.BubbleRenderer && (setopts = !0);
        setopts && (options.axesDefaults.renderer = $.jqplot.BubbleAxisRenderer, options.sortData = !1);
    }
    var arrayMax = function(array) {
        return Math.max.apply(Math, array);
    };
    $.jqplot.BubbleRenderer = function() {
        $.jqplot.LineRenderer.call(this);
    }, $.jqplot.BubbleRenderer.prototype = new $.jqplot.LineRenderer(), $.jqplot.BubbleRenderer.prototype.constructor = $.jqplot.BubbleRenderer, 
    $.jqplot.BubbleRenderer.prototype.init = function(options, plot) {
        this.varyBubbleColors = !0, this.autoscaleBubbles = !0, this.autoscaleMultiplier = 1, 
        this.autoscalePointsFactor = -.07, this.escapeHtml = !0, this.highlightMouseOver = !0, 
        this.highlightMouseDown = !1, this.highlightColors = [], this.bubbleAlpha = 1, this.highlightAlpha = null, 
        this.bubbleGradients = !1, this.showLabels = !0, this.radii = [], this.maxRadius = 0, 
        this._highlightedPoint = null, this.labels = [], this.bubbleCanvases = [], this._type = "bubble", 
        options.highlightMouseDown && null == options.highlightMouseOver && (options.highlightMouseOver = !1), 
        $.extend(!0, this, options), null == this.highlightAlpha && (this.highlightAlpha = this.bubbleAlpha, 
        this.bubbleGradients && (this.highlightAlpha = .35)), this.autoscaleMultiplier = this.autoscaleMultiplier * Math.pow(this.data.length, this.autoscalePointsFactor), 
        this._highlightedPoint = null;
        for (var comps, i = 0; i < this.data.length; i++) {
            var color = null, d = this.data[i];
            this.maxRadius = Math.max(this.maxRadius, d[2]), d[3] && "object" == typeof d[3] && (color = d[3].color), 
            null == color && null != this.seriesColors[i] && (color = this.seriesColors[i]), 
            color && this.bubbleAlpha < 1 && (comps = $.jqplot.getColorComponents(color), color = "rgba(" + comps[0] + ", " + comps[1] + ", " + comps[2] + ", " + this.bubbleAlpha + ")"), 
            color && (this.seriesColors[i] = color);
        }
        if (this.varyBubbleColors || (this.seriesColors = [ this.color ]), this.colorGenerator = new $.jqplot.ColorGenerator(this.seriesColors), 
        0 == this.highlightColors.length) for (var i = 0; i < this.seriesColors.length; i++) {
            for (var rgba = $.jqplot.getColorComponents(this.seriesColors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 570 ? .8 * newrgb[j] : newrgb[j] + .3 * (255 - newrgb[j]), 
            newrgb[j] = parseInt(newrgb[j], 10);
            this.highlightColors.push("rgba(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + ", " + this.highlightAlpha + ")");
        }
        this.highlightColorGenerator = new $.jqplot.ColorGenerator(this.highlightColors);
        var sopts = {
            fill: !0,
            isarc: !0,
            angle: this.shadowAngle,
            alpha: this.shadowAlpha,
            closePath: !0
        };
        this.renderer.shadowRenderer.init(sopts), this.canvas = new $.jqplot.DivCanvas(), 
        this.canvas._plotDimensions = this._plotDimensions, plot.eventListenerHooks.addOnce("jqplotMouseMove", handleMove), 
        plot.eventListenerHooks.addOnce("jqplotMouseDown", handleMouseDown), plot.eventListenerHooks.addOnce("jqplotMouseUp", handleMouseUp), 
        plot.eventListenerHooks.addOnce("jqplotClick", handleClick), plot.eventListenerHooks.addOnce("jqplotRightClick", handleRightClick), 
        plot.postDrawHooks.addOnce(postPlotDraw);
    }, $.jqplot.BubbleRenderer.prototype.setGridData = function(plot) {
        var xp = this._xaxis.series_u2p, yp = this._yaxis.series_u2p, data = this._plotData;
        this.gridData = [];
        var radii = [];
        this.radii = [];
        for (var dim = Math.min(plot._height, plot._width), i = 0; i < this.data.length; i++) null != data[i] && (this.gridData.push([ xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1]), data[i][2] ]), 
        this.radii.push([ i, data[i][2] ]), radii.push(data[i][2]));
        var r, val, maxr = this.maxRadius = arrayMax(radii), l = this.gridData.length;
        if (this.autoscaleBubbles) for (var i = 0; l > i; i++) val = radii[i] / maxr, r = this.autoscaleMultiplier * dim / 6, 
        this.gridData[i][2] = r * val;
        this.radii.sort(function(a, b) {
            return b[1] - a[1];
        });
    }, $.jqplot.BubbleRenderer.prototype.makeGridData = function(data, plot) {
        var xp = this._xaxis.series_u2p, yp = this._yaxis.series_u2p, gd = [], radii = [];
        this.radii = [];
        for (var dim = Math.min(plot._height, plot._width), i = 0; i < data.length; i++) null != data[i] && (gd.push([ xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1]), data[i][2] ]), 
        radii.push(data[i][2]), this.radii.push([ i, data[i][2] ]));
        var r, val, maxr = this.maxRadius = arrayMax(radii), l = this.gridData.length;
        if (this.autoscaleBubbles) for (var i = 0; l > i; i++) val = radii[i] / maxr, r = this.autoscaleMultiplier * dim / 6, 
        gd[i][2] = r * val;
        return this.radii.sort(function(a, b) {
            return b[1] - a[1];
        }), gd;
    }, $.jqplot.BubbleRenderer.prototype.draw = function(ctx, gd, options) {
        this.plugins.pointLabels && (this.plugins.pointLabels.show = !1);
        var opts = void 0 != options ? options : {};
        void 0 != opts.shadow ? opts.shadow : this.shadow;
        this.canvas._elem.empty();
        for (var i = 0; i < this.radii.length; i++) {
            var idx = this.radii[i][0], t = null, color = null, tel = null, d = this.data[idx], gd = this.gridData[idx];
            d[3] && ("object" == typeof d[3] ? t = d[3].label : "string" == typeof d[3] && (t = d[3])), 
            color = this.colorGenerator.get(idx);
            var offset, depth, canvasRadius = gd[2];
            this.shadow && (offset = (.7 + gd[2] / 40).toFixed(1), depth = 1 + Math.ceil(gd[2] / 15), 
            canvasRadius += offset * depth), this.bubbleCanvases[idx] = new $.jqplot.BubbleCanvas(), 
            this.canvas._elem.append(this.bubbleCanvases[idx].createElement(gd[0], gd[1], canvasRadius)), 
            this.bubbleCanvases[idx].setContext();
            var ctx = this.bubbleCanvases[idx]._ctx, x = ctx.canvas.width / 2, y = ctx.canvas.height / 2;
            if (this.shadow && this.renderer.shadowRenderer.draw(ctx, [ x, y, gd[2], 0, 2 * Math.PI ], {
                offset: offset,
                depth: depth
            }), this.bubbleCanvases[idx].draw(gd[2], color, this.bubbleGradients, this.shadowAngle / 180 * Math.PI), 
            t && this.showLabels) {
                tel = $('<div style="position:absolute;" class="jqplot-bubble-label"></div>'), this.escapeHtml ? tel.text(t) : tel.html(t), 
                this.canvas._elem.append(tel);
                var h = $(tel).outerHeight(), w = $(tel).outerWidth(), top = gd[1] - .5 * h, left = gd[0] - .5 * w;
                tel.css({
                    top: top,
                    left: left
                }), this.labels[idx] = $(tel);
            }
        }
    }, $.jqplot.DivCanvas = function() {
        $.jqplot.ElemContainer.call(this), this._ctx;
    }, $.jqplot.DivCanvas.prototype = new $.jqplot.ElemContainer(), $.jqplot.DivCanvas.prototype.constructor = $.jqplot.DivCanvas, 
    $.jqplot.DivCanvas.prototype.createElement = function(offsets, clss, plotDimensions) {
        this._offsets = offsets;
        var klass = "jqplot-DivCanvas";
        void 0 != clss && (klass = clss);
        var elem;
        elem = this._elem ? this._elem.get(0) : document.createElement("div"), void 0 != plotDimensions && (this._plotDimensions = plotDimensions);
        var w = this._plotDimensions.width - this._offsets.left - this._offsets.right + "px", h = this._plotDimensions.height - this._offsets.top - this._offsets.bottom + "px";
        return this._elem = $(elem), this._elem.css({
            position: "absolute",
            width: w,
            height: h,
            left: this._offsets.left,
            top: this._offsets.top
        }), this._elem.addClass(klass), this._elem;
    }, $.jqplot.DivCanvas.prototype.setContext = function() {
        return this._ctx = {
            canvas: {
                width: 0,
                height: 0
            },
            clearRect: function() {
                return null;
            }
        }, this._ctx;
    }, $.jqplot.BubbleCanvas = function() {
        $.jqplot.ElemContainer.call(this), this._ctx;
    }, $.jqplot.BubbleCanvas.prototype = new $.jqplot.ElemContainer(), $.jqplot.BubbleCanvas.prototype.constructor = $.jqplot.BubbleCanvas, 
    $.jqplot.BubbleCanvas.prototype.createElement = function(x, y, r) {
        var elem, klass = "jqplot-bubble-point";
        elem = this._elem ? this._elem.get(0) : document.createElement("canvas"), elem.width = null != r ? 2 * r : elem.width, 
        elem.height = null != r ? 2 * r : elem.height, this._elem = $(elem);
        var l = null != x && null != r ? x - r : this._elem.css("left"), t = null != y && null != r ? y - r : this._elem.css("top");
        return this._elem.css({
            position: "absolute",
            left: l,
            top: t
        }), this._elem.addClass(klass), $.jqplot.use_excanvas && (window.G_vmlCanvasManager.init_(document), 
        elem = window.G_vmlCanvasManager.initElement(elem)), this._elem;
    }, $.jqplot.BubbleCanvas.prototype.draw = function(r, color, gradients, angle) {
        var ctx = this._ctx, x = ctx.canvas.width / 2, y = ctx.canvas.height / 2;
        if (ctx.save(), gradients && !$.jqplot.use_excanvas) {
            r = 1.04 * r;
            var comps = $.jqplot.getColorComponents(color), colorinner = "rgba(" + Math.round(comps[0] + .8 * (255 - comps[0])) + ", " + Math.round(comps[1] + .8 * (255 - comps[1])) + ", " + Math.round(comps[2] + .8 * (255 - comps[2])) + ", " + comps[3] + ")", colorend = "rgba(" + comps[0] + ", " + comps[1] + ", " + comps[2] + ", 0)", rinner = .35 * r, xinner = x - .33 * Math.cos(angle) * r, yinner = y - .33 * Math.sin(angle) * r, radgrad = ctx.createRadialGradient(xinner, yinner, rinner, x, y, r);
            radgrad.addColorStop(0, colorinner), radgrad.addColorStop(.93, color), radgrad.addColorStop(.96, colorend), 
            radgrad.addColorStop(1, colorend), ctx.fillStyle = radgrad, ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        } else {
            ctx.fillStyle = color, ctx.strokeStyle = color, ctx.lineWidth = 1, ctx.beginPath();
            var ang = 2 * Math.PI;
            ctx.arc(x, y, r, 0, ang, 0), ctx.closePath(), ctx.fill();
        }
        ctx.restore();
    }, $.jqplot.BubbleCanvas.prototype.setContext = function() {
        return this._ctx = this._elem.get(0).getContext("2d"), this._ctx;
    }, $.jqplot.BubbleAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.BubbleAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.BubbleAxisRenderer.prototype.constructor = $.jqplot.BubbleAxisRenderer, 
    $.jqplot.BubbleAxisRenderer.prototype.init = function(options) {
        $.extend(!0, this, options);
        for (var db = this._dataBounds, minsidx = 0, minpidx = 0, maxsidx = 0, maxpidx = 0, maxr = 0, minr = 0, minMaxRadius = 0, maxMaxRadius = 0, maxMult = 0, minMult = 0, i = 0; i < this._series.length; i++) for (var s = this._series[i], d = s._plotData, j = 0; j < d.length; j++) "xaxis" == this.name || "x2axis" == this.name ? ((d[j][0] < db.min || null == db.min) && (db.min = d[j][0], 
        minsidx = i, minpidx = j, minr = d[j][2], minMaxRadius = s.maxRadius, minMult = s.autoscaleMultiplier), 
        (d[j][0] > db.max || null == db.max) && (db.max = d[j][0], maxsidx = i, maxpidx = j, 
        maxr = d[j][2], maxMaxRadius = s.maxRadius, maxMult = s.autoscaleMultiplier)) : ((d[j][1] < db.min || null == db.min) && (db.min = d[j][1], 
        minsidx = i, minpidx = j, minr = d[j][2], minMaxRadius = s.maxRadius, minMult = s.autoscaleMultiplier), 
        (d[j][1] > db.max || null == db.max) && (db.max = d[j][1], maxsidx = i, maxpidx = j, 
        maxr = d[j][2], maxMaxRadius = s.maxRadius, maxMult = s.autoscaleMultiplier));
        var minRatio = minr / minMaxRadius, maxRatio = maxr / maxMaxRadius, span = db.max - db.min, minfact = (Math.min(this._plotDimensions.width, this._plotDimensions.height), 
        minRatio * minMult / 3 * span), maxfact = maxRatio * maxMult / 3 * span;
        db.max += maxfact, db.min -= minfact;
    }, $.jqplot.preInitHooks.push(preInit);
}(jQuery);
//# sourceMappingURL=jqplot.bubbleRenderer.min.js.map