!function($) {
    function preInit(target, data, options) {
        options = options || {}, options.axesDefaults = options.axesDefaults || {}, options.legend = options.legend || {}, 
        options.seriesDefaults = options.seriesDefaults || {};
        var setopts = !1;
        if (options.seriesDefaults.renderer == $.jqplot.DonutRenderer) setopts = !0; else if (options.series) for (var i = 0; i < options.series.length; i++) options.series[i].renderer == $.jqplot.DonutRenderer && (setopts = !0);
        setopts && (options.axesDefaults.renderer = $.jqplot.DonutAxisRenderer, options.legend.renderer = $.jqplot.DonutLegendRenderer, 
        options.legend.preDraw = !0, options.seriesDefaults.pointLabels = {
            show: !1
        });
    }
    function postInit(target, data, options) {
        for (var i = 1; i < this.series.length; i++) if (!this.series[i]._previousSeries.length) for (var j = 0; i > j; j++) this.series[i].renderer.constructor == $.jqplot.DonutRenderer && this.series[j].renderer.constructor == $.jqplot.DonutRenderer && this.series[i]._previousSeries.push(this.series[j]);
        for (i = 0; i < this.series.length; i++) this.series[i].renderer.constructor == $.jqplot.DonutRenderer && (this.series[i]._numberSeries = this.series.length, 
        this.series[i].highlightMouseOver && (this.series[i].highlightMouseDown = !1));
    }
    function postParseOptions(options) {
        for (var i = 0; i < this.series.length; i++) this.series[i].seriesColors = this.seriesColors, 
        this.series[i].colorGenerator = $.jqplot.colorGenerator;
    }
    function highlight(plot, sidx, pidx) {
        var s = plot.series[sidx], canvas = plot.plugins.donutRenderer.highlightCanvas;
        canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height), 
        s._highlightedPoint = pidx, plot.plugins.donutRenderer.highlightedSeriesIndex = sidx, 
        s.renderer.drawSlice.call(s, canvas._ctx, s._sliceAngles[pidx][0], s._sliceAngles[pidx][1], s.highlightColors[pidx], !1), 
        s.highlightLabelSliceRenderer.highlight(pidx);
    }
    function unhighlight(plot) {
        var canvas = plot.plugins.donutRenderer.highlightCanvas;
        canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i = 0; i < plot.series.length; i++) plot.series[i]._highlightedPoint = null;
        plot.plugins.donutRenderer.highlightedSeriesIndex = null, plot.target.trigger("jqplotDataUnhighlight");
        for (var i = plot.series.length - 1; i >= 0; i--) plot.series[i].highlightLabelSliceRenderer.unhighlight();
    }
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt1 = jQuery.Event("jqplotDataMouseOver");
            if (evt1.pageX = ev.pageX, evt1.pageY = ev.pageY, plot.target.trigger(evt1, ins), 
            !plot.series[ins[0]].highlightMouseOver || ins[0] == plot.plugins.donutRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint) plot.series[ins[0]].highlightLabelSliceRenderer.move(ins[1], evt1.pageX, evt1.pageY); else {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
                for (var i = plot.series.length - 1; i >= 0; i--) plot.series[i].highlightLabelSliceRenderer.unhighlight();
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ];
            if (plot.series[ins[0]].highlightMouseDown && (ins[0] != plot.plugins.donutRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.donutRenderer.highlightedSeriesIndex;
        null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
    }
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt = jQuery.Event("jqplotDataClick");
            evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], idx = plot.plugins.donutRenderer.highlightedSeriesIndex;
            null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
            var evt = jQuery.Event("jqplotDataRightClick");
            evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function postPlotDraw() {
        this.highlightLabelSliceRenderer = new $.jqplot.DonutHighlighterLabelSliceRenderer(this), 
        this.plugins.donutRenderer && this.plugins.donutRenderer.highlightCanvas && (this.plugins.donutRenderer.highlightCanvas.resetCanvas(), 
        this.plugins.donutRenderer.highlightCanvas = null), this.plugins.donutRenderer = {
            highlightedSeriesIndex: null
        }, this.plugins.donutRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        var labels = $(this.targetId + " .jqplot-data-label");
        labels.length ? $(labels[0]).before(this.plugins.donutRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-donutRenderer-highlight-canvas", this._plotDimensions, this)) : this.eventCanvas._elem.before(this.plugins.donutRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-donutRenderer-highlight-canvas", this._plotDimensions, this));
        this.plugins.donutRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind("mouseleave", {
            plot: this
        }, function(ev) {
            unhighlight(ev.data.plot);
        });
    }
    $.jqplot.DonutRenderer = function() {
        $.jqplot.LineRenderer.call(this);
    }, $.jqplot.DonutRenderer.prototype = new $.jqplot.LineRenderer(), $.jqplot.DonutRenderer.prototype.constructor = $.jqplot.DonutRenderer, 
    $.jqplot.DonutRenderer.prototype.init = function(options, plot) {
        if (this.diameter = null, this.innerDiameter = null, this.thickness = null, this.padding = 20, 
        this.sliceMargin = 0, this.ringMargin = null, this.fill = !0, this.shadowOffset = 2, 
        this.shadowAlpha = .07, this.shadowDepth = 5, this.highlightMouseOver = !0, this.highlightMouseDown = !1, 
        this.highlightColors = [], this.dataLabels = "percent", this.showDataLabels = !1, 
        1 == this.showDataCategoryOnHover, this.dataLabelFormatString = null, this.dataLabelThreshold = 3, 
        this.dataLabelPositionFactor = .4, this.dataLabelNudge = 0, this.startAngle = 0, 
        this.tickRenderer = $.jqplot.DonutTickRenderer, this._drawData = !0, this._type = "donut", 
        options.highlightMouseDown && null == options.highlightMouseOver && (options.highlightMouseOver = !1), 
        $.extend(!0, this, options), null != this.diameter && (this.diameter = this.diameter - this.sliceMargin), 
        this._diameter = null, this._innerDiameter = null, this._radius = null, this._innerRadius = null, 
        this._thickness = null, this._previousSeries = [], this._numberSeries = 1, this._sliceAngles = [], 
        this._highlightedPoint = null, this.highlightLabelSliceRenderer = new $.jqplot.DonutHighlighterLabelSliceRenderer(this), 
        this.labelsSlices = [], 0 == this.highlightColors.length) for (var i = 0; i < this.seriesColors.length; i++) {
            for (var rgba = $.jqplot.getColorComponents(this.seriesColors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 570 ? .8 * newrgb[j] : newrgb[j] + .3 * (255 - newrgb[j]), 
            newrgb[j] = parseInt(newrgb[j], 10);
            this.highlightColors.push("rgb(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + ")");
        }
        plot.postParseOptionsHooks.addOnce(postParseOptions), plot.postInitHooks.addOnce(postInit), 
        plot.eventListenerHooks.addOnce("jqplotMouseMove", handleMove), plot.eventListenerHooks.addOnce("jqplotMouseDown", handleMouseDown), 
        plot.eventListenerHooks.addOnce("jqplotMouseUp", handleMouseUp), plot.eventListenerHooks.addOnce("jqplotClick", handleClick), 
        plot.eventListenerHooks.addOnce("jqplotRightClick", handleRightClick), plot.postDrawHooks.addOnce(postPlotDraw);
    }, $.jqplot.DonutRenderer.prototype.setGridData = function(plot) {
        var stack = [], td = [], tot = (this.startAngle / 180 * Math.PI, 0);
        this._drawData = !1;
        for (var i = 0; i < this.data.length; i++) 0 != this.data[i][1] && (this._drawData = !0), 
        stack.push(this.data[i][1]), td.push([ this.data[i][0] ]), i > 0 && (stack[i] += stack[i - 1]), 
        tot += this.data[i][1];
        for (var fact = 2 * Math.PI / stack[stack.length - 1], i = 0; i < stack.length; i++) td[i][1] = stack[i] * fact, 
        td[i][2] = this.data[i][1] / tot;
        this.gridData = td;
    }, $.jqplot.DonutRenderer.prototype.makeGridData = function(data, plot) {
        var stack = [], td = [], tot = 0;
        this.startAngle / 180 * Math.PI;
        this._drawData = !1;
        for (var i = 0; i < data.length; i++) 0 != this.data[i][1] && (this._drawData = !0), 
        stack.push(data[i][1]), td.push([ data[i][0] ]), i > 0 && (stack[i] += stack[i - 1]), 
        tot += data[i][1];
        for (var fact = 2 * Math.PI / stack[stack.length - 1], i = 0; i < stack.length; i++) td[i][1] = stack[i] * fact, 
        td[i][2] = data[i][1] / tot;
        return td;
    }, $.jqplot.DonutRenderer.prototype.drawSlice = function(ctx, ang1, ang2, color, isShadow) {
        function doDraw() {
            ang2 > 6.282 + this.startAngle && (ang2 = 6.282 + this.startAngle, ang1 > ang2 && (ang1 = 6.281 + this.startAngle)), 
            ang1 >= ang2 || (ctx.beginPath(), ctx.fillStyle = color, ctx.strokeStyle = color, 
            ctx.arc(0, 0, r, ang1, ang2, !1), ctx.lineTo(ri * Math.cos(ang2), ri * Math.sin(ang2)), 
            ctx.arc(0, 0, ri, ang2, ang1, !0), ctx.closePath(), fill ? ctx.fill() : ctx.stroke());
        }
        var r = this._diameter / 2, ri = r - this._thickness, fill = this.fill;
        if (ctx.save(), ctx.translate(this._center[0], this._center[1]), isShadow) for (var i = 0; i < this.shadowDepth; i++) ctx.save(), 
        ctx.translate(this.shadowOffset * Math.cos(this.shadowAngle / 180 * Math.PI), this.shadowOffset * Math.sin(this.shadowAngle / 180 * Math.PI)), 
        doDraw(); else doDraw();
        if (isShadow) for (var i = 0; i < this.shadowDepth; i++) ctx.restore();
        ctx.restore();
    }, $.jqplot.DonutHighlighterLabelSliceRenderer = function(serie) {
        this.serie = serie;
    }, $.jqplot.DonutHighlighterLabelSliceRenderer.prototype.highlight = function(pid) {
        this.serie.labelsSlices[pid].removeClass("hidden");
    }, $.jqplot.DonutHighlighterLabelSliceRenderer.prototype.unhighlight = function(pid) {
        for (var i = this.serie.labelsSlices.length - 1; i >= 0; i--) this.serie.labelsSlices[i].addClass("hidden");
    }, $.jqplot.DonutHighlighterLabelSliceRenderer.prototype.move = function(pid, x, y) {
        var pointLblPosition = this.serie.labelsSlices[pid].position(), tooltip = this.serie.labelsSlices[pid].find(".tooltip"), topPos = y - pointLblPosition.top - (2 * this.serie.labelsSlices[pid].height() + tooltip.height()), leftPos = x - pointLblPosition.left - this.serie.labelsSlices[pid].width() - tooltip.width() / 2;
        tooltip.css({
            left: leftPos,
            top: topPos
        });
    }, $.jqplot.DonutRenderer.prototype.draw = function(ctx, gd, options, plot) {
        this.labelsSlices = [];
        var i, opts = void 0 != options ? options : {}, offx = 0, offy = 0, trans = 1;
        if (options.legendInfo && "insideGrid" == options.legendInfo.placement) {
            var li = options.legendInfo;
            switch (li.location) {
              case "nw":
                offx = li.width + li.xoffset;
                break;

              case "w":
                offx = li.width + li.xoffset;
                break;

              case "sw":
                offx = li.width + li.xoffset;
                break;

              case "ne":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "e":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "se":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "n":
                offy = li.height + li.yoffset;
                break;

              case "s":
                offy = li.height + li.yoffset, trans = -1;
            }
        }
        for (var cw = (void 0 != opts.shadow ? opts.shadow : this.shadow, void 0 != opts.showLine ? opts.showLine : this.showLine, 
        void 0 != opts.fill ? opts.fill : this.fill, ctx.canvas.width), ch = ctx.canvas.height, w = cw - offx - 2 * this.padding, h = ch - offy - 2 * this.padding, mindim = Math.min(w, h), d = mindim, ringmargin = null == this.ringMargin ? 2 * this.sliceMargin : this.ringMargin, i = 0; i < this._previousSeries.length; i++) d -= 2 * this._previousSeries[i]._thickness + 2 * ringmargin;
        if (this._diameter = this.diameter || d, null != this.innerDiameter) {
            var od = this._numberSeries > 1 && this.index > 0 ? this._previousSeries[0]._diameter : this._diameter;
            this._thickness = this.thickness || (od - this.innerDiameter - 2 * ringmargin * this._numberSeries) / this._numberSeries / 2;
        } else this._thickness = this.thickness || mindim / 2 / (this._numberSeries + 1) * .85;
        this._radius = this._diameter / 2;
        this._innerRadius = this._radius - this._thickness;
        var sa = this.startAngle / 180 * Math.PI;
        if (this._center = [ (cw - trans * offx) / 2 + trans * offx, (ch - trans * offy) / 2 + trans * offy ], 
        this.shadow) for (var shadowColor = "rgba(0,0,0," + this.shadowAlpha + ")", i = 0; i < gd.length; i++) {
            var ang1 = 0 == i ? sa : gd[i - 1][1] + sa;
            ang1 += this.sliceMargin / 180 * Math.PI, this.renderer.drawSlice.call(this, ctx, ang1, gd[i][1] + sa, shadowColor, !0);
        }
        for (var i = 0; i < gd.length; i++) {
            var ang1 = 0 == i ? sa : gd[i - 1][1] + sa;
            ang1 += this.sliceMargin / 180 * Math.PI;
            var ang2 = gd[i][1] + sa;
            if (this._sliceAngles.push([ ang1, ang2 ]), this.renderer.drawSlice.call(this, ctx, ang1, ang2, this.seriesColors[i], !1), 
            this.showDataLabels && 100 * gd[i][2] >= this.dataLabelThreshold) {
                var fstr, label, avgang = (ang1 + ang2) / 2;
                "label" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%s", label = $.jqplot.sprintf(fstr, gd[i][0])) : "value" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d", 
                label = $.jqplot.sprintf(fstr, this.data[i][1])) : "percent" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d%%", 
                label = $.jqplot.sprintf(fstr, 100 * gd[i][2])) : this.dataLabels.constructor == Array && (fstr = this.dataLabelFormatString || "%s", 
                label = $.jqplot.sprintf(fstr, this.dataLabels[i]));
                var labelelem, fact = this._innerRadius + this._thickness * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge, x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left, y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;
                if (this.showDataCategoryOnHover) {
                    var fstrTooltip = this.dataLabelFormatString || "%s";
                    labelTooltip = $.jqplot.sprintf(fstrTooltip, gd[i][0]);
                    var tooltip = '<span class="tooltip">' + labelTooltip + "</span>", txt = '<span class="jqplot-donut-series jqplot-data-label" style="position:absolute;">' + label + tooltip + NaN, labelelem = $(txt).insertBefore(plot.eventCanvas._elem);
                    this.labelsSlices.push(labelelem), labelelem.addClass("jqplot-donut-show-hover hidden");
                } else var labelelem = $('<span class="jqplot-donut-series jqplot-data-label" style="position:absolute;">' + label + "</span>").insertBefore(plot.eventCanvas._elem);
                x -= labelelem.width() / 2, y -= labelelem.height() / 2, x = Math.round(x), y = Math.round(y), 
                labelelem.css({
                    left: x,
                    top: y
                });
            }
        }
    }, $.jqplot.DonutAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.DonutAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.DonutAxisRenderer.prototype.constructor = $.jqplot.DonutAxisRenderer, 
    $.jqplot.DonutAxisRenderer.prototype.init = function(options) {
        this.tickRenderer = $.jqplot.DonutTickRenderer, $.extend(!0, this, options), this._dataBounds = {
            min: 0,
            max: 100
        }, this.min = 0, this.max = 100, this.showTicks = !1, this.ticks = [], this.showMark = !1, 
        this.show = !1;
    }, $.jqplot.DonutLegendRenderer = function() {
        $.jqplot.TableLegendRenderer.call(this);
    }, $.jqplot.DonutLegendRenderer.prototype = new $.jqplot.TableLegendRenderer(), 
    $.jqplot.DonutLegendRenderer.prototype.constructor = $.jqplot.DonutLegendRenderer, 
    $.jqplot.DonutLegendRenderer.prototype.init = function(options) {
        this.numberRows = null, this.numberColumns = null, $.extend(!0, this, options);
    }, $.jqplot.DonutLegendRenderer.prototype.draw = function() {
        if (this.show) {
            var series = this._series, ss = "position:absolute;";
            ss += this.background ? "background:" + this.background + ";" : "", ss += this.border ? "border:" + this.border + ";" : "", 
            ss += this.fontSize ? "font-size:" + this.fontSize + ";" : "", ss += this.fontFamily ? "font-family:" + this.fontFamily + ";" : "", 
            ss += this.textColor ? "color:" + this.textColor + ";" : "", ss += null != this.marginTop ? "margin-top:" + this.marginTop + ";" : "", 
            ss += null != this.marginBottom ? "margin-bottom:" + this.marginBottom + ";" : "", 
            ss += null != this.marginLeft ? "margin-left:" + this.marginLeft + ";" : "", ss += null != this.marginRight ? "margin-right:" + this.marginRight + ";" : "", 
            this._elem = $('<table class="jqplot-table-legend" style="' + ss + '"></table>');
            for (var nr, nc, pad = !1, reverse = !1, serieIdx = 0; serieIdx <= series.length - 1; serieIdx += 1) {
                var s = series[serieIdx], colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);
                if (s.show) {
                    var pd = s.data;
                    this.numberRows ? (nr = this.numberRows, nc = this.numberColumns ? this.numberColumns : Math.ceil(pd.length / nr)) : this.numberColumns ? (nc = this.numberColumns, 
                    nr = Math.ceil(pd.length / this.numberColumns)) : (nr = pd.length, nc = 1);
                    var i, j, tr, td1, td2, lt, rs, color, idx = 0;
                    for (i = 0; nr > i; i++) for (tr = reverse ? $('<tr class="jqplot-table-legend"></tr>').prependTo(this._elem) : $('<tr class="jqplot-table-legend"></tr>').appendTo(this._elem), 
                    j = 0; nc > j; j++) idx < pd.length && (lt = this.labels[idx] || pd[idx][0].toString(), 
                    color = colorGenerator.next(), pad = reverse ? i == nr - 1 ? !1 : !0 : i > 0 ? !0 : !1, 
                    rs = pad ? this.rowSpacing : "0", td1 = $('<td class="jqplot-table-legend jqplot-table-legend-swatch" style="text-align:center;padding-top:' + rs + ';"><div class="jqplot-table-legend-swatch-outline"><div class="jqplot-table-legend-swatch" style="border-color:' + color + ';"></div></div></td>'), 
                    td2 = $('<td class="jqplot-table-legend jqplot-table-legend-label" style="padding-top:' + rs + ';"></td>'), 
                    this.escapeHtml ? td2.text(lt) : td2.html(lt), reverse ? (td2.prependTo(tr), td1.prependTo(tr)) : (td1.appendTo(tr), 
                    td2.appendTo(tr)), pad = !0), idx++;
                }
            }
        }
        return this._elem;
    };
    $.jqplot.preInitHooks.push(preInit), $.jqplot.DonutTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    }, $.jqplot.DonutTickRenderer.prototype = new $.jqplot.AxisTickRenderer(), $.jqplot.DonutTickRenderer.prototype.constructor = $.jqplot.DonutTickRenderer;
}(jQuery);
//# sourceMappingURL=jqplot.donutRenderer.min.js.map