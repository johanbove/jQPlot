!function($) {
    function preInit(target, data, options) {
        options = options || {}, options.axesDefaults = options.axesDefaults || {}, options.legend = options.legend || {}, 
        options.seriesDefaults = options.seriesDefaults || {};
        var setopts = !1;
        if (options.seriesDefaults.renderer == $.jqplot.FunnelRenderer) setopts = !0; else if (options.series) for (var i = 0; i < options.series.length; i++) options.series[i].renderer == $.jqplot.FunnelRenderer && (setopts = !0);
        setopts && (options.axesDefaults.renderer = $.jqplot.FunnelAxisRenderer, options.legend.renderer = $.jqplot.FunnelLegendRenderer, 
        options.legend.preDraw = !0, options.sortData = !1, options.seriesDefaults.pointLabels = {
            show: !1
        });
    }
    function postInit(target, data, options) {
        for (var i = 0; i < this.series.length; i++) this.series[i].renderer.constructor == $.jqplot.FunnelRenderer && this.series[i].highlightMouseOver && (this.series[i].highlightMouseDown = !1);
    }
    function postParseOptions(options) {
        for (var i = 0; i < this.series.length; i++) this.series[i].seriesColors = this.seriesColors, 
        this.series[i].colorGenerator = $.jqplot.colorGenerator;
    }
    function highlight(plot, sidx, pidx) {
        var s = plot.series[sidx], canvas = plot.plugins.funnelRenderer.highlightCanvas;
        canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height), 
        s._highlightedPoint = pidx, plot.plugins.funnelRenderer.highlightedSeriesIndex = sidx, 
        s.renderer.drawSection.call(s, canvas._ctx, s._vertices[pidx], s.highlightColors[pidx], !1);
    }
    function unhighlight(plot) {
        var canvas = plot.plugins.funnelRenderer.highlightCanvas;
        canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i = 0; i < plot.series.length; i++) plot.series[i]._highlightedPoint = null;
        plot.plugins.funnelRenderer.highlightedSeriesIndex = null, plot.target.trigger("jqplotDataUnhighlight");
    }
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt1 = jQuery.Event("jqplotDataMouseOver");
            if (evt1.pageX = ev.pageX, evt1.pageY = ev.pageY, plot.target.trigger(evt1, ins), 
            plot.series[ins[0]].highlightMouseOver && (ins[0] != plot.plugins.funnelRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), 
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ];
            if (plot.series[ins[0]].highlightMouseDown && (ins[0] != plot.plugins.funnelRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), 
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.funnelRenderer.highlightedSeriesIndex;
        null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
    }
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt = jQuery.Event("jqplotDataClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], idx = plot.plugins.funnelRenderer.highlightedSeriesIndex;
            null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
            var evt = jQuery.Event("jqplotDataRightClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function postPlotDraw() {
        this.plugins.funnelRenderer && this.plugins.funnelRenderer.highlightCanvas && (this.plugins.funnelRenderer.highlightCanvas.resetCanvas(), 
        this.plugins.funnelRenderer.highlightCanvas = null), this.plugins.funnelRenderer = {}, 
        this.plugins.funnelRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        var labels = $(this.targetId + " .jqplot-data-label");
        labels.length ? $(labels[0]).before(this.plugins.funnelRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-funnelRenderer-highlight-canvas", this._plotDimensions, this)) : this.eventCanvas._elem.before(this.plugins.funnelRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-funnelRenderer-highlight-canvas", this._plotDimensions, this));
        this.plugins.funnelRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind("mouseleave", {
            plot: this
        }, function(ev) {
            unhighlight(ev.data.plot);
        });
    }
    $.jqplot.FunnelRenderer = function() {
        $.jqplot.LineRenderer.call(this);
    }, $.jqplot.FunnelRenderer.prototype = new $.jqplot.LineRenderer(), $.jqplot.FunnelRenderer.prototype.constructor = $.jqplot.FunnelRenderer, 
    $.jqplot.FunnelRenderer.prototype.init = function(options, plot) {
        this.padding = {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20
        }, this.sectionMargin = 6, this.fill = !0, this.shadowOffset = 2, this.shadowAlpha = .07, 
        this.shadowDepth = 5, this.highlightMouseOver = !0, this.highlightMouseDown = !1, 
        this.highlightColors = [], this.widthRatio = .2, this.lineWidth = 2, this.dataLabels = "percent", 
        this.showDataLabels = !1, this.dataLabelFormatString = null, this.dataLabelThreshold = 3, 
        this._type = "funnel", this.tickRenderer = $.jqplot.FunnelTickRenderer, options.highlightMouseDown && null == options.highlightMouseOver && (options.highlightMouseOver = !1), 
        $.extend(!0, this, options), this._highlightedPoint = null, this._bases = [], this._atot, 
        this._areas = [], this._lengths = [], this._angle, this._dataIndices = [], this._unorderedData = $.extend(!0, [], this.data);
        for (var idxs = $.extend(!0, [], this.data), i = 0; i < idxs.length; i++) idxs[i].push(i);
        this.data.sort(function(a, b) {
            return b[1] - a[1];
        }), idxs.sort(function(a, b) {
            return b[1] - a[1];
        });
        for (var i = 0; i < idxs.length; i++) this._dataIndices.push(idxs[i][2]);
        if (0 == this.highlightColors.length) for (var i = 0; i < this.seriesColors.length; i++) {
            for (var rgba = $.jqplot.getColorComponents(this.seriesColors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 570 ? .8 * newrgb[j] : newrgb[j] + .4 * (255 - newrgb[j]), 
            newrgb[j] = parseInt(newrgb[j], 10);
            this.highlightColors.push("rgb(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + ")");
        }
        plot.postParseOptionsHooks.addOnce(postParseOptions), plot.postInitHooks.addOnce(postInit), 
        plot.eventListenerHooks.addOnce("jqplotMouseMove", handleMove), plot.eventListenerHooks.addOnce("jqplotMouseDown", handleMouseDown), 
        plot.eventListenerHooks.addOnce("jqplotMouseUp", handleMouseUp), plot.eventListenerHooks.addOnce("jqplotClick", handleClick), 
        plot.eventListenerHooks.addOnce("jqplotRightClick", handleRightClick), plot.postDrawHooks.addOnce(postPlotDraw);
    }, $.jqplot.FunnelRenderer.prototype.setGridData = function(plot) {
        for (var sum = 0, td = [], i = 0; i < this.data.length; i++) sum += this.data[i][1], 
        td.push([ this.data[i][0], this.data[i][1] ]);
        for (var i = 0; i < td.length; i++) td[i][1] = td[i][1] / sum;
        this._bases = new Array(td.length + 1), this._lengths = new Array(td.length), this.gridData = td;
    }, $.jqplot.FunnelRenderer.prototype.makeGridData = function(data, plot) {
        for (var sum = 0, td = [], i = 0; i < this.data.length; i++) sum += this.data[i][1], 
        td.push([ this.data[i][0], this.data[i][1] ]);
        for (var i = 0; i < td.length; i++) td[i][1] = td[i][1] / sum;
        return this._bases = new Array(td.length + 1), this._lengths = new Array(td.length), 
        td;
    }, $.jqplot.FunnelRenderer.prototype.drawSection = function(ctx, vertices, color, isShadow) {
        function doDraw() {
            ctx.beginPath(), ctx.fillStyle = color, ctx.strokeStyle = color, ctx.lineWidth = lineWidth, 
            ctx.moveTo(vertices[0][0], vertices[0][1]);
            for (var i = 1; 4 > i; i++) ctx.lineTo(vertices[i][0], vertices[i][1]);
            ctx.closePath(), fill ? ctx.fill() : ctx.stroke();
        }
        var fill = this.fill, lineWidth = this.lineWidth;
        if (ctx.save(), isShadow) for (var i = 0; i < this.shadowDepth; i++) ctx.save(), 
        ctx.translate(this.shadowOffset * Math.cos(this.shadowAngle / 180 * Math.PI), this.shadowOffset * Math.sin(this.shadowAngle / 180 * Math.PI)), 
        doDraw(); else doDraw();
        if (isShadow) for (var i = 0; i < this.shadowDepth; i++) ctx.restore();
        ctx.restore();
    }, $.jqplot.FunnelRenderer.prototype.draw = function(ctx, gd, options, plot) {
        function findleft(l) {
            var m = (p0[1] - p2[1]) / (p0[0] - p2[0]), b = p0[1] - m * p0[0], y = l + p0[1];
            return [ (y - b) / m, y ];
        }
        function findright(l) {
            var m = (p1[1] - p3[1]) / (p1[0] - p3[0]), b = p1[1] - m * p1[0], y = l + p1[1];
            return [ (y - b) / m, y ];
        }
        var i, opts = void 0 != options ? options : {}, offx = 0, offy = 0, trans = 1;
        if (this._areas = [], options.legendInfo && "insideGrid" == options.legendInfo.placement) {
            var li = options.legendInfo;
            switch (li.location) {
              case "nw":
                offx = li.width + li.xoffset;
                break;

              case "w":
                offx = li.width + li.xoffset;
                break;

              case "sw":
                offx = li.width + li.xoffset;
                break;

              case "ne":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "e":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "se":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "n":
                offy = li.height + li.yoffset;
                break;

              case "s":
                offy = li.height + li.yoffset, trans = -1;
            }
        }
        var loff = 1 == trans ? this.padding.left + offx : this.padding.left, toff = 1 == trans ? this.padding.top + offy : this.padding.top, roff = -1 == trans ? this.padding.right + offx : this.padding.right, boff = -1 == trans ? this.padding.bottom + offy : this.padding.bottom, cw = (void 0 != opts.shadow ? opts.shadow : this.shadow, 
        void 0 != opts.showLine ? opts.showLine : this.showLine, void 0 != opts.fill ? opts.fill : this.fill, 
        ctx.canvas.width), ch = ctx.canvas.height;
        this._bases[0] = cw - loff - roff;
        var ltot = this._length = ch - toff - boff, hend = this._bases[0] * this.widthRatio;
        for (this._atot = ltot / 2 * (this._bases[0] + this._bases[0] * this.widthRatio), 
        this._angle = Math.atan((this._bases[0] - hend) / 2 / ltot), i = 0; i < gd.length; i++) this._areas.push(gd[i][1] * this._atot);
        var guess, err, count, lsum = 0, tolerance = 1e-4;
        for (i = 0; i < this._areas.length; i++) {
            for (guess = this._areas[i] / this._bases[i], err = 999999, this._lengths[i] = guess, 
            count = 0; err > this._lengths[i] * tolerance && 100 > count; ) this._lengths[i] = this._areas[i] / (this._bases[i] - this._lengths[i] * Math.tan(this._angle)), 
            err = Math.abs(this._lengths[i] - guess), this._bases[i + 1] = this._bases[i] - 2 * this._lengths[i] * Math.tan(this._angle), 
            guess = this._lengths[i], count++;
            lsum += this._lengths[i];
        }
        this._vertices = new Array(gd.length);
        var p0 = [ loff, toff ], p1 = [ loff + this._bases[0], toff ], p2 = [ loff + (this._bases[0] - this._bases[this._bases.length - 1]) / 2, toff + this._length ], p3 = [ p2[0] + this._bases[this._bases.length - 1], p2[1] ], x = offx, y = offy, h = 0, adj = 0;
        for (i = 0; i < gd.length; i++) {
            this._vertices[i] = new Array();
            var v = this._vertices[i], sm = this.sectionMargin;
            0 == i && (adj = 0), 1 == i ? adj = sm / 3 : i > 0 && i < gd.length - 1 ? adj = sm / 2 : i == gd.length - 1 && (adj = 2 * sm / 3), 
            v.push(findleft(h + adj)), v.push(findright(h + adj)), h += this._lengths[i], 0 == i ? adj = -2 * sm / 3 : i > 0 && i < gd.length - 1 ? adj = -sm / 2 : i == gd.length - 1 && (adj = 0), 
            v.push(findright(h + adj)), v.push(findleft(h + adj));
        }
        if (this.shadow) for (var shadowColor = "rgba(0,0,0," + this.shadowAlpha + ")", i = 0; i < gd.length; i++) this.renderer.drawSection.call(this, ctx, this._vertices[i], shadowColor, !0);
        for (var i = 0; i < gd.length; i++) {
            var v = this._vertices[i];
            if (this.renderer.drawSection.call(this, ctx, v, this.seriesColors[i]), this.showDataLabels && 100 * gd[i][1] >= this.dataLabelThreshold) {
                var fstr, label;
                "label" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%s", label = $.jqplot.sprintf(fstr, gd[i][0])) : "value" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d", 
                label = $.jqplot.sprintf(fstr, this.data[i][1])) : "percent" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d%%", 
                label = $.jqplot.sprintf(fstr, 100 * gd[i][1])) : this.dataLabels.constructor == Array && (fstr = this.dataLabelFormatString || "%s", 
                label = $.jqplot.sprintf(fstr, this.dataLabels[this._dataIndices[i]]));
                var x = (this._radius * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge, 
                (v[0][0] + v[1][0]) / 2 + this.canvas._offsets.left), y = (v[1][1] + v[2][1]) / 2 + this.canvas._offsets.top, labelelem = $('<span class="jqplot-funnel-series jqplot-data-label" style="position:absolute;">' + label + "</span>").insertBefore(plot.eventCanvas._elem);
                x -= labelelem.width() / 2, y -= labelelem.height() / 2, x = Math.round(x), y = Math.round(y), 
                labelelem.css({
                    left: x,
                    top: y
                });
            }
        }
    }, $.jqplot.FunnelAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.FunnelAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.FunnelAxisRenderer.prototype.constructor = $.jqplot.FunnelAxisRenderer, 
    $.jqplot.FunnelAxisRenderer.prototype.init = function(options) {
        this.tickRenderer = $.jqplot.FunnelTickRenderer, $.extend(!0, this, options), this._dataBounds = {
            min: 0,
            max: 100
        }, this.min = 0, this.max = 100, this.showTicks = !1, this.ticks = [], this.showMark = !1, 
        this.show = !1;
    }, $.jqplot.FunnelLegendRenderer = function() {
        $.jqplot.TableLegendRenderer.call(this);
    }, $.jqplot.FunnelLegendRenderer.prototype = new $.jqplot.TableLegendRenderer(), 
    $.jqplot.FunnelLegendRenderer.prototype.constructor = $.jqplot.FunnelLegendRenderer, 
    $.jqplot.FunnelLegendRenderer.prototype.init = function(options) {
        this.numberRows = null, this.numberColumns = null, $.extend(!0, this, options);
    }, $.jqplot.FunnelLegendRenderer.prototype.draw = function() {
        if (this.show) {
            var series = this._series, ss = "position:absolute;";
            ss += this.background ? "background:" + this.background + ";" : "", ss += this.border ? "border:" + this.border + ";" : "", 
            ss += this.fontSize ? "font-size:" + this.fontSize + ";" : "", ss += this.fontFamily ? "font-family:" + this.fontFamily + ";" : "", 
            ss += this.textColor ? "color:" + this.textColor + ";" : "", ss += null != this.marginTop ? "margin-top:" + this.marginTop + ";" : "", 
            ss += null != this.marginBottom ? "margin-bottom:" + this.marginBottom + ";" : "", 
            ss += null != this.marginLeft ? "margin-left:" + this.marginLeft + ";" : "", ss += null != this.marginRight ? "margin-right:" + this.marginRight + ";" : "", 
            this._elem = $('<table class="jqplot-table-legend" style="' + ss + '"></table>');
            var nr, nc, pad = !1, reverse = !1, s = series[0], colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);
            if (s.show) {
                var pd = s.data;
                this.numberRows ? (nr = this.numberRows, nc = this.numberColumns ? this.numberColumns : Math.ceil(pd.length / nr)) : this.numberColumns ? (nc = this.numberColumns, 
                nr = Math.ceil(pd.length / this.numberColumns)) : (nr = pd.length, nc = 1);
                var i, j, tr, td1, td2, lt, rs, color, idx = 0;
                for (i = 0; nr > i; i++) for (tr = reverse ? $('<tr class="jqplot-table-legend"></tr>').prependTo(this._elem) : $('<tr class="jqplot-table-legend"></tr>').appendTo(this._elem), 
                j = 0; nc > j; j++) idx < pd.length && (lt = this.labels[idx] || pd[idx][0].toString(), 
                color = colorGenerator.next(), pad = reverse ? i == nr - 1 ? !1 : !0 : i > 0 ? !0 : !1, 
                rs = pad ? this.rowSpacing : "0", td1 = $('<td class="jqplot-table-legend" style="text-align:center;padding-top:' + rs + ';"><div><div class="jqplot-table-legend-swatch" style="border-color:' + color + ';"></div></div></td>'), 
                td2 = $('<td class="jqplot-table-legend" style="padding-top:' + rs + ';"></td>'), 
                this.escapeHtml ? td2.text(lt) : td2.html(lt), reverse ? (td2.prependTo(tr), td1.prependTo(tr)) : (td1.appendTo(tr), 
                td2.appendTo(tr)), pad = !0), idx++;
            }
        }
        return this._elem;
    }, $.jqplot.preInitHooks.push(preInit), $.jqplot.FunnelTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    }, $.jqplot.FunnelTickRenderer.prototype = new $.jqplot.AxisTickRenderer(), $.jqplot.FunnelTickRenderer.prototype.constructor = $.jqplot.FunnelTickRenderer;
}(jQuery);
//# sourceMappingURL=jqplot.funnelRenderer.min.js.map