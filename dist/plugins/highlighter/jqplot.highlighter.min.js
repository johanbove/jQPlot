!function($) {
    function draw(plot, neighbor) {
        var hl = plot.plugins.highlighter, s = plot.series[neighbor.seriesIndex], smr = s.markerRenderer, mr = hl.markerRenderer;
        mr.style = smr.style, mr.lineWidth = smr.lineWidth + hl.lineWidthAdjust, mr.size = smr.size + hl.sizeAdjust;
        var rgba = $.jqplot.getColorComponents(smr.color), newrgb = [ rgba[0], rgba[1], rgba[2] ], alpha = rgba[3] >= .6 ? .6 * rgba[3] : rgba[3] * (2 - rgba[3]);
        mr.color = "rgba(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + "," + alpha + ")", 
        mr.init(), mr.draw(s.gridData[neighbor.pointIndex][0], s.gridData[neighbor.pointIndex][1], hl.highlightCanvas._ctx);
    }
    function showTooltip(plot, series, neighbor) {
        var hl = plot.plugins.highlighter, elem = hl._tooltipElem, serieshl = series.highlighter || {}, opts = $.extend(!0, {}, hl, serieshl);
        if (opts.useAxesFormatters) {
            var yf = series._yaxis._ticks[0].formatter;
            opts.yaxis && opts.yaxis.formatter && (yf = opts.yaxis.formatter);
            var yfstr = series._yaxis._ticks[0].formatString;
            opts.yaxis && opts.yaxis.formatString && (yfstr = opts.yaxis.formatString);
            var str, xstr, xfstr = series._xaxis._ticks[0].formatString;
            if (opts.xaxis && opts.xaxis.formatter) {
                var xf = opts.xaxis.formatter;
                xstr = opts.xaxis && opts.xaxis.formatString ? xf(opts.xaxis.formatString, neighbor.data[0]) : xf(xfstr, neighbor.data[0]);
            } else xstr = series._xaxis._ticks[0].formatter(xfstr, neighbor.data[0]);
            for (var ystrs = [], i = 1; i < opts.yvalues + 1; i++) ystrs.push(yf(yfstr, neighbor.data[i]));
            if ("string" == typeof opts.formatString) switch (opts.tooltipAxes) {
              case "both":
              case "xy":
                ystrs.unshift(xstr), ystrs.unshift(opts.formatString), str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                break;

              case "yx":
                ystrs.push(xstr), ystrs.unshift(opts.formatString), str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                break;

              case "x":
                str = $.jqplot.sprintf.apply($.jqplot.sprintf, [ opts.formatString, xstr ]);
                break;

              case "y":
                ystrs.unshift(opts.formatString), str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                break;

              default:
                ystrs.unshift(xstr), ystrs.unshift(opts.formatString), str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
            } else switch (opts.tooltipAxes) {
              case "both":
              case "xy":
                str = xstr;
                for (var i = 0; i < ystrs.length; i++) str += opts.tooltipSeparator + ystrs[i];
                break;

              case "yx":
                str = "";
                for (var i = 0; i < ystrs.length; i++) str += ystrs[i] + opts.tooltipSeparator;
                str += xstr;
                break;

              case "x":
                str = xstr;
                break;

              case "y":
                str = ystrs.join(opts.tooltipSeparator);
                break;

              default:
                str = xstr;
                for (var i = 0; i < ystrs.length; i++) str += opts.tooltipSeparator + ystrs[i];
            }
        } else {
            var str;
            "string" == typeof opts.formatString ? str = $.jqplot.sprintf.apply($.jqplot.sprintf, [ opts.formatString ].concat(neighbor.data)) : "both" == opts.tooltipAxes || "xy" == opts.tooltipAxes ? str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]) : "yx" == opts.tooltipAxes ? str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) : "x" == opts.tooltipAxes ? str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) : "y" == opts.tooltipAxes && (str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]));
        }
        $.isFunction(opts.tooltipContentEditor) && (str = opts.tooltipContentEditor(str, neighbor.seriesIndex, neighbor.pointIndex, plot)), 
        elem.html(str);
        var gridpos = {
            x: neighbor.gridData[0],
            y: neighbor.gridData[1]
        }, ms = 0, fact = .707;
        1 == series.markerRenderer.show && (ms = (series.markerRenderer.size + opts.sizeAdjust) / 2);
        var loc = locations;
        switch (series.fillToZero && series.fill && neighbor.data[1] < 0 && (loc = oppositeLocations), 
        loc[locationIndicies[opts.tooltipLocation]]) {
          case "nw":
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) - opts.tooltipOffset - fact * ms, y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(!0) - fact * ms;
            break;

          case "n":
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) / 2, y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(!0) - ms;
            break;

          case "ne":
            var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms, y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(!0) - fact * ms;
            break;

          case "e":
            var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + ms, y = gridpos.y + plot._gridPadding.top - elem.outerHeight(!0) / 2;
            break;

          case "se":
            var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms, y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
            break;

          case "s":
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) / 2, y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + ms;
            break;

          case "sw":
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) - opts.tooltipOffset - fact * ms, y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
            break;

          case "w":
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) - opts.tooltipOffset - ms, y = gridpos.y + plot._gridPadding.top - elem.outerHeight(!0) / 2;
            break;

          default:
            var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(!0) - opts.tooltipOffset - fact * ms, y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(!0) - fact * ms;
        }
        elem.css("left", x), elem.css("top", y), opts.fadeTooltip ? elem.stop(!0, !0).fadeIn(opts.tooltipFadeSpeed) : elem.show(), 
        elem = null;
    }
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        var hl = plot.plugins.highlighter, c = plot.plugins.cursor;
        if (hl.show) if (null == neighbor && hl.isHighlighting) {
            var evt = jQuery.Event("jqplotHighlighterUnhighlight");
            plot.target.trigger(evt);
            var ctx = hl.highlightCanvas._ctx;
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), hl.fadeTooltip ? hl._tooltipElem.fadeOut(hl.tooltipFadeSpeed) : hl._tooltipElem.hide(), 
            hl.bringSeriesToFront && plot.restorePreviousSeriesOrder(), hl.isHighlighting = !1, 
            hl.currentNeighbor = null, ctx = null;
        } else if (null != neighbor && plot.series[neighbor.seriesIndex].showHighlight && !hl.isHighlighting) {
            var evt = jQuery.Event("jqplotHighlighterHighlight");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY;
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data, plot ];
            plot.target.trigger(evt, ins), hl.isHighlighting = !0, hl.currentNeighbor = neighbor, 
            hl.showMarker && draw(plot, neighbor), !plot.series[neighbor.seriesIndex].show || !hl.showTooltip || c && c._zoom.started || showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor), 
            hl.bringSeriesToFront && plot.moveSeriesToFront(neighbor.seriesIndex);
        } else if (null != neighbor && hl.isHighlighting && hl.currentNeighbor != neighbor && plot.series[neighbor.seriesIndex].showHighlight) {
            var ctx = hl.highlightCanvas._ctx;
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height), hl.isHighlighting = !0, 
            hl.currentNeighbor = neighbor, hl.showMarker && draw(plot, neighbor), !plot.series[neighbor.seriesIndex].show || !hl.showTooltip || c && c._zoom.started || showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor), 
            hl.bringSeriesToFront && plot.moveSeriesToFront(neighbor.seriesIndex);
        }
    }
    $.jqplot.eventListenerHooks.push([ "jqplotMouseMove", handleMove ]), $.jqplot.Highlighter = function(options) {
        this.show = $.jqplot.config.enablePlugins, this.markerRenderer = new $.jqplot.MarkerRenderer({
            shadow: !1
        }), this.showMarker = !0, this.lineWidthAdjust = 2.5, this.sizeAdjust = 5, this.showTooltip = !0, 
        this.tooltipLocation = "nw", this.fadeTooltip = !0, this.tooltipFadeSpeed = "fast", 
        this.tooltipOffset = 2, this.tooltipAxes = "both", this.tooltipSeparator = ", ", 
        this.tooltipContentEditor = null, this.useAxesFormatters = !0, this.tooltipFormatString = "%.5P", 
        this.formatString = null, this.yvalues = 1, this.bringSeriesToFront = !1, this._tooltipElem, 
        this.isHighlighting = !1, this.currentNeighbor = null, $.extend(!0, this, options);
    };
    var locations = [ "nw", "n", "ne", "e", "se", "s", "sw", "w" ], locationIndicies = {
        nw: 0,
        n: 1,
        ne: 2,
        e: 3,
        se: 4,
        s: 5,
        sw: 6,
        w: 7
    }, oppositeLocations = [ "se", "s", "sw", "w", "nw", "n", "ne", "e" ];
    $.jqplot.Highlighter.init = function(target, data, opts) {
        var options = opts || {};
        this.plugins.highlighter = new $.jqplot.Highlighter(options.highlighter);
    }, $.jqplot.Highlighter.parseOptions = function(defaults, options) {
        this.showHighlight = !0;
    }, $.jqplot.Highlighter.postPlotDraw = function() {
        this.plugins.highlighter && this.plugins.highlighter.highlightCanvas && (this.plugins.highlighter.highlightCanvas.resetCanvas(), 
        this.plugins.highlighter.highlightCanvas = null), this.plugins.highlighter && this.plugins.highlighter._tooltipElem && (this.plugins.highlighter._tooltipElem.emptyForce(), 
        this.plugins.highlighter._tooltipElem = null), this.plugins.highlighter.highlightCanvas = new $.jqplot.GenericCanvas(), 
        this.eventCanvas._elem.before(this.plugins.highlighter.highlightCanvas.createElement(this._gridPadding, "jqplot-highlight-canvas", this._plotDimensions, this)), 
        this.plugins.highlighter.highlightCanvas.setContext();
        var elem = document.createElement("div");
        this.plugins.highlighter._tooltipElem = $(elem), elem = null, this.plugins.highlighter._tooltipElem.addClass("jqplot-highlighter-tooltip"), 
        this.plugins.highlighter._tooltipElem.css({
            position: "absolute",
            display: "none"
        }), this.eventCanvas._elem.before(this.plugins.highlighter._tooltipElem);
    }, $.jqplot.preInitHooks.push($.jqplot.Highlighter.init), $.jqplot.preParseSeriesOptionsHooks.push($.jqplot.Highlighter.parseOptions), 
    $.jqplot.postDrawHooks.push($.jqplot.Highlighter.postPlotDraw);
}(jQuery);
//# sourceMappingURL=jqplot.highlighter.min.js.map