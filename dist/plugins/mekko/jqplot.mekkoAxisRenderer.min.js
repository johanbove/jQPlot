!function($) {
    $.jqplot.MekkoAxisRenderer = function() {}, $.jqplot.MekkoAxisRenderer.prototype.init = function(options) {
        this.tickMode, this.barLabelRenderer = $.jqplot.AxisLabelRenderer, this.barLabels = this.barLabels || [], 
        this.barLabelOptions = {}, this.tickOptions = $.extend(!0, {
            showGridline: !1
        }, this.tickOptions), this._barLabels = [], $.extend(!0, this, options), "yaxis" == this.name && (this.tickOptions.formatString = this.tickOptions.formatString || "%d%");
        var db = this._dataBounds;
        if (db.min = 0, "yaxis" == this.name || "y2axis" == this.name) db.max = 100, this.tickMode = "even"; else if ("xaxis" == this.name) {
            this.tickMode = null == this.tickMode ? "bar" : this.tickMode;
            for (var i = 0; i < this._series.length; i++) db.max += this._series[i]._sumy;
        } else if ("x2axis" == this.name) {
            this.tickMode = null == this.tickMode ? "even" : this.tickMode;
            for (var i = 0; i < this._series.length; i++) db.max += this._series[i]._sumy;
        }
    }, $.jqplot.MekkoAxisRenderer.prototype.draw = function(ctx, plot) {
        if (this.show) {
            this.renderer.createTicks.call(this);
            var elem = document.createElement("div");
            this._elem = $(elem), this._elem.addClass("jqplot-axis jqplot-" + this.name), this._elem.css("position", "absolute"), 
            elem = null, "xaxis" == this.name || "x2axis" == this.name ? this._elem.width(this._plotDimensions.width) : this._elem.height(this._plotDimensions.height), 
            this.labelOptions.axis = this.name, this._label = new this.labelRenderer(this.labelOptions), 
            this._label.show && this._elem.append(this._label.draw(ctx));
            var t, tick, elem;
            if (this.showTicks) {
                t = this._ticks;
                for (var i = 0; i < t.length; i++) tick = t[i], !tick.showLabel || tick.isMinorTick && !this.showMinorTicks || this._elem.append(tick.draw(ctx));
            }
            for (i = 0; i < this.barLabels.length; i++) if (this.barLabelOptions.axis = this.name, 
            this.barLabelOptions.label = this.barLabels[i], this._barLabels.push(new this.barLabelRenderer(this.barLabelOptions)), 
            "bar" != this.tickMode && (this._barLabels[i].show = !1), this._barLabels[i].show) {
                var elem = this._barLabels[i].draw(ctx, plot);
                elem.removeClass("jqplot-" + this.name + "-label"), elem.addClass("jqplot-" + this.name + "-tick"), 
                elem.addClass("jqplot-mekko-barLabel"), elem.appendTo(this._elem), elem = null;
            }
        }
        return this._elem;
    }, $.jqplot.MekkoAxisRenderer.prototype.reset = function() {
        this.min = this._min, this.max = this._max, this.tickInterval = this._tickInterval, 
        this.numberTicks = this._numberTicks;
    }, $.jqplot.MekkoAxisRenderer.prototype.set = function() {
        var temp, dim = 0, w = 0, h = 0, lshow = null == this._label ? !1 : this._label.show;
        if (this.show && this.showTicks) {
            for (var t = this._ticks, i = 0; i < t.length; i++) {
                var tick = t[i];
                !tick.showLabel || tick.isMinorTick && !this.showMinorTicks || (temp = "xaxis" == this.name || "x2axis" == this.name ? tick._elem.outerHeight(!0) : tick._elem.outerWidth(!0), 
                temp > dim && (dim = temp));
            }
            lshow && (w = this._label._elem.outerWidth(!0), h = this._label._elem.outerHeight(!0)), 
            "xaxis" == this.name ? (dim += h, this._elem.css({
                height: dim + "px",
                left: "0px",
                bottom: "0px"
            })) : "x2axis" == this.name ? (dim += h, this._elem.css({
                height: dim + "px",
                left: "0px",
                top: "0px"
            })) : "yaxis" == this.name ? (dim += w, this._elem.css({
                width: dim + "px",
                left: "0px",
                top: "0px"
            }), lshow && this._label.constructor == $.jqplot.AxisLabelRenderer && this._label._elem.css("width", w + "px")) : (dim += w, 
            this._elem.css({
                width: dim + "px",
                right: "0px",
                top: "0px"
            }), lshow && this._label.constructor == $.jqplot.AxisLabelRenderer && this._label._elem.css("width", w + "px"));
        }
    }, $.jqplot.MekkoAxisRenderer.prototype.createTicks = function() {
        var dim, min, max, t, tt, i, userTicks = (this._ticks, this.ticks), name = this.name, db = this._dataBounds;
        if (userTicks.length) {
            for (i = 0; i < userTicks.length; i++) {
                var ut = userTicks[i], t = new this.tickRenderer(this.tickOptions);
                ut.constructor == Array ? (t.value = ut[0], t.label = ut[1], this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, 
                t.showMark = !1), t.setTick(ut[0], this.name), this._ticks.push(t)) : (t.value = ut, 
                this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, t.showMark = !1), 
                t.setTick(ut, this.name), this._ticks.push(t));
            }
            this.numberTicks = userTicks.length, this.min = this._ticks[0].value, this.max = this._ticks[this.numberTicks - 1].value, 
            this.tickInterval = (this.max - this.min) / (this.numberTicks - 1);
        } else {
            if (dim = "xaxis" == name || "x2axis" == name ? this._plotDimensions.width : this._plotDimensions.height, 
            null != this.min && null != this.max && null != this.numberTicks && (this.tickInterval = null), 
            min = null != this.min ? this.min : db.min, max = null != this.max ? this.max : db.max, 
            min == max) {
                var adj = .05;
                min > 0 && (adj = Math.max(Math.log(min) / Math.LN10, .05)), min -= adj, max += adj;
            }
            var temp, prev, curr, range = max - min, ynumticks = [ 3, 5, 6, 11, 21 ];
            if ("yaxis" == this.name || "y2axis" == this.name) {
                if (this.min = 0, this.max = 100, this.numberTicks) this.tickInterval = range / (this.numberTicks - 1); else if (this.tickInterval) this.numberTicks = 3 + Math.ceil(range / this.tickInterval); else {
                    for (temp = 2 + Math.ceil((dim - (this.tickSpacing - 1)) / this.tickSpacing), i = 0; i < ynumticks.length; i++) {
                        if (curr = temp / ynumticks[i], 1 == curr) {
                            this.numberTicks = ynumticks[i];
                            break;
                        }
                        if (curr > 1) prev = curr; else {
                            if (1 > curr) {
                                if (Math.abs(prev - 1) < Math.abs(curr - 1)) {
                                    this.numberTicks = ynumticks[i - 1];
                                    break;
                                }
                                this.numberTicks = ynumticks[i];
                                break;
                            }
                            i == ynumticks.length - 1 && (this.numberTicks = ynumticks[i]);
                        }
                    }
                    this.tickInterval = range / (this.numberTicks - 1);
                }
                for (var i = 0; i < this.numberTicks; i++) tt = this.min + i * this.tickInterval, 
                t = new this.tickRenderer(this.tickOptions), this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, 
                t.showMark = !1), t.setTick(tt, this.name), this._ticks.push(t);
            } else if ("bar" == this.tickMode) {
                for (this.min = 0, this.numberTicks = this._series.length + 1, t = new this.tickRenderer(this.tickOptions), 
                this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, t.showMark = !1), 
                t.setTick(0, this.name), this._ticks.push(t), temp = 0, i = 1; i < this.numberTicks; i++) temp += this._series[i - 1]._sumy, 
                t = new this.tickRenderer(this.tickOptions), this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, 
                t.showMark = !1), t.setTick(temp, this.name), this._ticks.push(t);
                this.max = this.max || temp, this.max > temp && (t = new this.tickRenderer(this.tickOptions), 
                this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, t.showMark = !1), 
                t.setTick(this.max, this.name), this._ticks.push(t));
            } else if ("even" == this.tickMode) {
                this.min = 0, this.max = this.max || db.max;
                var nt = 2 + Math.ceil((dim - (this.tickSpacing - 1)) / this.tickSpacing);
                for (range = this.max - this.min, this.numberTicks = nt, this.tickInterval = range / (this.numberTicks - 1), 
                i = 0; i < this.numberTicks; i++) tt = this.min + i * this.tickInterval, t = new this.tickRenderer(this.tickOptions), 
                this.showTicks ? this.showTickMarks || (t.showMark = !1) : (t.showLabel = !1, t.showMark = !1), 
                t.setTick(tt, this.name), this._ticks.push(t);
            }
        }
    }, $.jqplot.MekkoAxisRenderer.prototype.pack = function(pos, offsets) {
        var ticks = this._ticks, max = this.max, min = this.min, offmax = offsets.max, offmin = offsets.min, lshow = null == this._label ? !1 : this._label.show;
        for (var p in pos) this._elem.css(p, pos[p]);
        this._offsets = offsets;
        var pixellength = offmax - offmin, unitlength = max - min;
        if (this.p2u = function(p) {
            return (p - offmin) * unitlength / pixellength + min;
        }, this.u2p = function(u) {
            return (u - min) * pixellength / unitlength + offmin;
        }, "xaxis" == this.name || "x2axis" == this.name ? (this.series_u2p = function(u) {
            return (u - min) * pixellength / unitlength;
        }, this.series_p2u = function(p) {
            return p * unitlength / pixellength + min;
        }) : (this.series_u2p = function(u) {
            return (u - max) * pixellength / unitlength;
        }, this.series_p2u = function(p) {
            return p * unitlength / pixellength + max;
        }), this.show) if ("xaxis" == this.name || "x2axis" == this.name) {
            for (var i = 0; i < ticks.length; i++) {
                var t = ticks[i];
                if (t.show && t.showLabel) {
                    var shim;
                    if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                        var temp = "xaxis" == this.name ? 1 : -1;
                        switch (t.labelPosition) {
                          case "auto":
                            shim = temp * t.angle < 0 ? -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2 : -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                            break;

                          case "end":
                            shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                            break;

                          case "start":
                            shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                            break;

                          case "middle":
                            shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                            break;

                          default:
                            shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                        }
                    } else shim = -t.getWidth() / 2;
                    var val = this.u2p(t.value) + shim + "px";
                    t._elem.css("left", val), t.pack();
                }
            }
            var w;
            lshow && (w = this._label._elem.outerWidth(!0), this._label._elem.css("left", offmin + pixellength / 2 - w / 2 + "px"), 
            "xaxis" == this.name ? this._label._elem.css("bottom", "0px") : this._label._elem.css("top", "0px"), 
            this._label.pack());
            for (var b, l, r, i = 0; i < this.barLabels.length; i++) b = this._barLabels[i], 
            b.show && (w = b.getWidth(), l = this._ticks[i].getLeft() + this._ticks[i].getWidth(), 
            r = this._ticks[i + 1].getLeft(), b._elem.css("left", (r + l - w) / 2 + "px"), b._elem.css("top", this._ticks[i]._elem.css("top")), 
            b.pack());
        } else {
            for (var i = 0; i < ticks.length; i++) {
                var t = ticks[i];
                if (t.show && t.showLabel) {
                    var shim;
                    if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                        var temp = "yaxis" == this.name ? 1 : -1;
                        switch (t.labelPosition) {
                          case "auto":
                          case "end":
                            shim = temp * t.angle < 0 ? -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2 : -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                            break;

                          case "start":
                            shim = t.angle > 0 ? -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2 : -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                            break;

                          case "middle":
                            shim = -t.getHeight() / 2;
                            break;

                          default:
                            shim = -t.getHeight() / 2;
                        }
                    } else shim = -t.getHeight() / 2;
                    var val = this.u2p(t.value) + shim + "px";
                    t._elem.css("top", val), t.pack();
                }
            }
            if (lshow) {
                var h = this._label._elem.outerHeight(!0);
                this._label._elem.css("top", offmax - pixellength / 2 - h / 2 + "px"), "yaxis" == this.name ? this._label._elem.css("left", "0px") : this._label._elem.css("right", "0px"), 
                this._label.pack();
            }
        }
    };
}(jQuery);
//# sourceMappingURL=jqplot.mekkoAxisRenderer.min.js.map