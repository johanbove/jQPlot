function getHue(R, G, B) {
    return 180 / Math.PI * Math.atan2(Math.sqrt(3) * (G - B), 2 * R - G - B);
}

function RGBToHSL(color) {
    var R = color[0] / 255, G = color[1] / 255, B = color[2] / 255, Min = Math.min(R, G, B), Max = Math.max(R, G, B), del_Max = Max - Min, L = (Max + Min) / 2;
    if (0 == del_Max) H = 0, S = 0; else {
        .5 > L ? S = del_Max / (Max + Min) : S = del_Max / (2 - Max - Min);
        var del_R = ((Max - R) / 6 + del_Max / 2) / del_Max, del_G = ((Max - G) / 6 + del_Max / 2) / del_Max, del_B = ((Max - B) / 6 + del_Max / 2) / del_Max;
        if (R == Max) var H = del_B - del_G; else if (G == Max) var H = 1 / 3 + del_R - del_B; else if (B == Max) var H = 2 / 3 + del_G - del_R;
        0 > H && (H += 1), H > 1 && (H -= 1);
    }
    return [ H, S, L ];
}

function HSLtoRGB(hsl) {
    var H = hsl[0], S = hsl[1], L = hsl[2];
    if (0 == S) var R = 255 * L, G = 255 * L, B = 255 * L; else {
        if (.5 > L) var var_2 = L * (1 + S); else var var_2 = L + S - S * L;
        var var_1 = 2 * L - var_2, R = Math.floor(255 * Hue_2_RGB(var_1, var_2, H + 1 / 3)), G = Math.floor(255 * Hue_2_RGB(var_1, var_2, H)), B = Math.floor(255 * Hue_2_RGB(var_1, var_2, H - 1 / 3));
    }
    return [ R, G, B ];
}

function Hue_2_RGB(v1, v2, vH) {
    return 0 > vH && (vH += 1), vH > 1 && (vH -= 1), 1 > 6 * vH ? v1 + 6 * (v2 - v1) * vH : 1 > 2 * vH ? v2 : 2 > 3 * vH ? v1 + (v2 - v1) * (2 / 3 - vH) * 6 : v1;
}

function hexToRGB(h) {
    return "#" == h.charAt(0) && (h = h.substring(1, 7)), [ parseInt(h.substring(0, 2), 16), parseInt(h.substring(2, 4), 16), parseInt(h.substring(4, 6), 16) ];
}

function moveColor(color, degrees) {
    var hsl = RGBToHSL(color);
    return hsl[0] = (360 * hsl[0] + degrees) % 360 / 360, HSLtoRGB(hsl);
}

function rgbToHex(color) {
    return toHex(color[0]) + toHex(color[1]) + toHex(color[2]);
}

function toHex(n) {
    return n = parseInt(n, 10), isNaN(n) ? "00" : (n = Math.max(0, Math.min(n, 255)), 
    "0123456789ABCDEF".charAt((n - n % 16) / 16) + "0123456789ABCDEF".charAt(n % 16));
}

!function($) {
    function calcRadiusAdjustment(ang) {
        return Math.sin((ang - (ang - Math.PI) / 8 / Math.PI) / 2);
    }
    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth) {
        var rprime = 0, ang = ang2 - ang1, absang = Math.abs(ang), sm = sliceMargin;
        return 0 == fill && (sm += lineWidth), sm > 0 && absang > .01 && 6.282 > absang && (rprime = parseFloat(sm) / 2 / calcRadiusAdjustment(ang)), 
        rprime;
    }
    function preInit(target, data, options) {
        options = options || {}, options.axesDefaults = options.axesDefaults || {}, options.legend = options.legend || {}, 
        options.seriesDefaults = options.seriesDefaults || {};
        var setopts = !1;
        if (options.seriesDefaults.renderer == $.jqplot.PieRenderer) setopts = !0; else if (options.series) for (var i = 0; i < options.series.length; i++) options.series[i].renderer == $.jqplot.PieRenderer && (setopts = !0);
        setopts && (options.axesDefaults.renderer = $.jqplot.PieAxisRenderer, options.legend.renderer = $.jqplot.PieLegendRenderer, 
        options.legend.preDraw = !0, options.seriesDefaults.pointLabels = {
            show: !1
        });
    }
    function postInit(target, data, options) {
        for (var i = 0; i < this.series.length; i++) this.series[i].renderer.constructor == $.jqplot.PieRenderer && this.series[i].highlightMouseOver && (this.series[i].highlightMouseDown = !1);
    }
    function postParseOptions(options) {
        for (var i = 0; i < this.series.length; i++) this.series[i].seriesColors = this.seriesColors, 
        this.series[i].colorGenerator = $.jqplot.colorGenerator;
    }
    function highlight(plot, sidx, pidx) {
        var s = plot.series[sidx], canvas = plot.plugins.pieRenderer.highlightCanvas;
        if (canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height), 
        s._highlightedPoint = pidx, plot.plugins.pieRenderer.highlightedSeriesIndex = sidx, 
        0 == s.highlightColors.length) for (var i = 0; i < s.seriesColors.length; i++) {
            for (var rgba = $.jqplot.getColorComponents(this.seriesColors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 570 ? .8 * newrgb[j] : newrgb[j] + .3 * (255 - newrgb[j]), 
            newrgb[j] = parseInt(newrgb[j], 10);
            s.highlightColors.push("rgb(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + ")");
        }
        s.highlightColorGenerator = new $.jqplot.ColorGenerator(s.highlightColors), s.renderer.drawSlice.call(s, canvas._ctx, s._sliceAngles[pidx][0], s._sliceAngles[pidx][1], s.highlightColorGenerator.get(pidx), !1), 
        s.highlightLabelSliceRenderer.highlight(pidx);
    }
    function unhighlight(plot) {
        var canvas = plot.plugins.pieRenderer.highlightCanvas;
        canvas._ctx.clearRect(0, 0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i = 0; i < plot.series.length; i++) plot.series[i]._highlightedPoint = null;
        plot.plugins.pieRenderer.highlightedSeriesIndex = null, plot.target.trigger("jqplotDataUnhighlight");
        for (var i = plot.series.length - 1; i >= 0; i--) plot.series[i].highlightLabelSliceRenderer.unhighlight();
    }
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt1 = jQuery.Event("jqplotDataMouseOver");
            if (evt1.pageX = ev.pageX, evt1.pageY = ev.pageY, plot.target.trigger(evt1, ins), 
            !plot.series[ins[0]].highlightMouseOver || ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint) plot.series[ins[0]].highlightLabelSliceRenderer.move(ins[1], evt1.pageX, evt1.pageY); else {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
                for (var i = plot.series.length - 1; i >= 0; i--) plot.series[i].highlightLabelSliceRenderer.unhighlight();
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ];
            if (plot.series[ins[0]].highlightMouseDown && (ins[0] != plot.plugins.pieRenderer.highlightedSeriesIndex || ins[1] != plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event("jqplotDataHighlight");
                evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins), 
                highlight(plot, ins[0], ins[1]);
            }
        } else null == neighbor && unhighlight(plot);
    }
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
        null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
    }
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], evt = jQuery.Event("jqplotDataClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ], idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
            null != idx && plot.series[idx].highlightMouseDown && unhighlight(plot);
            var evt = jQuery.Event("jqplotDataRightClick");
            evt.which = ev.which, evt.pageX = ev.pageX, evt.pageY = ev.pageY, plot.target.trigger(evt, ins);
        }
    }
    function postPlotDraw() {
        this.highlightLabelSliceRenderer = new $.jqplot.PieHighlighterLabelSliceRenderer(this), 
        this.plugins.pieRenderer && this.plugins.pieRenderer.highlightCanvas && (this.plugins.pieRenderer.highlightCanvas.resetCanvas(), 
        this.plugins.pieRenderer.highlightCanvas = null), this.plugins.pieRenderer = {
            highlightedSeriesIndex: null
        }, this.plugins.pieRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        var labels = $(this.targetId + " .jqplot-data-label");
        labels.length ? $(labels[0]).before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-pieRenderer-highlight-canvas", this._plotDimensions, this)) : this.eventCanvas._elem.before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, "jqplot-pieRenderer-highlight-canvas", this._plotDimensions, this));
        this.plugins.pieRenderer.highlightCanvas.setContext();
    }
    $.jqplot.PieRenderer = function() {
        $.jqplot.LineRenderer.call(this);
    }, $.jqplot.PieRenderer.prototype = new $.jqplot.LineRenderer(), $.jqplot.PieRenderer.prototype.constructor = $.jqplot.PieRenderer, 
    $.jqplot.PieRenderer.prototype.init = function(options, plot) {
        if (this.diameter = null, this.padding = 20, this.sliceMargin = 0, this.fill = !0, 
        this.shadowOffset = 2, this.shadowAlpha = .07, this.shadowDepth = 5, this.highlightMouseOver = !0, 
        this.highlightMouseDown = !1, this.highlightColors = [], this.dataLabels = "percent", 
        this.showDataLabels = !1, this.dataLabelFormatString = null, this.dataLabelThreshold = 3, 
        this.dataLabelPositionFactor = .52, this.dataLabelNudge = 2, this.dataLabelCenterOn = !0, 
        1 == this.showDataCategoryOnHover, this.startAngle = 0, this.tickRenderer = $.jqplot.PieTickRenderer, 
        this._drawData = !0, this._type = "pie", options.highlightMouseDown && null == options.highlightMouseOver && (options.highlightMouseOver = !1), 
        $.extend(!0, this, options), this.sliceMargin < 0 && (this.sliceMargin = 0), this._diameter = null, 
        this._radius = null, this._sliceAngles = [], this._highlightedPoint = null, this.highlightLabelSliceRenderer = new $.jqplot.PieHighlighterLabelSliceRenderer(this), 
        this.labelsSlices = [], 0 == this.highlightColors.length) for (var i = 0; i < this.seriesColors.length; i++) {
            for (var rgba = $.jqplot.getColorComponents(this.seriesColors[i]), newrgb = [ rgba[0], rgba[1], rgba[2] ], sum = newrgb[0] + newrgb[1] + newrgb[2], j = 0; 3 > j; j++) newrgb[j] = sum > 570 ? .8 * newrgb[j] : newrgb[j] + .3 * (255 - newrgb[j]), 
            newrgb[j] = parseInt(newrgb[j], 10);
            this.highlightColors.push("rgb(" + newrgb[0] + "," + newrgb[1] + "," + newrgb[2] + ")");
        }
        this.highlightColorGenerator = new $.jqplot.ColorGenerator(this.highlightColors), 
        plot.postParseOptionsHooks.addOnce(postParseOptions), plot.postInitHooks.addOnce(postInit), 
        plot.eventListenerHooks.addOnce("jqplotMouseMove", handleMove), plot.eventListenerHooks.addOnce("jqplotMouseDown", handleMouseDown), 
        plot.eventListenerHooks.addOnce("jqplotMouseUp", handleMouseUp), plot.eventListenerHooks.addOnce("jqplotClick", handleClick), 
        plot.eventListenerHooks.addOnce("jqplotRightClick", handleRightClick), plot.postDrawHooks.addOnce(postPlotDraw);
    }, $.jqplot.PieRenderer.prototype.setGridData = function(plot) {
        var stack = [], td = [], tot = (this.startAngle / 180 * Math.PI, 0);
        this._drawData = !1;
        for (var i = 0; i < this.data.length; i++) 0 != this.data[i][1] && (this._drawData = !0), 
        stack.push(this.data[i][1]), td.push([ this.data[i][0] ]), i > 0 && (stack[i] += stack[i - 1]), 
        tot += this.data[i][1];
        for (var fact = 2 * Math.PI / stack[stack.length - 1], i = 0; i < stack.length; i++) td[i][1] = stack[i] * fact, 
        td[i][2] = this.data[i][1] / tot;
        this.gridData = td;
    }, $.jqplot.PieRenderer.prototype.makeGridData = function(data, plot) {
        var stack = [], td = [], tot = 0;
        this.startAngle / 180 * Math.PI;
        this._drawData = !1;
        for (var i = 0; i < data.length; i++) 0 != this.data[i][1] && (this._drawData = !0), 
        stack.push(data[i][1]), td.push([ data[i][0] ]), i > 0 && (stack[i] += stack[i - 1]), 
        tot += data[i][1];
        for (var fact = 2 * Math.PI / stack[stack.length - 1], i = 0; i < stack.length; i++) td[i][1] = stack[i] * fact, 
        td[i][2] = data[i][1] / tot;
        return td;
    }, $.jqplot.PieRenderer.prototype.drawSlice = function(ctx, ang1, ang2, color, isShadow) {
        function doDraw(rad) {
            ang2 > 6.282 + this.startAngle && (ang2 = 6.282 + this.startAngle, ang1 > ang2 && (ang1 = 6.281 + this.startAngle)), 
            ang1 >= ang2 || (ctx.beginPath(), ctx.fillStyle = color, ctx.strokeStyle = color, 
            ctx.lineWidth = lineWidth, ctx.arc(0, 0, rad, ang1, ang2, !1), ctx.lineTo(0, 0), 
            ctx.closePath(), fill ? ctx.fill() : ctx.stroke());
        }
        if (this._drawData) {
            var r = this._radius, fill = this.fill, lineWidth = this.lineWidth, sm = this.sliceMargin;
            0 == this.fill && (sm += this.lineWidth), ctx.save(), ctx.translate(this._center[0], this._center[1]);
            var rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth), transx = rprime * Math.cos((ang1 + ang2) / 2), transy = rprime * Math.sin((ang1 + ang2) / 2);
            if (ang2 - ang1 <= Math.PI ? r -= rprime : r += rprime, ctx.translate(transx, transy), 
            isShadow) {
                for (var i = 0, l = this.shadowDepth; l > i; i++) ctx.save(), ctx.translate(this.shadowOffset * Math.cos(this.shadowAngle / 180 * Math.PI), this.shadowOffset * Math.sin(this.shadowAngle / 180 * Math.PI)), 
                doDraw(r);
                for (var i = 0, l = this.shadowDepth; l > i; i++) ctx.restore();
            } else doDraw(r);
            ctx.restore();
        }
    }, $.jqplot.PieHighlighterLabelSliceRenderer = function(serie) {
        this.serie = serie;
    }, $.jqplot.PieHighlighterLabelSliceRenderer.prototype.highlight = function(pid) {
        this.serie.labelsSlices[pid] && this.serie.labelsSlices[pid].removeClass("hidden");
    }, $.jqplot.PieHighlighterLabelSliceRenderer.prototype.unhighlight = function(pid) {
        for (var i = this.serie.labelsSlices.length - 1; i >= 0; i--) this.serie.labelsSlices && this.serie.labelsSlices[i].addClass("hidden");
    }, $.jqplot.PieHighlighterLabelSliceRenderer.prototype.move = function(pid, x, y) {
        if (this.serie.labelsSlices[pid]) {
            var pointLblPosition = this.serie.labelsSlices[pid].position(), tooltip = this.serie.labelsSlices[pid].find(".tooltip"), topPos = y - pointLblPosition.top - (2 * this.serie.labelsSlices[pid].height() + tooltip.height()), leftPos = x - pointLblPosition.left - this.serie.labelsSlices[pid].width() - tooltip.width() / 2;
            tooltip.css({
                left: leftPos,
                top: topPos
            });
        }
    }, $.jqplot.PieRenderer.prototype.draw = function(ctx, gd, options, plot) {
        this.labelsSlices = [];
        var i, opts = void 0 != options ? options : {}, offx = 0, offy = 0, trans = 1, colorGenerator = new $.jqplot.ColorGenerator(this.seriesColors);
        if (options.legendInfo && "insideGrid" == options.legendInfo.placement) {
            var li = options.legendInfo;
            switch (li.location) {
              case "nw":
                offx = li.width + li.xoffset;
                break;

              case "w":
                offx = li.width + li.xoffset;
                break;

              case "sw":
                offx = li.width + li.xoffset;
                break;

              case "ne":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "e":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "se":
                offx = li.width + li.xoffset, trans = -1;
                break;

              case "n":
                offy = li.height + li.yoffset;
                break;

              case "s":
                offy = li.height + li.yoffset, trans = -1;
            }
        }
        var cw = (void 0 != opts.shadow ? opts.shadow : this.shadow, void 0 != opts.fill ? opts.fill : this.fill, 
        ctx.canvas.width), ch = ctx.canvas.height, w = cw - offx - 2 * this.padding, h = ch - offy - 2 * this.padding, mindim = Math.min(w, h), d = mindim;
        this._sliceAngles = [];
        var sm = this.sliceMargin;
        0 == this.fill && (sm += this.lineWidth);
        for (var rprime, ang1, ang2, shadowColor, maxrprime = 0, sa = this.startAngle / 180 * Math.PI, i = 0, l = gd.length; l > i; i++) ang1 = 0 == i ? sa : gd[i - 1][1] + sa, 
        ang2 = gd[i][1] + sa, this._sliceAngles.push([ ang1, ang2 ]), rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth), 
        Math.abs(ang2 - ang1) > Math.PI && (maxrprime = Math.max(rprime, maxrprime));
        if (null != this.diameter && this.diameter > 0 ? this._diameter = this.diameter - 2 * maxrprime : this._diameter = d - 2 * maxrprime, 
        this._diameter < 6) return void $.jqplot.log("Diameter of pie too small, not rendering.");
        this._radius = this._diameter / 2;
        if (this._center = [ (cw - trans * offx) / 2 + trans * offx + maxrprime * Math.cos(sa), (ch - trans * offy) / 2 + trans * offy + maxrprime * Math.sin(sa) ], 
        this.shadow) for (var i = 0, l = gd.length; l > i; i++) shadowColor = "rgba(0,0,0," + this.shadowAlpha + ")", 
        this.renderer.drawSlice.call(this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], shadowColor, !0);
        for (var i = 0; i < gd.length; i++) {
            var sliceColor = colorGenerator.next();
            if ("complementary" == this.labelColor) var labelColor = "#" + rgbToHex(moveColor(hexToRGB(sliceColor), 180)); else if ("" != opts.labelColor) var labelColor = this.labelColor; else var labelColor = "#FFFFFF";
            if (this.renderer.drawSlice.call(this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], sliceColor, !1), 
            this.showDataLabels && 100 * gd[i][2] >= this.dataLabelThreshold) {
                var fstr, label, avgang = (this._sliceAngles[i][0] + this._sliceAngles[i][1]) / 2;
                "label" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%s", label = $.jqplot.sprintf(fstr, gd[i][0])) : "value" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d", 
                label = $.jqplot.sprintf(fstr, this.data[i][1])) : "percent" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d%%", 
                label = $.jqplot.sprintf(fstr, 100 * gd[i][2])) : this.dataLabels.constructor == Array && (fstr = this.dataLabelFormatString || "%s", 
                label = $.jqplot.sprintf(fstr, this.dataLabels[i]));
                var labelelem, fact = this._radius * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge, x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left, y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;
                if (this.showDataCategoryOnHover) {
                    var fstrTooltip = this.dataLabelFormatString || "%s";
                    labelTooltip = $.jqplot.sprintf(fstrTooltip, gd[i][0]);
                    var tooltip = '<span class="tooltip" style="position:absolute;color:' + labelColor + ';">' + labelTooltip + "</span>", txt = '<span class="jqplot-pie-series jqplot-data-label" style="position:absolute;color:' + labelColor + ';">' + label + tooltip + NaN, labelelem = $(txt).insertBefore(plot.eventCanvas._elem);
                    this.labelsSlices.push(labelelem), labelelem.addClass("jqplot-pie-show-hover hidden");
                } else labelelem = $('<div class="jqplot-pie-series jqplot-data-label" style="position:absolute;color:' + labelColor + ';">' + label + "</div>").insertBefore(plot.eventCanvas._elem);
                this.dataLabelCenterOn ? (x -= labelelem.width() / 2, y -= labelelem.height() / 2) : (x -= labelelem.width() * Math.sin(avgang / 2), 
                y -= labelelem.height() / 2), x = Math.round(x), y = Math.round(y), labelelem.css({
                    left: x,
                    top: y
                });
            } else if (this.showDataCategoryOnHover && 100 * gd[i][2] >= this.dataLabelThreshold) {
                var fstr, label, avgang = (this._sliceAngles[i][0] + this._sliceAngles[i][1]) / 2;
                "label" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%s", label = $.jqplot.sprintf(fstr, gd[i][0])) : "value" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d", 
                label = $.jqplot.sprintf(fstr, this.data[i][1])) : "percent" == this.dataLabels ? (fstr = this.dataLabelFormatString || "%d%%", 
                label = $.jqplot.sprintf(fstr, 100 * gd[i][2])) : this.dataLabels.constructor == Array && (fstr = this.dataLabelFormatString || "%s", 
                label = $.jqplot.sprintf(fstr, this.dataLabels[i]));
                var labelelem, fact = this._radius * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge, x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left, y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top, fstrTooltip = this.dataLabelFormatString || "%s";
                labelTooltip = $.jqplot.sprintf(fstrTooltip, gd[i][0]);
                var tooltip = '<span class="tooltip" style="position:absolute;color:' + labelColor + ';">' + labelTooltip + "</span>", txt = '<span class="jqplot-pie-series jqplot-data-label" style="position:absolute;color:' + labelColor + ';">' + label + tooltip + NaN, labelelem = $(txt).insertBefore(plot.eventCanvas._elem);
                this.labelsSlices.push(labelelem), labelelem.addClass("jqplot-pie-show-hover hidden");
            }
        }
    }, $.jqplot.PieAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.PieAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.PieAxisRenderer.prototype.constructor = $.jqplot.PieAxisRenderer, 
    $.jqplot.PieAxisRenderer.prototype.init = function(options) {
        this.tickRenderer = $.jqplot.PieTickRenderer, $.extend(!0, this, options), this._dataBounds = {
            min: 0,
            max: 100
        }, this.min = 0, this.max = 100, this.showTicks = !1, this.ticks = [], this.showMark = !1, 
        this.show = !1;
    }, $.jqplot.PieLegendRenderer = function() {
        $.jqplot.TableLegendRenderer.call(this);
    }, $.jqplot.PieLegendRenderer.prototype = new $.jqplot.TableLegendRenderer(), $.jqplot.PieLegendRenderer.prototype.constructor = $.jqplot.PieLegendRenderer, 
    $.jqplot.PieLegendRenderer.prototype.init = function(options) {
        this.numberRows = null, this.numberColumns = null, $.extend(!0, this, options);
    }, $.jqplot.PieLegendRenderer.prototype.draw = function() {
        if (this.show) {
            var series = this._series;
            this._elem = $(document.createElement("table")), this._elem.addClass("jqplot-table-legend");
            var ss = {
                position: "absolute"
            };
            this.background && (ss.background = this.background), this.border && (ss.border = this.border), 
            this.fontSize && (ss.fontSize = this.fontSize), this.fontFamily && (ss.fontFamily = this.fontFamily), 
            this.textColor && (ss.textColor = this.textColor), null != this.marginTop && (ss.marginTop = this.marginTop), 
            null != this.marginBottom && (ss.marginBottom = this.marginBottom), null != this.marginLeft && (ss.marginLeft = this.marginLeft), 
            null != this.marginRight && (ss.marginRight = this.marginRight), this._elem.css(ss);
            var nr, nc, pad = !1, reverse = !1, s = series[0], colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);
            if (s.show) {
                var pd = s.data;
                this.numberRows ? (nr = this.numberRows, nc = this.numberColumns ? this.numberColumns : Math.ceil(pd.length / nr)) : this.numberColumns ? (nc = this.numberColumns, 
                nr = Math.ceil(pd.length / this.numberColumns)) : (nr = pd.length, nc = 1);
                var i, j, tr, td1, td2, lt, rs, color, div0, div1, idx = 0;
                for (i = 0; nr > i; i++) for (tr = $(document.createElement("tr")), tr.addClass("jqplot-table-legend"), 
                reverse ? tr.prependTo(this._elem) : tr.appendTo(this._elem), j = 0; nc > j; j++) idx < pd.length && (lt = this.labels[idx] || pd[idx][0].toString(), 
                color = colorGenerator.next(), pad = reverse ? i == nr - 1 ? !1 : !0 : i > 0 ? !0 : !1, 
                rs = pad ? this.rowSpacing : "0", td1 = $(document.createElement("td")), td1.addClass("jqplot-table-legend jqplot-table-legend-swatch"), 
                td1.css({
                    textAlign: "center",
                    paddingTop: rs
                }), div0 = $(document.createElement("div")), div0.addClass("jqplot-table-legend-swatch-outline"), 
                div1 = $(document.createElement("div")), div1.addClass("jqplot-table-legend-swatch"), 
                div1.css({
                    backgroundColor: color,
                    borderColor: color
                }), td1.append(div0.append(div1)), td2 = $(document.createElement("td")), td2.addClass("jqplot-table-legend jqplot-table-legend-label"), 
                td2.css("paddingTop", rs), this.escapeHtml ? td2.text(lt) : td2.html(lt), reverse ? (td2.prependTo(tr), 
                td1.prependTo(tr)) : (td1.appendTo(tr), td2.appendTo(tr)), pad = !0), idx++;
            }
        }
        return this._elem;
    }, $.jqplot.PieRenderer.prototype.handleMove = function(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [ neighbor.seriesIndex, neighbor.pointIndex, neighbor.data ];
            plot.target.trigger("jqplotDataMouseOver", ins), !plot.series[ins[0]].highlightMouseOver || ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint || (plot.target.trigger("jqplotDataHighlight", ins), 
            highlight(plot, ins[0], ins[1]));
        } else null == neighbor && unhighlight(plot);
    }, $.jqplot.preInitHooks.push(preInit), $.jqplot.PieTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    }, $.jqplot.PieTickRenderer.prototype = new $.jqplot.AxisTickRenderer(), $.jqplot.PieTickRenderer.prototype.constructor = $.jqplot.PieTickRenderer;
}(jQuery);
//# sourceMappingURL=jqplot.pieRenderer.min.js.map