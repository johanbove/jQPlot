!function($) {
    $.jqplot.PyramidAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    }, $.jqplot.PyramidAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer(), $.jqplot.PyramidAxisRenderer.prototype.constructor = $.jqplot.PyramidAxisRenderer, 
    $.jqplot.PyramidAxisRenderer.prototype.init = function(options) {
        this.position = null, this.drawBaseline = !0, this.baselineWidth = null, this.baselineColor = null, 
        this.tickSpacingFactor = 25, this._type = "pyramid", this._splitAxis = !1, this._splitLength = null, 
        this.category = !1, this._autoFormatString = "", this._overrideFormatString = !1, 
        $.extend(!0, this, options), this.renderer.options = options, this.resetDataBounds = this.renderer.resetDataBounds, 
        this.resetDataBounds();
    }, $.jqplot.PyramidAxisRenderer.prototype.resetDataBounds = function() {
        var db = this._dataBounds;
        db.min = null, db.max = null;
        for (var temp, i = 0; i < this._series.length; i++) for (var s = this._series[i], d = s._plotData, j = 0, l = d.length; l > j; j++) "x" === this.name.charAt(0) ? (temp = d[j][1], 
        (null !== temp && temp < db.min || null === db.min) && (db.min = temp), (null !== temp && temp > db.max || null === db.max) && (db.max = temp)) : (temp = d[j][0], 
        (null !== temp && temp < db.min || null === db.min) && (db.min = temp), (null !== temp && temp > db.max || null === db.max) && (db.max = temp));
    }, $.jqplot.PyramidAxisRenderer.prototype.draw = function(ctx, plot) {
        if (this.show) {
            this.renderer.createTicks.call(this, plot);
            if (this._elem && (this._elem.emptyForce(), this._elem = null), this._elem = $(document.createElement("div")), 
            this._elem.addClass("jqplot-axis jqplot-" + this.name), this._elem.css("position", "absolute"), 
            "xaxis" == this.name || "x2axis" == this.name ? this._elem.width(this._plotDimensions.width) : this._elem.height(this._plotDimensions.height), 
            this.labelOptions.axis = this.name, this._label = new this.labelRenderer(this.labelOptions), 
            this._label.show) {
                var elem = this._label.draw(ctx, plot);
                elem.appendTo(this._elem), elem = null;
            }
            for (var tick, t = this._ticks, i = 0; i < t.length; i++) tick = t[i], tick.show && tick.showLabel && !tick.isMinorTick && this._elem.append(tick.draw(ctx, plot));
            tick = null, t = null;
        }
        return this._elem;
    };
    for (var _primes = [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997 ], _primesHash = {}, i = 0, l = _primes.length; l > i; i++) _primesHash[_primes[i]] = _primes[i];
    $.jqplot.PyramidAxisRenderer.prototype.createTicks = function(plot) {
        var dim, min, max, range, i, l, s, ut, t, threshold, tdim, scalefact, ret, tumin, tumax, maxVisibleTicks, val, temp, userTicks = this.ticks, db = this._dataBounds, skip = (this.min, 
        this.max, null);
        if (userTicks.length) {
            for (i = 0, l = userTicks.length; l > i; i++) ut = userTicks[i], t = new this.tickRenderer(this.tickOptions), 
            $.isArray(ut) ? (t.value = ut[0], t.label = ut[1], t.setTick(ut[0], this.name), 
            this._ticks.push(t)) : $.isPlainObject(ut) ? ($.extend(!0, t, ut), t.axis = this.name, 
            this._ticks.push(t)) : (val = "string" == typeof ut ? i + plot.defaultAxisStart : ut, 
            t.value = val, t.label = ut, t.axis = this.name, this._ticks.push(t));
            if (this.numberTicks = userTicks.length, this.min = this._ticks[0].value, this.max = this._ticks[this.numberTicks - 1].value, 
            this.tickInterval = (this.max - this.min) / (this.numberTicks - 1), this._options.tickInterval) {
                var ti = this._options.tickInterval;
                for (i = 0; i < this.numberTicks; i++) i % ti !== 0 && (this._ticks[i].isMinorTick = !0);
            } else if (dim = "x" === this.name.charAt(0) ? this._plotDimensions.width : this._plotDimensions.height, 
            maxVisibleTicks = Math.round(2 + dim / this.tickSpacingFactor), this.numberTicks > maxVisibleTicks) {
                for (temp = this.numberTicks - 1, i = 2; temp > i; i++) if (temp % i === 0 && maxVisibleTicks > temp / i) {
                    skip = i - 1;
                    break;
                }
                if (null !== skip) {
                    var count = 1;
                    for (i = 1, l = this._ticks.length; l > i; i++) skip >= count ? (this._ticks[i].show = !1, 
                    count += 1) : count = 1;
                }
            }
            if (temp = [], this.category) {
                for (this._ticks[0].showGridline = !1, this._ticks[0].showMark = !1, i = this._ticks.length - 1; i > 0; i--) t = new this.tickRenderer(this.tickOptions), 
                t.value = this._ticks[i - 1].value + this.tickInterval / 2, t.label = "", t.showLabel = !1, 
                t.axis = this.name, this._ticks[i].showGridline = !1, this._ticks[i].showMark = !1, 
                this._ticks.splice(i, 0, t);
                t = new this.tickRenderer(this.tickOptions), t.value = this._ticks[0].value - this.tickInterval / 2, 
                t.label = "", t.showLabel = !1, t.axis = this.name, this._ticks.unshift(t), t = new this.tickRenderer(this.tickOptions), 
                t.value = this._ticks[this._ticks.length - 1].value + this.tickInterval / 2, t.label = "", 
                t.showLabel = !1, t.axis = this.name, this._ticks.push(t), this.tickInterval = this.tickInterval / 2, 
                this.numberTicks = this._ticks.length, this.min = this._ticks[0].value, this.max = this._ticks[this._ticks.length - 1].value;
            }
        } else {
            if ("x" === this.name.charAt(0)) {
                dim = this._plotDimensions.width;
                var tempmax = Math.max(db.max, Math.abs(db.min)), tempmin = Math.min(db.min, -tempmax);
                min = tempmin, max = tempmax, range = max - min, null != this.tickOptions && this.tickOptions.formatString || (this._overrideFormatString = !0), 
                threshold = 30, tdim = Math.max(dim, threshold + 1), scalefact = (tdim - threshold) / 300, 
                ret = $.jqplot.LinearTickGenerator(min, max, scalefact), tumin = min + range * (this.padMin - 1), 
                tumax = max - range * (this.padMax - 1), (tumin > min || max > tumax) && (tumin = min - range * (this.padMin - 1), 
                tumax = max + range * (this.padMax - 1), ret = $.jqplot.LinearTickGenerator(tumin, tumax, scalefact)), 
                this.min = ret[0], this.max = ret[1], this.numberTicks = ret[2], this._autoFormatString = ret[3], 
                this.tickInterval = ret[4];
            } else if (dim = this._plotDimensions.height, min = db.min, max = db.max, s = this._series[0], 
            this._ticks = [], range = max - min, _primesHash[range] && (range += 1, max += 1), 
            this.max = max, this.min = min, maxVisibleTicks = Math.round(2 + dim / this.tickSpacingFactor), 
            maxVisibleTicks >= range + 1) this.numberTicks = range + 1, this.tickInterval = 1; else for (var i = maxVisibleTicks; i > 1; i--) if (range / (i - 1) === Math.round(range / (i - 1))) {
                this.numberTicks = i, this.tickInterval = range / (i - 1);
                break;
            }
            this._overrideFormatString && "" != this._autoFormatString && (this.tickOptions = this.tickOptions || {}, 
            this.tickOptions.formatString = this._autoFormatString);
            var labelval;
            for (i = 0; i < this.numberTicks; i++) this.tickOptions.axis = this.name, labelval = this.min + this.tickInterval * i, 
            "x" === this.name.charAt(0) && (labelval = Math.abs(labelval)), this.tickOptions.value = this.min + this.tickInterval * i, 
            t = new this.tickRenderer(this.tickOptions), t.label = t.prefix + t.formatter(t.formatString, labelval), 
            this._ticks.push(t), "x" === this.name.charAt(0) && plot.axes.yMidAxis.show && 0 === this.tickOptions.value && (this._splitAxis = !0, 
            this._splitLength = plot.axes.yMidAxis.getWidth(), t = new this.tickRenderer(this.tickOptions), 
            this._ticks.push(t), t.value = this.max / 2e3);
            t = null;
        }
    }, $.jqplot.PyramidAxisRenderer.prototype.set = function() {
        var temp, i, t, tick, dim = 0, w = 0, h = 0, lshow = null == this._label ? !1 : this._label.show;
        if (this.show) {
            for (t = this._ticks, l = t.length, i = 0; l > i; i++) tick = t[i], !tick._breakTick && tick.show && tick.showLabel && !tick.isMinorTick && (temp = "x" === this.name.charAt(0) ? tick._elem.outerHeight(!0) : tick._elem.outerWidth(!0), 
            temp > dim && (dim = temp));
            if ("yMidAxis" === this.name) for (i = 0; l > i; i++) tick = t[i], tick._elem && (temp = (dim - tick._elem.outerWidth(!0)) / 2, 
            tick._elem.css("left", temp));
            if (tick = null, t = null, lshow && (w = this._label._elem.outerWidth(!0), h = this._label._elem.outerHeight(!0)), 
            "xaxis" === this.name) dim += h, this._elem.css({
                height: dim + "px",
                left: "0px",
                bottom: "0px"
            }); else if ("x2axis" === this.name) dim += h, this._elem.css({
                height: dim + "px",
                left: "0px",
                top: "0px"
            }); else if ("yaxis" === this.name) dim += w, this._elem.css({
                width: dim + "px",
                left: "0px",
                top: "0px"
            }), lshow && this._label.constructor == $.jqplot.AxisLabelRenderer && this._label._elem.css("width", w + "px"); else if ("yMidAxis" === this.name) {
                var temp = dim / 2 - w / 2;
                this._elem.css({
                    width: dim + "px",
                    top: "0px"
                }), lshow && this._label.constructor == $.jqplot.AxisLabelRenderer && this._label._elem.css({
                    width: w,
                    left: temp,
                    top: 0
                });
            } else dim += w, this._elem.css({
                width: dim + "px",
                right: "0px",
                top: "0px"
            }), lshow && this._label.constructor == $.jqplot.AxisLabelRenderer && this._label._elem.css("width", w + "px");
        }
    }, $.jqplot.PyramidAxisRenderer.prototype.pack = function(pos, offsets) {
        pos = pos || {}, offsets = offsets || this._offsets;
        var ticks = this._ticks, max = this.max, min = this.min, offmax = offsets.max, offmin = offsets.min, lshow = null == this._label ? !1 : this._label.show;
        for (var p in pos) this._elem.css(p, pos[p]);
        this._offsets = offsets;
        var pixellength = offmax - offmin, unitlength = max - min, sl = this._splitLength;
        if (this._splitAxis ? (pixellength -= this._splitLength, this.p2u = function(p) {
            return (p - offmin) * unitlength / pixellength + min;
        }, this.u2p = function(u) {
            return 0 >= u ? (u - min) * pixellength / unitlength + offmin : (u - min) * pixellength / unitlength + offmin + sl;
        }, this.series_u2p = function(u) {
            return 0 >= u ? (u - min) * pixellength / unitlength : (u - min) * pixellength / unitlength + sl;
        }, this.series_p2u = function(p) {
            return p * unitlength / pixellength + min;
        }) : (this.p2u = function(p) {
            return (p - offmin) * unitlength / pixellength + min;
        }, this.u2p = function(u) {
            return (u - min) * pixellength / unitlength + offmin;
        }, "x" === this.name.charAt(0) ? (this.series_u2p = function(u) {
            return (u - min) * pixellength / unitlength;
        }, this.series_p2u = function(p) {
            return p * unitlength / pixellength + min;
        }) : (this.series_u2p = function(u) {
            return (u - max) * pixellength / unitlength;
        }, this.series_p2u = function(p) {
            return p * unitlength / pixellength + max;
        })), this.show) if ("x" === this.name.charAt(0)) {
            for (var i = 0; i < ticks.length; i++) {
                var t = ticks[i];
                if (t.show && t.showLabel) {
                    var shim;
                    if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                        var temp = "xaxis" == this.name ? 1 : -1;
                        switch (t.labelPosition) {
                          case "auto":
                            shim = temp * t.angle < 0 ? -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2 : -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                            break;

                          case "end":
                            shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                            break;

                          case "start":
                            shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                            break;

                          case "middle":
                            shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                            break;

                          default:
                            shim = -t.getWidth() / 2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                        }
                    } else shim = -t.getWidth() / 2;
                    var val = this.u2p(t.value) + shim + "px";
                    t._elem.css("left", val), t.pack();
                }
            }
            if (lshow) {
                var w = this._label._elem.outerWidth(!0);
                this._label._elem.css("left", offmin + pixellength / 2 - w / 2 + "px"), "xaxis" == this.name ? this._label._elem.css("bottom", "0px") : this._label._elem.css("top", "0px"), 
                this._label.pack();
            }
        } else {
            for (var i = 0; i < ticks.length; i++) {
                var t = ticks[i];
                if (t.show && t.showLabel && !t.isMinorTick) {
                    var shim;
                    if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                        var temp = "yaxis" == this.name ? 1 : -1;
                        switch (t.labelPosition) {
                          case "auto":
                          case "end":
                            shim = temp * t.angle < 0 ? -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2 : -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                            break;

                          case "start":
                            shim = t.angle > 0 ? -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2 : -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                            break;

                          case "middle":
                            shim = -t.getHeight() / 2;
                            break;

                          default:
                            shim = -t.getHeight() / 2;
                        }
                    } else shim = -t.getHeight() / 2;
                    var val = this.u2p(t.value) + shim + "px";
                    t._elem.css("top", val), t.pack();
                }
            }
            if (lshow) {
                var h = this._label._elem.outerHeight(!0);
                "yMidAxis" !== this.name && this._label._elem.css("top", offmax - pixellength / 2 - h / 2 + "px"), 
                "yaxis" == this.name ? this._label._elem.css("left", "0px") : "yMidAxis" !== this.name && this._label._elem.css("right", "0px"), 
                this._label.pack();
            }
        }
        ticks = null;
    };
}(jQuery);
//# sourceMappingURL=jqplot.pyramidAxisRenderer.min.js.map