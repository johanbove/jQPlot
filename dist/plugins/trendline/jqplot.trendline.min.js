!function($) {
    function addTrendlineLegend(series) {
        var ret = null;
        if (series.trendline && series.trendline.show) {
            var lt = series.trendline.label.toString();
            lt && (ret = {
                label: lt,
                color: series.trendline.color
            });
        }
        return ret;
    }
    function parseTrendLineOptions(target, data, seriesDefaults, options, plot) {
        !this._type || "line" !== this._type && "bar" != this._type || (this.trendline = new $.jqplot.Trendline(), 
        options = options || {}, $.extend(!0, this.trendline, {
            color: this.color
        }, seriesDefaults.trendline, options.trendline), this.trendline.renderer.init.call(this.trendline, null));
    }
    function drawTrendline(sctx, options) {
        if (options = $.extend(!0, {}, this.trendline, options), this.trendline && options.show) {
            var fit, data = options.data || this.data;
            fit = fitData(data, this.trendline.type);
            var gridData = options.gridData || this.renderer.makeGridData.call(this, fit.data);
            this.trendline.renderer.draw.call(this.trendline, sctx, gridData, {
                showLine: !0,
                shadow: this.trendline.shadow
            });
        }
    }
    function regression(x, y, typ) {
        var slope, intercept, type = null == typ ? "linear" : typ, N = x.length, SX = 0, SY = 0, SXX = 0, SXY = 0, SYY = 0, Y = [], X = [];
        if ("linear" == type) X = x, Y = y; else if ("exp" == type || "exponential" == type) for (var i = 0; i < y.length; i++) y[i] <= 0 ? N-- : (X.push(x[i]), 
        Y.push(Math.log(y[i])));
        for (var i = 0; N > i; i++) SX += X[i], SY += Y[i], SXY += X[i] * Y[i], SXX += X[i] * X[i], 
        SYY += Y[i] * Y[i];
        return slope = (N * SXY - SX * SY) / (N * SXX - SX * SX), intercept = (SY - slope * SX) / N, 
        [ slope, intercept ];
    }
    function linearRegression(X, Y) {
        var ret;
        return ret = regression(X, Y, "linear"), [ ret[0], ret[1] ];
    }
    function expRegression(X, Y) {
        var ret, x = X, y = Y;
        ret = regression(x, y, "exp");
        var base = Math.exp(ret[0]), coeff = Math.exp(ret[1]);
        return [ base, coeff ];
    }
    function fitData(data, typ) {
        var ret, res, type = null == typ ? "linear" : typ, x = [], y = [], ypred = [];
        for (i = 0; i < data.length; i++) null != data[i] && null != data[i][0] && null != data[i][1] && (x.push(data[i][0]), 
        y.push(data[i][1]));
        if ("linear" == type) {
            ret = linearRegression(x, y);
            for (var i = 0; i < x.length; i++) res = ret[0] * x[i] + ret[1], ypred.push([ x[i], res ]);
        } else if ("exp" == type || "exponential" == type) {
            ret = expRegression(x, y);
            for (var i = 0; i < x.length; i++) res = ret[1] * Math.pow(ret[0], x[i]), ypred.push([ x[i], res ]);
        }
        return {
            data: ypred,
            slope: ret[0],
            intercept: ret[1]
        };
    }
    $.jqplot.Trendline = function() {
        this.show = $.jqplot.config.enablePlugins, this.color = "#666666", this.renderer = new $.jqplot.LineRenderer(), 
        this.rendererOptions = {
            marker: {
                show: !1
            }
        }, this.label = "", this.type = "linear", this.shadow = !0, this.markerRenderer = {
            show: !1
        }, this.lineWidth = 1.5, this.shadowAngle = 45, this.shadowOffset = 1, this.shadowAlpha = .07, 
        this.shadowDepth = 3, this.isTrendline = !0;
    }, $.jqplot.postSeriesInitHooks.push(parseTrendLineOptions), $.jqplot.postDrawSeriesHooks.push(drawTrendline), 
    $.jqplot.addLegendRowHooks.push(addTrendlineLegend);
}(jQuery);
//# sourceMappingURL=jqplot.trendline.min.js.map